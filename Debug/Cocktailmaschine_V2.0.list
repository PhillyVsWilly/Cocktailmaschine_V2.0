
C:\Users\Philipp\Documents\Cocktailmaschine_V2.0\Debug\Cocktailmaschine_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080028b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          00000e04  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000e0c  20000e0c  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011140  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028f3  00000000  00000000  00031178  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009ce8  00000000  00000000  00033a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c50  00000000  00000000  0003d758  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fe0  00000000  00000000  0003e3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006e0a  00000000  00000000  0003f388  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004bf7  00000000  00000000  00046192  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0004ad89  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002324  00000000  00000000  0004ae08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000008 	.word	0x20000008
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002830 	.word	0x08002830

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	08002830 	.word	0x08002830

080001e0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001e2:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	6813      	ldr	r3, [r2, #0]
 80001e6:	f043 0310 	orr.w	r3, r3, #16
 80001ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ec:	2003      	movs	r0, #3
 80001ee:	f000 fb9d 	bl	800092c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f2:	2000      	movs	r0, #0
 80001f4:	f002 fa54 	bl	80026a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f8:	f002 f9f0 	bl	80025dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80001fc:	2000      	movs	r0, #0
 80001fe:	bd08      	pop	{r3, pc}
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000204:	4a02      	ldr	r2, [pc, #8]	; (8000210 <HAL_IncTick+0xc>)
 8000206:	6813      	ldr	r3, [r2, #0]
 8000208:	3301      	adds	r3, #1
 800020a:	6013      	str	r3, [r2, #0]
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000d70 	.word	0x20000d70

08000214 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000214:	4b01      	ldr	r3, [pc, #4]	; (800021c <HAL_GetTick+0x8>)
 8000216:	6818      	ldr	r0, [r3, #0]
}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000d70 	.word	0x20000d70

08000220 <ADC_Disable>:
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000220:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000222:	6803      	ldr	r3, [r0, #0]
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000224:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000226:	6898      	ldr	r0, [r3, #8]
 8000228:	f000 0003 	and.w	r0, r0, #3
 800022c:	2801      	cmp	r0, #1
 800022e:	d001      	beq.n	8000234 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000230:	2000      	movs	r0, #0
 8000232:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	07d2      	lsls	r2, r2, #31
 8000238:	d5fa      	bpl.n	8000230 <ADC_Disable+0x10>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800023a:	689a      	ldr	r2, [r3, #8]
 800023c:	f002 020d 	and.w	r2, r2, #13
 8000240:	2a01      	cmp	r2, #1
 8000242:	d109      	bne.n	8000258 <ADC_Disable+0x38>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000244:	689a      	ldr	r2, [r3, #8]
 8000246:	f042 0202 	orr.w	r2, r2, #2
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	2203      	movs	r2, #3
 800024e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000250:	f7ff ffe0 	bl	8000214 <HAL_GetTick>
 8000254:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000256:	e008      	b.n	800026a <ADC_Disable+0x4a>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000258:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800025a:	f043 0310 	orr.w	r3, r3, #16
 800025e:	6463      	str	r3, [r4, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000260:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	64a3      	str	r3, [r4, #72]	; 0x48
      
      return HAL_ERROR;
 8000268:	bd38      	pop	{r3, r4, r5, pc}
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800026a:	6823      	ldr	r3, [r4, #0]
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	07db      	lsls	r3, r3, #31
 8000270:	d5de      	bpl.n	8000230 <ADC_Disable+0x10>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000272:	f7ff ffcf 	bl	8000214 <HAL_GetTick>
 8000276:	1b40      	subs	r0, r0, r5
 8000278:	2802      	cmp	r0, #2
 800027a:	d9f6      	bls.n	800026a <ADC_Disable+0x4a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800027c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800027e:	f043 0310 	orr.w	r3, r3, #16
 8000282:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000284:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 800028c:	2001      	movs	r0, #1
 800028e:	bd38      	pop	{r3, r4, r5, pc}

08000290 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000290:	b530      	push	{r4, r5, lr}
 8000292:	b097      	sub	sp, #92	; 0x5c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000294:	2200      	movs	r2, #0
 8000296:	9200      	str	r2, [sp, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000298:	4604      	mov	r4, r0
 800029a:	2800      	cmp	r0, #0
 800029c:	d066      	beq.n	800036c <HAL_ADC_Init+0xdc>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800029e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80002a0:	06d9      	lsls	r1, r3, #27
 80002a2:	d447      	bmi.n	8000334 <HAL_ADC_Init+0xa4>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80002a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80002a6:	b10b      	cbz	r3, 80002ac <HAL_ADC_Init+0x1c>
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002a8:	2200      	movs	r2, #0
 80002aa:	e031      	b.n	8000310 <HAL_ADC_Init+0x80>
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80002ac:	6483      	str	r3, [r0, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80002ae:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80002b0:	64c3      	str	r3, [r0, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80002b2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 80002b6:	f002 f9cf 	bl	8002658 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80002ba:	6823      	ldr	r3, [r4, #0]
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	00db      	lsls	r3, r3, #3
 80002c0:	d4f2      	bmi.n	80002a8 <HAL_ADC_Init+0x18>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80002c2:	4620      	mov	r0, r4
 80002c4:	f7ff ffac 	bl	8000220 <ADC_Disable>
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002ca:	06dd      	lsls	r5, r3, #27
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80002cc:	4602      	mov	r2, r0
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002ce:	d41f      	bmi.n	8000310 <HAL_ADC_Init+0x80>
 80002d0:	b9f0      	cbnz	r0, 8000310 <HAL_ADC_Init+0x80>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80002d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002d8:	f023 0302 	bic.w	r3, r3, #2
 80002dc:	f043 0302 	orr.w	r3, r3, #2
 80002e0:	6463      	str	r3, [r4, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80002e2:	6823      	ldr	r3, [r4, #0]
 80002e4:	689a      	ldr	r2, [r3, #8]
 80002e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80002ea:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80002ec:	689a      	ldr	r2, [r3, #8]
 80002ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80002f4:	4b79      	ldr	r3, [pc, #484]	; (80004dc <HAL_ADC_Init+0x24c>)
 80002f6:	4a7a      	ldr	r2, [pc, #488]	; (80004e0 <HAL_ADC_Init+0x250>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80002fe:	230a      	movs	r3, #10
 8000300:	4353      	muls	r3, r2
          while(wait_loop_index != 0U)
          {
            wait_loop_index--;
 8000302:	9300      	str	r3, [sp, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
          while(wait_loop_index != 0U)
 8000304:	9b00      	ldr	r3, [sp, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0ce      	beq.n	80002a8 <HAL_ADC_Init+0x18>
          {
            wait_loop_index--;
 800030a:	9b00      	ldr	r3, [sp, #0]
 800030c:	3b01      	subs	r3, #1
 800030e:	e7f8      	b.n	8000302 <HAL_ADC_Init+0x72>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000310:	6823      	ldr	r3, [r4, #0]
 8000312:	6899      	ldr	r1, [r3, #8]
 8000314:	00c9      	lsls	r1, r1, #3
 8000316:	d502      	bpl.n	800031e <HAL_ADC_Init+0x8e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000318:	689b      	ldr	r3, [r3, #8]
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800031a:	009d      	lsls	r5, r3, #2
 800031c:	d50a      	bpl.n	8000334 <HAL_ADC_Init+0xa4>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800031e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000320:	f023 0312 	bic.w	r3, r3, #18
 8000324:	f043 0310 	orr.w	r3, r3, #16
 8000328:	6463      	str	r3, [r4, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800032a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	64a3      	str	r3, [r4, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000332:	2201      	movs	r2, #1
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000334:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000336:	06d8      	lsls	r0, r3, #27
 8000338:	d412      	bmi.n	8000360 <HAL_ADC_Init+0xd0>
 800033a:	b98a      	cbnz	r2, 8000360 <HAL_ADC_Init+0xd0>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800033c:	6823      	ldr	r3, [r4, #0]
 800033e:	6899      	ldr	r1, [r3, #8]
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
      (tmp_hal_status == HAL_OK)                                &&
 8000340:	0749      	lsls	r1, r1, #29
 8000342:	d40d      	bmi.n	8000360 <HAL_ADC_Init+0xd0>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000344:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000346:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 800034a:	f041 0102 	orr.w	r1, r1, #2
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800034e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000352:	6461      	str	r1, [r4, #68]	; 0x44
 8000354:	4963      	ldr	r1, [pc, #396]	; (80004e4 <HAL_ADC_Init+0x254>)
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000356:	d00b      	beq.n	8000370 <HAL_ADC_Init+0xe0>
 8000358:	428b      	cmp	r3, r1
 800035a:	f040 80aa 	bne.w	80004b2 <HAL_ADC_Init+0x222>
 800035e:	e0b4      	b.n	80004ca <HAL_ADC_Init+0x23a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000360:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000362:	f023 0312 	bic.w	r3, r3, #18
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6463      	str	r3, [r4, #68]	; 0x44
  __IO uint32_t wait_loop_index = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 800036c:	2001      	movs	r0, #1
 800036e:	e0b2      	b.n	80004d6 <HAL_ADC_Init+0x246>
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000370:	4a5d      	ldr	r2, [pc, #372]	; (80004e8 <HAL_ADC_Init+0x258>)
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000372:	9101      	str	r1, [sp, #4]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000374:	6899      	ldr	r1, [r3, #8]
 8000376:	f001 0103 	and.w	r1, r1, #3
 800037a:	2901      	cmp	r1, #1
 800037c:	d102      	bne.n	8000384 <HAL_ADC_Init+0xf4>
 800037e:	6819      	ldr	r1, [r3, #0]
 8000380:	07cd      	lsls	r5, r1, #31
 8000382:	d40d      	bmi.n	80003a0 <HAL_ADC_Init+0x110>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000384:	9901      	ldr	r1, [sp, #4]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000386:	2900      	cmp	r1, #0
 8000388:	f000 808c 	beq.w	80004a4 <HAL_ADC_Init+0x214>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800038c:	6888      	ldr	r0, [r1, #8]
 800038e:	f000 0003 	and.w	r0, r0, #3
 8000392:	2801      	cmp	r0, #1
 8000394:	f040 8086 	bne.w	80004a4 <HAL_ADC_Init+0x214>
 8000398:	6809      	ldr	r1, [r1, #0]
 800039a:	07c8      	lsls	r0, r1, #31
 800039c:	f140 8082 	bpl.w	80004a4 <HAL_ADC_Init+0x214>
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80003a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80003a2:	68e5      	ldr	r5, [r4, #12]
 80003a4:	69e0      	ldr	r0, [r4, #28]
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	68a2      	ldr	r2, [r4, #8]
 80003aa:	ea42 0205 	orr.w	r2, r2, r5
 80003ae:	bf0c      	ite	eq
 80003b0:	2100      	moveq	r1, #0
 80003b2:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 80003b6:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 80003ba:	4311      	orrs	r1, r2
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80003be:	2a01      	cmp	r2, #1
 80003c0:	d111      	bne.n	80003e6 <HAL_ADC_Init+0x156>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003c2:	b930      	cbnz	r0, 80003d2 <HAL_ADC_Init+0x142>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80003c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003c6:	3a01      	subs	r2, #1
 80003c8:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 80003cc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80003d0:	e009      	b.n	80003e6 <HAL_ADC_Init+0x156>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80003d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80003d4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80003d8:	f042 0220 	orr.w	r2, r2, #32
 80003dc:	6462      	str	r2, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80003e0:	f042 0201 	orr.w	r2, r2, #1
 80003e4:	64a2      	str	r2, [r4, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80003e8:	2a01      	cmp	r2, #1
 80003ea:	d02f      	beq.n	800044c <HAL_ADC_Init+0x1bc>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80003ec:	483f      	ldr	r0, [pc, #252]	; (80004ec <HAL_ADC_Init+0x25c>)
 80003ee:	4283      	cmp	r3, r0
 80003f0:	d003      	beq.n	80003fa <HAL_ADC_Init+0x16a>
 80003f2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80003f6:	4283      	cmp	r3, r0
 80003f8:	d114      	bne.n	8000424 <HAL_ADC_Init+0x194>
 80003fa:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 80003fe:	d014      	beq.n	800042a <HAL_ADC_Init+0x19a>
 8000400:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000404:	d014      	beq.n	8000430 <HAL_ADC_Init+0x1a0>
 8000406:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 800040a:	d014      	beq.n	8000436 <HAL_ADC_Init+0x1a6>
 800040c:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 8000410:	d014      	beq.n	800043c <HAL_ADC_Init+0x1ac>
 8000412:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 8000416:	d014      	beq.n	8000442 <HAL_ADC_Init+0x1b2>
 8000418:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 800041c:	bf08      	it	eq
 800041e:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 8000422:	e010      	b.n	8000446 <HAL_ADC_Init+0x1b6>
 8000424:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000428:	e00d      	b.n	8000446 <HAL_ADC_Init+0x1b6>
 800042a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800042e:	e00a      	b.n	8000446 <HAL_ADC_Init+0x1b6>
 8000430:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8000434:	e007      	b.n	8000446 <HAL_ADC_Init+0x1b6>
 8000436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800043a:	e004      	b.n	8000446 <HAL_ADC_Init+0x1b6>
 800043c:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000440:	e001      	b.n	8000446 <HAL_ADC_Init+0x1b6>
 8000442:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000446:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000448:	4301      	orrs	r1, r0
 800044a:	4311      	orrs	r1, r2
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800044c:	689a      	ldr	r2, [r3, #8]
 800044e:	f012 0f0c 	tst.w	r2, #12
 8000452:	d10b      	bne.n	800046c <HAL_ADC_Init+0x1dc>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000454:	68da      	ldr	r2, [r3, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000456:	69a0      	ldr	r0, [r4, #24]
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000458:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800045c:	f022 0202 	bic.w	r2, r2, #2
 8000460:	60da      	str	r2, [r3, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000462:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000464:	0052      	lsls	r2, r2, #1
 8000466:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 800046a:	4311      	orrs	r1, r2
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800046c:	68d8      	ldr	r0, [r3, #12]
 800046e:	4a20      	ldr	r2, [pc, #128]	; (80004f0 <HAL_ADC_Init+0x260>)
 8000470:	4002      	ands	r2, r0
 8000472:	4311      	orrs	r1, r2
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000474:	6922      	ldr	r2, [r4, #16]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000476:	60d9      	str	r1, [r3, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000478:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800047a:	bf08      	it	eq
 800047c:	6a21      	ldreq	r1, [r4, #32]
 800047e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000480:	bf03      	ittte	eq
 8000482:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8000486:	f022 020f 	biceq.w	r2, r2, #15
 800048a:	430a      	orreq	r2, r1
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800048c:	f022 020f 	bicne.w	r2, r2, #15
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000490:	2000      	movs	r0, #0
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000492:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000494:	64a0      	str	r0, [r4, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000496:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000498:	f023 0303 	bic.w	r3, r3, #3
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6463      	str	r3, [r4, #68]	; 0x44
 80004a2:	e018      	b.n	80004d6 <HAL_ADC_Init+0x246>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80004a4:	6891      	ldr	r1, [r2, #8]
 80004a6:	f421 3040 	bic.w	r0, r1, #196608	; 0x30000
 80004aa:	6861      	ldr	r1, [r4, #4]
 80004ac:	4301      	orrs	r1, r0
 80004ae:	6091      	str	r1, [r2, #8]
 80004b0:	e776      	b.n	80003a0 <HAL_ADC_Init+0x110>
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004b2:	480e      	ldr	r0, [pc, #56]	; (80004ec <HAL_ADC_Init+0x25c>)
 80004b4:	490f      	ldr	r1, [pc, #60]	; (80004f4 <HAL_ADC_Init+0x264>)
 80004b6:	4283      	cmp	r3, r0
 80004b8:	d101      	bne.n	80004be <HAL_ADC_Init+0x22e>
 80004ba:	9101      	str	r1, [sp, #4]
 80004bc:	e003      	b.n	80004c6 <HAL_ADC_Init+0x236>
 80004be:	428b      	cmp	r3, r1
 80004c0:	bf0c      	ite	eq
 80004c2:	9001      	streq	r0, [sp, #4]
 80004c4:	9201      	strne	r2, [sp, #4]
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004c6:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <HAL_ADC_Init+0x268>)
 80004c8:	e754      	b.n	8000374 <HAL_ADC_Init+0xe4>
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80004ce:	9201      	str	r2, [sp, #4]
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004d0:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80004d4:	e74e      	b.n	8000374 <HAL_ADC_Init+0xe4>
  }
  
  
  /* Return function status */
  return tmp_hal_status;
}
 80004d6:	b017      	add	sp, #92	; 0x5c
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	bf00      	nop
 80004dc:	20000004 	.word	0x20000004
 80004e0:	000f4240 	.word	0x000f4240
 80004e4:	50000100 	.word	0x50000100
 80004e8:	50000300 	.word	0x50000300
 80004ec:	50000400 	.word	0x50000400
 80004f0:	fff0c007 	.word	0xfff0c007
 80004f4:	50000500 	.word	0x50000500
 80004f8:	50000700 	.word	0x50000700

080004fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b097      	sub	sp, #92	; 0x5c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000500:	2300      	movs	r3, #0
 8000502:	9300      	str	r3, [sp, #0]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000504:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000508:	2b01      	cmp	r3, #1
 800050a:	f000 80eb 	beq.w	80006e4 <HAL_ADC_ConfigChannel+0x1e8>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800050e:	6803      	ldr	r3, [r0, #0]
 8000510:	689c      	ldr	r4, [r3, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000512:	2201      	movs	r2, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000514:	0767      	lsls	r7, r4, #29
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000516:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800051a:	f100 80d9 	bmi.w	80006d0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800051e:	684d      	ldr	r5, [r1, #4]
 8000520:	680c      	ldr	r4, [r1, #0]
 8000522:	2d04      	cmp	r5, #4
 8000524:	f04f 0206 	mov.w	r2, #6
 8000528:	d80a      	bhi.n	8000540 <HAL_ADC_ConfigChannel+0x44>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800052a:	436a      	muls	r2, r5
 800052c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800052e:	251f      	movs	r5, #31
 8000530:	4095      	lsls	r5, r2
 8000532:	ea26 0505 	bic.w	r5, r6, r5
 8000536:	fa04 f202 	lsl.w	r2, r4, r2
 800053a:	432a      	orrs	r2, r5
 800053c:	631a      	str	r2, [r3, #48]	; 0x30
 800053e:	e026      	b.n	800058e <HAL_ADC_ConfigChannel+0x92>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000540:	2d09      	cmp	r5, #9
 8000542:	d80b      	bhi.n	800055c <HAL_ADC_ConfigChannel+0x60>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000544:	436a      	muls	r2, r5
 8000546:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8000548:	3a1e      	subs	r2, #30
 800054a:	251f      	movs	r5, #31
 800054c:	4095      	lsls	r5, r2
 800054e:	ea26 0505 	bic.w	r5, r6, r5
 8000552:	fa04 f202 	lsl.w	r2, r4, r2
 8000556:	432a      	orrs	r2, r5
 8000558:	635a      	str	r2, [r3, #52]	; 0x34
 800055a:	e018      	b.n	800058e <HAL_ADC_ConfigChannel+0x92>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800055c:	2d0e      	cmp	r5, #14
 800055e:	d80b      	bhi.n	8000578 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000560:	436a      	muls	r2, r5
 8000562:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8000564:	3a3c      	subs	r2, #60	; 0x3c
 8000566:	251f      	movs	r5, #31
 8000568:	4095      	lsls	r5, r2
 800056a:	ea26 0505 	bic.w	r5, r6, r5
 800056e:	fa04 f202 	lsl.w	r2, r4, r2
 8000572:	432a      	orrs	r2, r5
 8000574:	639a      	str	r2, [r3, #56]	; 0x38
 8000576:	e00a      	b.n	800058e <HAL_ADC_ConfigChannel+0x92>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000578:	436a      	muls	r2, r5
 800057a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800057c:	3a5a      	subs	r2, #90	; 0x5a
 800057e:	251f      	movs	r5, #31
 8000580:	4095      	lsls	r5, r2
 8000582:	ea26 0505 	bic.w	r5, r6, r5
 8000586:	fa04 f202 	lsl.w	r2, r4, r2
 800058a:	432a      	orrs	r2, r5
 800058c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800058e:	689a      	ldr	r2, [r3, #8]
 8000590:	f012 0f0c 	tst.w	r2, #12
 8000594:	d178      	bne.n	8000688 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000596:	2c09      	cmp	r4, #9
 8000598:	ea4f 0244 	mov.w	r2, r4, lsl #1
 800059c:	688e      	ldr	r6, [r1, #8]
 800059e:	d90c      	bls.n	80005ba <HAL_ADC_ConfigChannel+0xbe>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80005a0:	1915      	adds	r5, r2, r4
 80005a2:	f1a5 021e 	sub.w	r2, r5, #30
 80005a6:	699f      	ldr	r7, [r3, #24]
 80005a8:	2507      	movs	r5, #7
 80005aa:	4095      	lsls	r5, r2
 80005ac:	ea27 0505 	bic.w	r5, r7, r5
 80005b0:	fa06 f202 	lsl.w	r2, r6, r2
 80005b4:	432a      	orrs	r2, r5
 80005b6:	619a      	str	r2, [r3, #24]
 80005b8:	e009      	b.n	80005ce <HAL_ADC_ConfigChannel+0xd2>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80005ba:	695f      	ldr	r7, [r3, #20]
 80005bc:	4422      	add	r2, r4
 80005be:	2507      	movs	r5, #7
 80005c0:	4095      	lsls	r5, r2
 80005c2:	ea27 0505 	bic.w	r5, r7, r5
 80005c6:	fa06 f202 	lsl.w	r2, r6, r2
 80005ca:	432a      	orrs	r2, r5
 80005cc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	694f      	ldr	r7, [r1, #20]
 80005d2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	4097      	lsls	r7, r2
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80005da:	690a      	ldr	r2, [r1, #16]
 80005dc:	3a01      	subs	r2, #1
 80005de:	ea4f 6e84 	mov.w	lr, r4, lsl #26
 80005e2:	2a03      	cmp	r2, #3
 80005e4:	d82c      	bhi.n	8000640 <HAL_ADC_ConfigChannel+0x144>
 80005e6:	e8df f002 	tbb	[pc, r2]
 80005ea:	0d02      	.short	0x0d02
 80005ec:	2218      	.short	0x2218
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80005ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005f0:	4e81      	ldr	r6, [pc, #516]	; (80007f8 <HAL_ADC_ConfigChannel+0x2fc>)
 80005f2:	4016      	ands	r6, r2
 80005f4:	ea46 060e 	orr.w	r6, r6, lr
 80005f8:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0207 	orr.w	r2, r6, r7
 8000600:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000602:	e041      	b.n	8000688 <HAL_ADC_ConfigChannel+0x18c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000604:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000606:	4d7c      	ldr	r5, [pc, #496]	; (80007f8 <HAL_ADC_ConfigChannel+0x2fc>)
 8000608:	4015      	ands	r5, r2
 800060a:	ea45 050e 	orr.w	r5, r5, lr
 800060e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000612:	ea45 0207 	orr.w	r2, r5, r7
 8000616:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000618:	e036      	b.n	8000688 <HAL_ADC_ConfigChannel+0x18c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800061a:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800061c:	4a76      	ldr	r2, [pc, #472]	; (80007f8 <HAL_ADC_ConfigChannel+0x2fc>)
 800061e:	402a      	ands	r2, r5
 8000620:	ea42 020e 	orr.w	r2, r2, lr
 8000624:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000628:	433a      	orrs	r2, r7
 800062a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800062c:	e02c      	b.n	8000688 <HAL_ADC_ConfigChannel+0x18c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800062e:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8000630:	4a71      	ldr	r2, [pc, #452]	; (80007f8 <HAL_ADC_ConfigChannel+0x2fc>)
 8000632:	402a      	ands	r2, r5
 8000634:	ea42 020e 	orr.w	r2, r2, lr
 8000638:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800063c:	433a      	orrs	r2, r7
 800063e:	e022      	b.n	8000686 <HAL_ADC_ConfigChannel+0x18a>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000642:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000646:	4572      	cmp	r2, lr
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000648:	bf02      	ittt	eq
 800064a:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800064c:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000650:	661a      	streq	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000652:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000654:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000658:	4596      	cmp	lr, r2
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800065a:	bf02      	ittt	eq
 800065c:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 800065e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000662:	665a      	streq	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000664:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000666:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800066a:	4596      	cmp	lr, r2
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800066c:	bf02      	ittt	eq
 800066e:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000670:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000674:	669a      	streq	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000676:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000678:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800067c:	4596      	cmp	lr, r2
 800067e:	d103      	bne.n	8000688 <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000680:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000682:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000686:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000688:	689a      	ldr	r2, [r3, #8]
 800068a:	f002 0203 	and.w	r2, r2, #3
 800068e:	2a01      	cmp	r2, #1
 8000690:	d102      	bne.n	8000698 <HAL_ADC_ConfigChannel+0x19c>
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	07d6      	lsls	r6, r2, #31
 8000696:	d419      	bmi.n	80006cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000698:	68ca      	ldr	r2, [r1, #12]
 800069a:	2a01      	cmp	r2, #1
 800069c:	d024      	beq.n	80006e8 <HAL_ADC_ConfigChannel+0x1ec>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800069e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80006a2:	2201      	movs	r2, #1
 80006a4:	40a2      	lsls	r2, r4
 80006a6:	ea21 0202 	bic.w	r2, r1, r2
 80006aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80006ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006b2:	d03d      	beq.n	8000730 <HAL_ADC_ConfigChannel+0x234>
 80006b4:	4951      	ldr	r1, [pc, #324]	; (80007fc <HAL_ADC_ConfigChannel+0x300>)
 80006b6:	4a52      	ldr	r2, [pc, #328]	; (8000800 <HAL_ADC_ConfigChannel+0x304>)
 80006b8:	4d52      	ldr	r5, [pc, #328]	; (8000804 <HAL_ADC_ConfigChannel+0x308>)
 80006ba:	42ab      	cmp	r3, r5
 80006bc:	bf08      	it	eq
 80006be:	460a      	moveq	r2, r1
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80006c0:	2c10      	cmp	r4, #16
 80006c2:	d137      	bne.n	8000734 <HAL_ADC_ConfigChannel+0x238>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80006c4:	6891      	ldr	r1, [r2, #8]
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80006c6:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80006ca:	d03f      	beq.n	800074c <HAL_ADC_ConfigChannel+0x250>
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	e004      	b.n	80006da <HAL_ADC_ConfigChannel+0x1de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006d2:	f043 0320 	orr.w	r3, r3, #32
 80006d6:	6443      	str	r3, [r0, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80006d8:	4613      	mov	r3, r2
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80006da:	2200      	movs	r2, #0
 80006dc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 80006e0:	4618      	mov	r0, r3
 80006e2:	e087      	b.n	80007f4 <HAL_ADC_ConfigChannel+0x2f8>
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006e4:	2002      	movs	r0, #2
 80006e6:	e085      	b.n	80007f4 <HAL_ADC_ConfigChannel+0x2f8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80006e8:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 80006ec:	40a2      	lsls	r2, r4
 80006ee:	432a      	orrs	r2, r5
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80006f0:	2c09      	cmp	r4, #9
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80006f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80006f6:	688d      	ldr	r5, [r1, #8]
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80006f8:	d90d      	bls.n	8000716 <HAL_ADC_ConfigChannel+0x21a>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80006fa:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80006fe:	f1a1 021b 	sub.w	r2, r1, #27
 8000702:	699e      	ldr	r6, [r3, #24]
 8000704:	2107      	movs	r1, #7
 8000706:	4091      	lsls	r1, r2
 8000708:	ea26 0101 	bic.w	r1, r6, r1
 800070c:	fa05 f202 	lsl.w	r2, r5, r2
 8000710:	430a      	orrs	r2, r1
 8000712:	619a      	str	r2, [r3, #24]
 8000714:	e7cb      	b.n	80006ae <HAL_ADC_ConfigChannel+0x1b2>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000716:	1c62      	adds	r2, r4, #1
 8000718:	695e      	ldr	r6, [r3, #20]
 800071a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800071e:	2107      	movs	r1, #7
 8000720:	4091      	lsls	r1, r2
 8000722:	ea26 0101 	bic.w	r1, r6, r1
 8000726:	fa05 f202 	lsl.w	r2, r5, r2
 800072a:	430a      	orrs	r2, r1
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	e7be      	b.n	80006ae <HAL_ADC_ConfigChannel+0x1b2>
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000730:	4a32      	ldr	r2, [pc, #200]	; (80007fc <HAL_ADC_ConfigChannel+0x300>)
 8000732:	e7c5      	b.n	80006c0 <HAL_ADC_ConfigChannel+0x1c4>
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000734:	2c11      	cmp	r4, #17
 8000736:	d103      	bne.n	8000740 <HAL_ADC_ConfigChannel+0x244>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000738:	6891      	ldr	r1, [r2, #8]
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800073a:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 800073e:	e7c4      	b.n	80006ca <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000740:	2c12      	cmp	r4, #18
 8000742:	d1c3      	bne.n	80006cc <HAL_ADC_ConfigChannel+0x1d0>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000744:	6891      	ldr	r1, [r2, #8]
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000746:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800074a:	e7be      	b.n	80006ca <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800074c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000750:	492c      	ldr	r1, [pc, #176]	; (8000804 <HAL_ADC_ConfigChannel+0x308>)
 8000752:	d00d      	beq.n	8000770 <HAL_ADC_ConfigChannel+0x274>
 8000754:	428b      	cmp	r3, r1
 8000756:	d102      	bne.n	800075e <HAL_ADC_ConfigChannel+0x262>
 8000758:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800075c:	e008      	b.n	8000770 <HAL_ADC_ConfigChannel+0x274>
 800075e:	492a      	ldr	r1, [pc, #168]	; (8000808 <HAL_ADC_ConfigChannel+0x30c>)
 8000760:	4d2a      	ldr	r5, [pc, #168]	; (800080c <HAL_ADC_ConfigChannel+0x310>)
 8000762:	428b      	cmp	r3, r1
 8000764:	d101      	bne.n	800076a <HAL_ADC_ConfigChannel+0x26e>
 8000766:	9501      	str	r5, [sp, #4]
 8000768:	e003      	b.n	8000772 <HAL_ADC_ConfigChannel+0x276>
 800076a:	42ab      	cmp	r3, r5
 800076c:	bf18      	it	ne
 800076e:	2100      	movne	r1, #0
 8000770:	9101      	str	r1, [sp, #4]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000772:	6899      	ldr	r1, [r3, #8]
 8000774:	f001 0103 	and.w	r1, r1, #3
 8000778:	2901      	cmp	r1, #1
 800077a:	d102      	bne.n	8000782 <HAL_ADC_ConfigChannel+0x286>
 800077c:	6819      	ldr	r1, [r3, #0]
 800077e:	07cd      	lsls	r5, r1, #31
 8000780:	d409      	bmi.n	8000796 <HAL_ADC_ConfigChannel+0x29a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000782:	9901      	ldr	r1, [sp, #4]
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000784:	b169      	cbz	r1, 80007a2 <HAL_ADC_ConfigChannel+0x2a6>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000786:	688d      	ldr	r5, [r1, #8]
 8000788:	f005 0503 	and.w	r5, r5, #3
 800078c:	2d01      	cmp	r5, #1
 800078e:	d108      	bne.n	80007a2 <HAL_ADC_ConfigChannel+0x2a6>
 8000790:	6809      	ldr	r1, [r1, #0]
 8000792:	07c9      	lsls	r1, r1, #31
 8000794:	d505      	bpl.n	80007a2 <HAL_ADC_ConfigChannel+0x2a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000796:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000798:	f043 0320 	orr.w	r3, r3, #32
 800079c:	6443      	str	r3, [r0, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e79b      	b.n	80006da <HAL_ADC_ConfigChannel+0x1de>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80007a2:	2c10      	cmp	r4, #16
 80007a4:	d114      	bne.n	80007d0 <HAL_ADC_ConfigChannel+0x2d4>
 80007a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007aa:	d18f      	bne.n	80006cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80007ac:	6893      	ldr	r3, [r2, #8]
 80007ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007b2:	6093      	str	r3, [r2, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_ADC_ConfigChannel+0x314>)
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <HAL_ADC_ConfigChannel+0x318>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80007be:	230a      	movs	r3, #10
 80007c0:	4353      	muls	r3, r2
          while(wait_loop_index != 0U)
          {
            wait_loop_index--;
 80007c2:	9300      	str	r3, [sp, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
          while(wait_loop_index != 0U)
 80007c4:	9b00      	ldr	r3, [sp, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d080      	beq.n	80006cc <HAL_ADC_ConfigChannel+0x1d0>
          {
            wait_loop_index--;
 80007ca:	9b00      	ldr	r3, [sp, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	e7f8      	b.n	80007c2 <HAL_ADC_ConfigChannel+0x2c6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80007d0:	2c11      	cmp	r4, #17
 80007d2:	d107      	bne.n	80007e4 <HAL_ADC_ConfigChannel+0x2e8>
 80007d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d8:	f47f af78 	bne.w	80006cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80007dc:	6893      	ldr	r3, [r2, #8]
 80007de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007e2:	e005      	b.n	80007f0 <HAL_ADC_ConfigChannel+0x2f4>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80007e4:	2c12      	cmp	r4, #18
 80007e6:	f47f af71 	bne.w	80006cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80007ea:	6893      	ldr	r3, [r2, #8]
 80007ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f0:	6093      	str	r3, [r2, #8]
 80007f2:	e76b      	b.n	80006cc <HAL_ADC_ConfigChannel+0x1d0>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 80007f4:	b017      	add	sp, #92	; 0x5c
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f8:	83fff000 	.word	0x83fff000
 80007fc:	50000300 	.word	0x50000300
 8000800:	50000700 	.word	0x50000700
 8000804:	50000100 	.word	0x50000100
 8000808:	50000400 	.word	0x50000400
 800080c:	50000500 	.word	0x50000500
 8000810:	20000004 	.word	0x20000004
 8000814:	000f4240 	.word	0x000f4240

08000818 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000818:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800081a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800081e:	2b01      	cmp	r3, #1
  * @param  hadc: ADC handle
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000820:	b097      	sub	sp, #92	; 0x5c
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000822:	d053      	beq.n	80008cc <HAL_ADCEx_MultiModeConfigChannel+0xb4>
  
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000824:	6802      	ldr	r2, [r0, #0]
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000826:	2301      	movs	r3, #1
  
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000828:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800082c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8000830:	4b39      	ldr	r3, [pc, #228]	; (8000918 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
  
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000832:	d00d      	beq.n	8000850 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8000834:	429a      	cmp	r2, r3
 8000836:	d102      	bne.n	800083e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000838:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800083c:	e008      	b.n	8000850 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8000840:	4c37      	ldr	r4, [pc, #220]	; (8000920 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8000842:	429a      	cmp	r2, r3
 8000844:	d101      	bne.n	800084a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8000846:	9401      	str	r4, [sp, #4]
 8000848:	e003      	b.n	8000852 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800084a:	42a2      	cmp	r2, r4
 800084c:	bf18      	it	ne
 800084e:	2300      	movne	r3, #0
 8000850:	9301      	str	r3, [sp, #4]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000852:	6893      	ldr	r3, [r2, #8]
 8000854:	075f      	lsls	r7, r3, #29
 8000856:	d42f      	bmi.n	80008b8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000858:	9c01      	ldr	r4, [sp, #4]
 800085a:	68a3      	ldr	r3, [r4, #8]
 800085c:	075e      	lsls	r6, r3, #29
 800085e:	d42b      	bmi.n	80008b8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000860:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000864:	d006      	beq.n	8000874 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8000866:	4d2f      	ldr	r5, [pc, #188]	; (8000924 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000868:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 800086a:	4e2b      	ldr	r6, [pc, #172]	; (8000918 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 800086c:	42b2      	cmp	r2, r6
 800086e:	bf08      	it	eq
 8000870:	462b      	moveq	r3, r5
 8000872:	e000      	b.n	8000876 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000876:	680f      	ldr	r7, [r1, #0]
 8000878:	b18f      	cbz	r7, 800089e <HAL_ADCEx_MultiModeConfigChannel+0x86>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800087a:	689d      	ldr	r5, [r3, #8]
 800087c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800087e:	f425 4560 	bic.w	r5, r5, #57344	; 0xe000
 8000882:	ea45 3546 	orr.w	r5, r5, r6, lsl #13
 8000886:	684e      	ldr	r6, [r1, #4]
 8000888:	4335      	orrs	r5, r6
 800088a:	609d      	str	r5, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800088c:	6895      	ldr	r5, [r2, #8]
 800088e:	f005 0503 	and.w	r5, r5, #3
 8000892:	2d01      	cmp	r5, #1
 8000894:	d11c      	bne.n	80008d0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8000896:	6812      	ldr	r2, [r2, #0]
 8000898:	07d5      	lsls	r5, r2, #31
 800089a:	d519      	bpl.n	80008d0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 800089c:	e038      	b.n	8000910 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800089e:	6899      	ldr	r1, [r3, #8]
 80008a0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80008a4:	6099      	str	r1, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80008a6:	6891      	ldr	r1, [r2, #8]
 80008a8:	f001 0103 	and.w	r1, r1, #3
 80008ac:	2901      	cmp	r1, #1
 80008ae:	d121      	bne.n	80008f4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 80008b0:	6812      	ldr	r2, [r2, #0]
 80008b2:	07d1      	lsls	r1, r2, #31
 80008b4:	d42c      	bmi.n	8000910 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80008b6:	e01d      	b.n	80008f4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6443      	str	r3, [r0, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 80008c8:	4618      	mov	r0, r3
 80008ca:	e023      	b.n	8000914 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008cc:	2002      	movs	r0, #2
 80008ce:	e021      	b.n	8000914 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80008d0:	68a5      	ldr	r5, [r4, #8]
 80008d2:	f005 0503 	and.w	r5, r5, #3
 80008d6:	2d01      	cmp	r5, #1
 80008d8:	d102      	bne.n	80008e0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 80008da:	6822      	ldr	r2, [r4, #0]
 80008dc:	07d4      	lsls	r4, r2, #31
 80008de:	d417      	bmi.n	8000910 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80008e0:	688a      	ldr	r2, [r1, #8]
 80008e2:	689c      	ldr	r4, [r3, #8]
 80008e4:	ea47 0102 	orr.w	r1, r7, r2
 80008e8:	f424 6271 	bic.w	r2, r4, #3856	; 0xf10
 80008ec:	f022 020f 	bic.w	r2, r2, #15
 80008f0:	430a      	orrs	r2, r1
 80008f2:	e00c      	b.n	800090e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80008f4:	68a2      	ldr	r2, [r4, #8]
 80008f6:	f002 0203 	and.w	r2, r2, #3
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d102      	bne.n	8000904 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 80008fe:	6822      	ldr	r2, [r4, #0]
 8000900:	07d2      	lsls	r2, r2, #31
 8000902:	d405      	bmi.n	8000910 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800090a:	f022 020f 	bic.w	r2, r2, #15
 800090e:	609a      	str	r2, [r3, #8]
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000910:	2300      	movs	r3, #0
 8000912:	e7d6      	b.n	80008c2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
} 
 8000914:	b017      	add	sp, #92	; 0x5c
 8000916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000918:	50000100 	.word	0x50000100
 800091c:	50000400 	.word	0x50000400
 8000920:	50000500 	.word	0x50000500
 8000924:	50000300 	.word	0x50000300
 8000928:	50000700 	.word	0x50000700

0800092c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800092e:	68d3      	ldr	r3, [r2, #12]
 8000930:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000934:	041b      	lsls	r3, r3, #16
 8000936:	0c1b      	lsrs	r3, r3, #16
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800093c:	0200      	lsls	r0, r0, #8
 800093e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000942:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000946:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000948:	60d3      	str	r3, [r2, #12]
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_NVIC_SetPriority+0x60>)
 8000952:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	2c04      	cmp	r4, #4
 8000962:	bf28      	it	cs
 8000964:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000966:	2d06      	cmp	r5, #6

  return (
 8000968:	f04f 0501 	mov.w	r5, #1
 800096c:	fa05 f404 	lsl.w	r4, r5, r4
 8000970:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000974:	bf8c      	ite	hi
 8000976:	3b03      	subhi	r3, #3
 8000978:	2300      	movls	r3, #0

  return (
 800097a:	400c      	ands	r4, r1
 800097c:	409c      	lsls	r4, r3
 800097e:	fa05 f303 	lsl.w	r3, r5, r3
 8000982:	3b01      	subs	r3, #1
 8000984:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000986:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000988:	ea42 0204 	orr.w	r2, r2, r4
 800098c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	bfaf      	iteee	ge
 8000992:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	f000 000f 	andlt.w	r0, r0, #15
 800099a:	4b06      	ldrlt	r3, [pc, #24]	; (80009b4 <HAL_NVIC_SetPriority+0x64>)
 800099c:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	bfa5      	ittet	ge
 80009a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80009a4:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009ac:	bd30      	pop	{r4, r5, pc}
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00
 80009b4:	e000ed14 	.word	0xe000ed14

080009b8 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009b8:	0942      	lsrs	r2, r0, #5
 80009ba:	2301      	movs	r3, #1
 80009bc:	f000 001f 	and.w	r0, r0, #31
 80009c0:	fa03 f000 	lsl.w	r0, r3, r0
 80009c4:	4b01      	ldr	r3, [pc, #4]	; (80009cc <HAL_NVIC_EnableIRQ+0x14>)
 80009c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80009ca:	4770      	bx	lr
 80009cc:	e000e100 	.word	0xe000e100

080009d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d0:	3801      	subs	r0, #1
 80009d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009d6:	d20a      	bcs.n	80009ee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009dc:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	21f0      	movs	r1, #240	; 0xf0
 80009e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e6:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e010 	.word	0xe000e010
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009fe:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a00:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a02:	bf0c      	ite	eq
 8000a04:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a08:	f022 0204 	bicne.w	r2, r2, #4
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	4770      	bx	lr
 8000a10:	e000e010 	.word	0xe000e010

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a18:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8000bb4 <HAL_GPIO_Init+0x1a0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a1c:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	f8df c198 	ldr.w	ip, [pc, #408]	; 8000bb8 <HAL_GPIO_Init+0x1a4>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a22:	b085      	sub	sp, #20
 8000a24:	4644      	mov	r4, r8
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a26:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8000a28:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a2a:	9a01      	ldr	r2, [sp, #4]
 8000a2c:	40da      	lsrs	r2, r3
 8000a2e:	f000 80bc 	beq.w	8000baa <HAL_GPIO_Init+0x196>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a32:	f04f 0e01 	mov.w	lr, #1

    if(iocurrent)
 8000a36:	9a01      	ldr	r2, [sp, #4]

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a38:	fa0e fe03 	lsl.w	lr, lr, r3

    if(iocurrent)
 8000a3c:	ea12 060e 	ands.w	r6, r2, lr
 8000a40:	f000 80b1 	beq.w	8000ba6 <HAL_GPIO_Init+0x192>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a44:	684a      	ldr	r2, [r1, #4]
 8000a46:	f022 0910 	bic.w	r9, r2, #16
 8000a4a:	f1b9 0f02 	cmp.w	r9, #2
 8000a4e:	d114      	bne.n	8000a7a <HAL_GPIO_Init+0x66>
 8000a50:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a54:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a58:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000a5c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a60:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a64:	250f      	movs	r5, #15
 8000a66:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a6a:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a6e:	690f      	ldr	r7, [r1, #16]
 8000a70:	fa07 f70b 	lsl.w	r7, r7, fp
 8000a74:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8000a76:	f8ca 7020 	str.w	r7, [sl, #32]
 8000a7a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a7e:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a80:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a82:	fa05 f50a 	lsl.w	r5, r5, sl
 8000a86:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a88:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a8c:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a8e:	fa0b fb0a 	lsl.w	fp, fp, sl
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a92:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a96:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a9a:	f1b9 0f01 	cmp.w	r9, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000a9e:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa0:	d811      	bhi.n	8000ac6 <HAL_GPIO_Init+0xb2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aa4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aa8:	68cf      	ldr	r7, [r1, #12]
 8000aaa:	fa07 f70a 	lsl.w	r7, r7, sl
 8000aae:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000ab2:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aba:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000abe:	409f      	lsls	r7, r3
 8000ac0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ac4:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ac6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ac8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aca:	688f      	ldr	r7, [r1, #8]
 8000acc:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ad0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ad2:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad4:	00d5      	lsls	r5, r2, #3
 8000ad6:	d566      	bpl.n	8000ba6 <HAL_GPIO_Init+0x192>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad8:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000adc:	f045 0501 	orr.w	r5, r5, #1
 8000ae0:	f8cc 5018 	str.w	r5, [ip, #24]
 8000ae4:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000ae8:	f023 0e03 	bic.w	lr, r3, #3
 8000aec:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000af0:	f005 0501 	and.w	r5, r5, #1
 8000af4:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000af8:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000afa:	f003 0903 	and.w	r9, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000b00:	f8de 7008 	ldr.w	r7, [lr, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b04:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000b08:	250f      	movs	r5, #15
 8000b0a:	fa05 f509 	lsl.w	r5, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b0e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b12:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b16:	d019      	beq.n	8000b4c <HAL_GPIO_Init+0x138>
 8000b18:	4d25      	ldr	r5, [pc, #148]	; (8000bb0 <HAL_GPIO_Init+0x19c>)
 8000b1a:	42a8      	cmp	r0, r5
 8000b1c:	d018      	beq.n	8000b50 <HAL_GPIO_Init+0x13c>
 8000b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b22:	42a8      	cmp	r0, r5
 8000b24:	d016      	beq.n	8000b54 <HAL_GPIO_Init+0x140>
 8000b26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b2a:	42a8      	cmp	r0, r5
 8000b2c:	d014      	beq.n	8000b58 <HAL_GPIO_Init+0x144>
 8000b2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b32:	42a8      	cmp	r0, r5
 8000b34:	d012      	beq.n	8000b5c <HAL_GPIO_Init+0x148>
 8000b36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b3a:	42a8      	cmp	r0, r5
 8000b3c:	d010      	beq.n	8000b60 <HAL_GPIO_Init+0x14c>
 8000b3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b42:	42a8      	cmp	r0, r5
 8000b44:	bf14      	ite	ne
 8000b46:	2507      	movne	r5, #7
 8000b48:	2506      	moveq	r5, #6
 8000b4a:	e00a      	b.n	8000b62 <HAL_GPIO_Init+0x14e>
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	e008      	b.n	8000b62 <HAL_GPIO_Init+0x14e>
 8000b50:	2501      	movs	r5, #1
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x14e>
 8000b54:	2502      	movs	r5, #2
 8000b56:	e004      	b.n	8000b62 <HAL_GPIO_Init+0x14e>
 8000b58:	2503      	movs	r5, #3
 8000b5a:	e002      	b.n	8000b62 <HAL_GPIO_Init+0x14e>
 8000b5c:	2504      	movs	r5, #4
 8000b5e:	e000      	b.n	8000b62 <HAL_GPIO_Init+0x14e>
 8000b60:	2505      	movs	r5, #5
 8000b62:	fa05 f509 	lsl.w	r5, r5, r9
 8000b66:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b68:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6c:	f8d8 5000 	ldr.w	r5, [r8]
        temp &= ~((uint32_t)iocurrent);
 8000b70:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b72:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000b76:	bf0c      	ite	eq
 8000b78:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000b7a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000b7c:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000b7e:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b80:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000b84:	bf0c      	ite	eq
 8000b86:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000b88:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000b8a:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b8c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b8e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000b92:	bf0c      	ite	eq
 8000b94:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000b96:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000b98:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000b9a:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b9c:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000b9e:	bf54      	ite	pl
 8000ba0:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000ba2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000ba4:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	e73f      	b.n	8000a2a <HAL_GPIO_Init+0x16>
  }
}
 8000baa:	b005      	add	sp, #20
 8000bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	40010400 	.word	0x40010400
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bbc:	b10a      	cbz	r2, 8000bc2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bbe:	6181      	str	r1, [r0, #24]
 8000bc0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bc2:	6281      	str	r1, [r0, #40]	; 0x28
 8000bc4:	4770      	bx	lr
	...

08000bc8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc8:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bca:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bce:	07df      	lsls	r7, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd0:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd2:	d403      	bmi.n	8000bdc <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	079e      	lsls	r6, r3, #30
 8000bd8:	d47b      	bmi.n	8000cd2 <HAL_RCC_OscConfig+0x10a>
 8000bda:	e100      	b.n	8000dde <HAL_RCC_OscConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bdc:	4cb5      	ldr	r4, [pc, #724]	; (8000eb4 <HAL_RCC_OscConfig+0x2ec>)
 8000bde:	6863      	ldr	r3, [r4, #4]
 8000be0:	f003 030c 	and.w	r3, r3, #12
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d00a      	beq.n	8000bfe <HAL_RCC_OscConfig+0x36>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be8:	6863      	ldr	r3, [r4, #4]
 8000bea:	f003 030c 	and.w	r3, r3, #12
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d11a      	bne.n	8000c28 <HAL_RCC_OscConfig+0x60>
 8000bf2:	6863      	ldr	r3, [r4, #4]
 8000bf4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfc:	d114      	bne.n	8000c28 <HAL_RCC_OscConfig+0x60>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c02:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c06:	6821      	ldr	r1, [r4, #0]
 8000c08:	fa93 f3a3 	rbit	r3, r3
 8000c0c:	fab3 f383 	clz	r3, r3
 8000c10:	f003 031f 	and.w	r3, r3, #31
 8000c14:	2201      	movs	r2, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	420b      	tst	r3, r1
 8000c1c:	d0da      	beq.n	8000bd4 <HAL_RCC_OscConfig+0xc>
 8000c1e:	686b      	ldr	r3, [r5, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1d7      	bne.n	8000bd4 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000c24:	2001      	movs	r0, #1
 8000c26:	e254      	b.n	80010d2 <HAL_RCC_OscConfig+0x50a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c28:	686b      	ldr	r3, [r5, #4]
 8000c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2e:	d016      	beq.n	8000c5e <HAL_RCC_OscConfig+0x96>
 8000c30:	b973      	cbnz	r3, 8000c50 <HAL_RCC_OscConfig+0x88>
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c38:	6023      	str	r3, [r4, #0]
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c40:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c42:	f7ff fae7 	bl	8000214 <HAL_GetTick>
 8000c46:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000c4a:	4680      	mov	r8, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4c:	2701      	movs	r7, #1
 8000c4e:	e032      	b.n	8000cb6 <HAL_RCC_OscConfig+0xee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	d106      	bne.n	8000c66 <HAL_RCC_OscConfig+0x9e>
 8000c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c5c:	6023      	str	r3, [r4, #0]
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	e005      	b.n	8000c72 <HAL_RCC_OscConfig+0xaa>
 8000c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c6a:	6023      	str	r3, [r4, #0]
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c72:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c74:	f7ff face 	bl	8000214 <HAL_GetTick>
 8000c78:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000c7c:	4680      	mov	r8, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	2701      	movs	r7, #1
 8000c80:	fa96 f3a6 	rbit	r3, r6
 8000c84:	6822      	ldr	r2, [r4, #0]
 8000c86:	fa96 f3a6 	rbit	r3, r6
 8000c8a:	fab3 f383 	clz	r3, r3
 8000c8e:	f003 031f 	and.w	r3, r3, #31
 8000c92:	fa07 f303 	lsl.w	r3, r7, r3
 8000c96:	4213      	tst	r3, r2
 8000c98:	d19c      	bne.n	8000bd4 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c9a:	f7ff fabb 	bl	8000214 <HAL_GetTick>
 8000c9e:	ebc8 0000 	rsb	r0, r8, r0
 8000ca2:	2864      	cmp	r0, #100	; 0x64
 8000ca4:	d9ec      	bls.n	8000c80 <HAL_RCC_OscConfig+0xb8>
          {
            return HAL_TIMEOUT;
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	e213      	b.n	80010d2 <HAL_RCC_OscConfig+0x50a>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000caa:	f7ff fab3 	bl	8000214 <HAL_GetTick>
 8000cae:	ebc8 0000 	rsb	r0, r8, r0
 8000cb2:	2864      	cmp	r0, #100	; 0x64
 8000cb4:	d8f7      	bhi.n	8000ca6 <HAL_RCC_OscConfig+0xde>
 8000cb6:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cba:	6822      	ldr	r2, [r4, #0]
 8000cbc:	fa96 f3a6 	rbit	r3, r6
 8000cc0:	fab3 f383 	clz	r3, r3
 8000cc4:	f003 031f 	and.w	r3, r3, #31
 8000cc8:	fa07 f303 	lsl.w	r3, r7, r3
 8000ccc:	4213      	tst	r3, r2
 8000cce:	d1ec      	bne.n	8000caa <HAL_RCC_OscConfig+0xe2>
 8000cd0:	e780      	b.n	8000bd4 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000cd2:	4c78      	ldr	r4, [pc, #480]	; (8000eb4 <HAL_RCC_OscConfig+0x2ec>)
 8000cd4:	6863      	ldr	r3, [r4, #4]
 8000cd6:	f013 0f0c 	tst.w	r3, #12
 8000cda:	d00a      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cdc:	6863      	ldr	r3, [r4, #4]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d125      	bne.n	8000d32 <HAL_RCC_OscConfig+0x16a>
 8000ce6:	6863      	ldr	r3, [r4, #4]
 8000ce8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cf0:	d11f      	bne.n	8000d32 <HAL_RCC_OscConfig+0x16a>
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf8:	6821      	ldr	r1, [r4, #0]
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	f003 031f 	and.w	r3, r3, #31
 8000d06:	2201      	movs	r2, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	420b      	tst	r3, r1
 8000d0e:	d002      	beq.n	8000d16 <HAL_RCC_OscConfig+0x14e>
 8000d10:	68eb      	ldr	r3, [r5, #12]
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d186      	bne.n	8000c24 <HAL_RCC_OscConfig+0x5c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	22f8      	movs	r2, #248	; 0xf8
 8000d1a:	fa92 f2a2 	rbit	r2, r2
 8000d1e:	6929      	ldr	r1, [r5, #16]
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	fa01 f202 	lsl.w	r2, r1, r2
 8000d28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d30:	e055      	b.n	8000dde <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d32:	68ea      	ldr	r2, [r5, #12]
 8000d34:	2601      	movs	r6, #1
 8000d36:	b382      	cbz	r2, 8000d9a <HAL_RCC_OscConfig+0x1d2>
 8000d38:	fa96 f3a6 	rbit	r3, r6
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d3c:	fab3 f383 	clz	r3, r3
 8000d40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	2702      	movs	r7, #2
 8000d4c:	601e      	str	r6, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4e:	f7ff fa61 	bl	8000214 <HAL_GetTick>
 8000d52:	4680      	mov	r8, r0
 8000d54:	fa97 f3a7 	rbit	r3, r7
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	4856      	ldr	r0, [pc, #344]	; (8000eb4 <HAL_RCC_OscConfig+0x2ec>)
 8000d5a:	6822      	ldr	r2, [r4, #0]
 8000d5c:	fa97 f3a7 	rbit	r3, r7
 8000d60:	fab3 f383 	clz	r3, r3
 8000d64:	f003 031f 	and.w	r3, r3, #31
 8000d68:	fa06 f303 	lsl.w	r3, r6, r3
 8000d6c:	4213      	tst	r3, r2
 8000d6e:	d106      	bne.n	8000d7e <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d70:	f7ff fa50 	bl	8000214 <HAL_GetTick>
 8000d74:	ebc8 0000 	rsb	r0, r8, r0
 8000d78:	2802      	cmp	r0, #2
 8000d7a:	d9eb      	bls.n	8000d54 <HAL_RCC_OscConfig+0x18c>
 8000d7c:	e793      	b.n	8000ca6 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7e:	6803      	ldr	r3, [r0, #0]
 8000d80:	22f8      	movs	r2, #248	; 0xf8
 8000d82:	fa92 f2a2 	rbit	r2, r2
 8000d86:	6929      	ldr	r1, [r5, #16]
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d94:	4313      	orrs	r3, r2
 8000d96:	6003      	str	r3, [r0, #0]
 8000d98:	e021      	b.n	8000dde <HAL_RCC_OscConfig+0x216>
 8000d9a:	fa96 f3a6 	rbit	r3, r6
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000da6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	2702      	movs	r7, #2
 8000dae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fa30 	bl	8000214 <HAL_GetTick>
 8000db4:	4680      	mov	r8, r0
 8000db6:	fa97 f3a7 	rbit	r3, r7
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dba:	6822      	ldr	r2, [r4, #0]
 8000dbc:	fa97 f3a7 	rbit	r3, r7
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	f003 031f 	and.w	r3, r3, #31
 8000dc8:	fa06 f303 	lsl.w	r3, r6, r3
 8000dcc:	4213      	tst	r3, r2
 8000dce:	d006      	beq.n	8000dde <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fa20 	bl	8000214 <HAL_GetTick>
 8000dd4:	ebc8 0000 	rsb	r0, r8, r0
 8000dd8:	2802      	cmp	r0, #2
 8000dda:	d9ec      	bls.n	8000db6 <HAL_RCC_OscConfig+0x1ee>
 8000ddc:	e763      	b.n	8000ca6 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dde:	682b      	ldr	r3, [r5, #0]
 8000de0:	071c      	lsls	r4, r3, #28
 8000de2:	d403      	bmi.n	8000dec <HAL_RCC_OscConfig+0x224>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	0758      	lsls	r0, r3, #29
 8000de8:	d44c      	bmi.n	8000e84 <HAL_RCC_OscConfig+0x2bc>
 8000dea:	e0e3      	b.n	8000fb4 <HAL_RCC_OscConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dec:	6969      	ldr	r1, [r5, #20]
 8000dee:	4e31      	ldr	r6, [pc, #196]	; (8000eb4 <HAL_RCC_OscConfig+0x2ec>)
 8000df0:	2401      	movs	r4, #1
 8000df2:	b319      	cbz	r1, 8000e3c <HAL_RCC_OscConfig+0x274>
 8000df4:	fa94 f2a4 	rbit	r2, r4
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_RCC_OscConfig+0x2f0>)
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	2702      	movs	r7, #2
 8000e04:	601c      	str	r4, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e06:	f7ff fa05 	bl	8000214 <HAL_GetTick>
 8000e0a:	4680      	mov	r8, r0
 8000e0c:	fa97 f3a7 	rbit	r3, r7
 8000e10:	fa97 f3a7 	rbit	r3, r7
 8000e14:	fa97 f3a7 	rbit	r3, r7
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e18:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000e1a:	fa97 f3a7 	rbit	r3, r7
 8000e1e:	fab3 f383 	clz	r3, r3
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	fa04 f303 	lsl.w	r3, r4, r3
 8000e2a:	4213      	tst	r3, r2
 8000e2c:	d1da      	bne.n	8000de4 <HAL_RCC_OscConfig+0x21c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e2e:	f7ff f9f1 	bl	8000214 <HAL_GetTick>
 8000e32:	ebc8 0000 	rsb	r0, r8, r0
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9e8      	bls.n	8000e0c <HAL_RCC_OscConfig+0x244>
 8000e3a:	e734      	b.n	8000ca6 <HAL_RCC_OscConfig+0xde>
 8000e3c:	fa94 f2a4 	rbit	r2, r4
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_RCC_OscConfig+0x2f0>)
 8000e42:	fab2 f282 	clz	r2, r2
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	2702      	movs	r7, #2
 8000e4c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff f9e1 	bl	8000214 <HAL_GetTick>
 8000e52:	4680      	mov	r8, r0
 8000e54:	fa97 f3a7 	rbit	r3, r7
 8000e58:	fa97 f3a7 	rbit	r3, r7
 8000e5c:	fa97 f3a7 	rbit	r3, r7
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000e62:	fa97 f3a7 	rbit	r3, r7
 8000e66:	fab3 f383 	clz	r3, r3
 8000e6a:	f003 031f 	and.w	r3, r3, #31
 8000e6e:	fa04 f303 	lsl.w	r3, r4, r3
 8000e72:	4213      	tst	r3, r2
 8000e74:	d0b6      	beq.n	8000de4 <HAL_RCC_OscConfig+0x21c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e76:	f7ff f9cd 	bl	8000214 <HAL_GetTick>
 8000e7a:	ebc8 0000 	rsb	r0, r8, r0
 8000e7e:	2802      	cmp	r0, #2
 8000e80:	d9e8      	bls.n	8000e54 <HAL_RCC_OscConfig+0x28c>
 8000e82:	e710      	b.n	8000ca6 <HAL_RCC_OscConfig+0xde>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e84:	4c0b      	ldr	r4, [pc, #44]	; (8000eb4 <HAL_RCC_OscConfig+0x2ec>)
 8000e86:	69e3      	ldr	r3, [r4, #28]
 8000e88:	00d9      	lsls	r1, r3, #3
 8000e8a:	d40a      	bmi.n	8000ea2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8c:	69e3      	ldr	r3, [r4, #28]
 8000e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e92:	61e3      	str	r3, [r4, #28]
 8000e94:	69e3      	ldr	r3, [r4, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e9e:	2601      	movs	r6, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ea2:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	4f05      	ldr	r7, [pc, #20]	; (8000ebc <HAL_RCC_OscConfig+0x2f4>)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	05da      	lsls	r2, r3, #23
 8000eaa:	d509      	bpl.n	8000ec0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eac:	68ab      	ldr	r3, [r5, #8]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d117      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x31a>
 8000eb2:	e02d      	b.n	8000f10 <HAL_RCC_OscConfig+0x348>
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	10908120 	.word	0x10908120
 8000ebc:	40007000 	.word	0x40007000
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec6:	603b      	str	r3, [r7, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ec8:	f7ff f9a4 	bl	8000214 <HAL_GetTick>
 8000ecc:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	d4eb      	bmi.n	8000eac <HAL_RCC_OscConfig+0x2e4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed4:	f7ff f99e 	bl	8000214 <HAL_GetTick>
 8000ed8:	ebc8 0000 	rsb	r0, r8, r0
 8000edc:	2864      	cmp	r0, #100	; 0x64
 8000ede:	d9f6      	bls.n	8000ece <HAL_RCC_OscConfig+0x306>
 8000ee0:	e6e1      	b.n	8000ca6 <HAL_RCC_OscConfig+0xde>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee2:	b97b      	cbnz	r3, 8000f04 <HAL_RCC_OscConfig+0x33c>
 8000ee4:	6a23      	ldr	r3, [r4, #32]
 8000ee6:	f023 0301 	bic.w	r3, r3, #1
 8000eea:	6223      	str	r3, [r4, #32]
 8000eec:	6a23      	ldr	r3, [r4, #32]
 8000eee:	f023 0304 	bic.w	r3, r3, #4
 8000ef2:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef4:	f7ff f98e 	bl	8000214 <HAL_GetTick>
 8000ef8:	2702      	movs	r7, #2
 8000efa:	4682      	mov	sl, r0
 8000efc:	46b9      	mov	r9, r7
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efe:	f04f 0801 	mov.w	r8, #1
 8000f02:	e03d      	b.n	8000f80 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f04:	2b05      	cmp	r3, #5
 8000f06:	6a23      	ldr	r3, [r4, #32]
 8000f08:	d106      	bne.n	8000f18 <HAL_RCC_OscConfig+0x350>
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6223      	str	r3, [r4, #32]
 8000f10:	6a23      	ldr	r3, [r4, #32]
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	e005      	b.n	8000f24 <HAL_RCC_OscConfig+0x35c>
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	6223      	str	r3, [r4, #32]
 8000f1e:	6a23      	ldr	r3, [r4, #32]
 8000f20:	f023 0304 	bic.w	r3, r3, #4
 8000f24:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f26:	f7ff f975 	bl	8000214 <HAL_GetTick>
 8000f2a:	2702      	movs	r7, #2
 8000f2c:	4682      	mov	sl, r0
 8000f2e:	46b9      	mov	r9, r7
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f30:	f04f 0801 	mov.w	r8, #1
 8000f34:	fa97 f3a7 	rbit	r3, r7
 8000f38:	fa97 f3a7 	rbit	r3, r7
 8000f3c:	b10b      	cbz	r3, 8000f42 <HAL_RCC_OscConfig+0x37a>
 8000f3e:	6a22      	ldr	r2, [r4, #32]
 8000f40:	e002      	b.n	8000f48 <HAL_RCC_OscConfig+0x380>
 8000f42:	fa97 f3a7 	rbit	r3, r7
 8000f46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f48:	fa99 f3a9 	rbit	r3, r9
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	fa08 f303 	lsl.w	r3, r8, r3
 8000f58:	4213      	tst	r3, r2
 8000f5a:	d121      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x3d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f5c:	f7ff f95a 	bl	8000214 <HAL_GetTick>
 8000f60:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f64:	ebca 0000 	rsb	r0, sl, r0
 8000f68:	4298      	cmp	r0, r3
 8000f6a:	d9e3      	bls.n	8000f34 <HAL_RCC_OscConfig+0x36c>
 8000f6c:	e69b      	b.n	8000ca6 <HAL_RCC_OscConfig+0xde>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f6e:	f7ff f951 	bl	8000214 <HAL_GetTick>
 8000f72:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f76:	ebca 0000 	rsb	r0, sl, r0
 8000f7a:	4298      	cmp	r0, r3
 8000f7c:	f63f ae93 	bhi.w	8000ca6 <HAL_RCC_OscConfig+0xde>
 8000f80:	fa97 f3a7 	rbit	r3, r7
 8000f84:	fa97 f3a7 	rbit	r3, r7
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f88:	b183      	cbz	r3, 8000fac <HAL_RCC_OscConfig+0x3e4>
 8000f8a:	6a22      	ldr	r2, [r4, #32]
 8000f8c:	fa99 f3a9 	rbit	r3, r9
 8000f90:	fab3 f383 	clz	r3, r3
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	fa08 f303 	lsl.w	r3, r8, r3
 8000f9c:	4213      	tst	r3, r2
 8000f9e:	d1e6      	bne.n	8000f6e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fa0:	b146      	cbz	r6, 8000fb4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fa2:	69e3      	ldr	r3, [r4, #28]
 8000fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61e3      	str	r3, [r4, #28]
 8000faa:	e003      	b.n	8000fb4 <HAL_RCC_OscConfig+0x3ec>
 8000fac:	fa97 f3a7 	rbit	r3, r7
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fb2:	e7eb      	b.n	8000f8c <HAL_RCC_OscConfig+0x3c4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb4:	69aa      	ldr	r2, [r5, #24]
 8000fb6:	b90a      	cbnz	r2, 8000fbc <HAL_RCC_OscConfig+0x3f4>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000fb8:	2000      	movs	r0, #0
 8000fba:	e08a      	b.n	80010d2 <HAL_RCC_OscConfig+0x50a>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fbc:	4c46      	ldr	r4, [pc, #280]	; (80010d8 <HAL_RCC_OscConfig+0x510>)
 8000fbe:	6863      	ldr	r3, [r4, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	f43f ae2d 	beq.w	8000c24 <HAL_RCC_OscConfig+0x5c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fca:	2a02      	cmp	r2, #2
 8000fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd0:	d15a      	bne.n	8001088 <HAL_RCC_OscConfig+0x4c0>
 8000fd2:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	fab3 f383 	clz	r3, r3
 8000fda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff f914 	bl	8000214 <HAL_GetTick>
 8000fec:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000ff0:	4681      	mov	r9, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff2:	f04f 0801 	mov.w	r8, #1
 8000ff6:	fa97 f3a7 	rbit	r3, r7
 8000ffa:	4a37      	ldr	r2, [pc, #220]	; (80010d8 <HAL_RCC_OscConfig+0x510>)
 8000ffc:	6821      	ldr	r1, [r4, #0]
 8000ffe:	fa97 f3a7 	rbit	r3, r7
 8001002:	fab3 f383 	clz	r3, r3
 8001006:	f003 031f 	and.w	r3, r3, #31
 800100a:	fa08 f303 	lsl.w	r3, r8, r3
 800100e:	420b      	tst	r3, r1
 8001010:	f04f 0601 	mov.w	r6, #1
 8001014:	d006      	beq.n	8001024 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff f8fd 	bl	8000214 <HAL_GetTick>
 800101a:	ebc9 0000 	rsb	r0, r9, r0
 800101e:	2802      	cmp	r0, #2
 8001020:	d9e9      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x42e>
 8001022:	e640      	b.n	8000ca6 <HAL_RCC_OscConfig+0xde>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001024:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001026:	f023 010f 	bic.w	r1, r3, #15
 800102a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800102c:	430b      	orrs	r3, r1
 800102e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001030:	6853      	ldr	r3, [r2, #4]
 8001032:	6a28      	ldr	r0, [r5, #32]
 8001034:	69e9      	ldr	r1, [r5, #28]
 8001036:	f423 1376 	bic.w	r3, r3, #4030464	; 0x3d8000
 800103a:	4301      	orrs	r1, r0
 800103c:	430b      	orrs	r3, r1
 800103e:	6053      	str	r3, [r2, #4]
 8001040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001044:	fa93 f3a3 	rbit	r3, r3
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001050:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800105a:	601e      	str	r6, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff f8da 	bl	8000214 <HAL_GetTick>
 8001060:	4607      	mov	r7, r0
 8001062:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001066:	6822      	ldr	r2, [r4, #0]
 8001068:	fa95 f3a5 	rbit	r3, r5
 800106c:	fab3 f383 	clz	r3, r3
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	fa06 f303 	lsl.w	r3, r6, r3
 8001078:	4213      	tst	r3, r2
 800107a:	d19d      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800107c:	f7ff f8ca 	bl	8000214 <HAL_GetTick>
 8001080:	1bc0      	subs	r0, r0, r7
 8001082:	2802      	cmp	r0, #2
 8001084:	d9ed      	bls.n	8001062 <HAL_RCC_OscConfig+0x49a>
 8001086:	e60e      	b.n	8000ca6 <HAL_RCC_OscConfig+0xde>
 8001088:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800108c:	fab3 f383 	clz	r3, r3
 8001090:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001094:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff f8b9 	bl	8000214 <HAL_GetTick>
 80010a2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80010a6:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a8:	2601      	movs	r6, #1
 80010aa:	fa95 f3a5 	rbit	r3, r5
 80010ae:	6822      	ldr	r2, [r4, #0]
 80010b0:	fa95 f3a5 	rbit	r3, r5
 80010b4:	fab3 f383 	clz	r3, r3
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	fa06 f303 	lsl.w	r3, r6, r3
 80010c0:	4213      	tst	r3, r2
 80010c2:	f43f af79 	beq.w	8000fb8 <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c6:	f7ff f8a5 	bl	8000214 <HAL_GetTick>
 80010ca:	1bc0      	subs	r0, r0, r7
 80010cc:	2802      	cmp	r0, #2
 80010ce:	d9ec      	bls.n	80010aa <HAL_RCC_OscConfig+0x4e2>
 80010d0:	e5e9      	b.n	8000ca6 <HAL_RCC_OscConfig+0xde>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80010d2:	b002      	add	sp, #8
 80010d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80010dc:	4911      	ldr	r1, [pc, #68]	; (8001124 <HAL_RCC_GetSysClockFreq+0x48>)
 80010de:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010e0:	f003 020c 	and.w	r2, r3, #12
 80010e4:	2a08      	cmp	r2, #8
 80010e6:	d11a      	bne.n	800111e <HAL_RCC_GetSysClockFreq+0x42>
 80010e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80010ec:	fa92 f2a2 	rbit	r2, r2
 80010f0:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80010f2:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80010f6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80010f8:	fa90 f0a0 	rbit	r0, r0
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80010fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001100:	40d3      	lsrs	r3, r2
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_RCC_GetSysClockFreq+0x4c>)
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001104:	fab0 f080 	clz	r0, r0
 8001108:	f001 010f 	and.w	r1, r1, #15
 800110c:	40c1      	lsrs	r1, r0
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800110e:	5cd3      	ldrb	r3, [r2, r3]
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <HAL_RCC_GetSysClockFreq+0x50>)
 8001112:	5c40      	ldrb	r0, [r0, r1]
 8001114:	4906      	ldr	r1, [pc, #24]	; (8001130 <HAL_RCC_GetSysClockFreq+0x54>)
 8001116:	fbb1 f0f0 	udiv	r0, r1, r0
 800111a:	4358      	muls	r0, r3
 800111c:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800111e:	4804      	ldr	r0, [pc, #16]	; (8001130 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	0800286c 	.word	0x0800286c
 800112c:	0800285c 	.word	0x0800285c
 8001130:	007a1200 	.word	0x007a1200

08001134 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001134:	4a5a      	ldr	r2, [pc, #360]	; (80012a0 <HAL_RCC_ClockConfig+0x16c>)
 8001136:	6813      	ldr	r3, [r2, #0]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800113e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001142:	4606      	mov	r6, r0
 8001144:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001146:	d30a      	bcc.n	800115e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001148:	6831      	ldr	r1, [r6, #0]
 800114a:	0788      	lsls	r0, r1, #30
 800114c:	d514      	bpl.n	8001178 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800114e:	4855      	ldr	r0, [pc, #340]	; (80012a4 <HAL_RCC_ClockConfig+0x170>)
 8001150:	6843      	ldr	r3, [r0, #4]
 8001152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001156:	68b3      	ldr	r3, [r6, #8]
 8001158:	4313      	orrs	r3, r2
 800115a:	6043      	str	r3, [r0, #4]
 800115c:	e00c      	b.n	8001178 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	f023 0307 	bic.w	r3, r3, #7
 8001164:	430b      	orrs	r3, r1
 8001166:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	4299      	cmp	r1, r3
 8001170:	d0ea      	beq.n	8001148 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001172:	2001      	movs	r0, #1
 8001174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001178:	07ca      	lsls	r2, r1, #31
 800117a:	d406      	bmi.n	800118a <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800117c:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <HAL_RCC_ClockConfig+0x16c>)
 800117e:	6813      	ldr	r3, [r2, #0]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	429d      	cmp	r5, r3
 8001186:	d357      	bcc.n	8001238 <HAL_RCC_ClockConfig+0x104>
 8001188:	e060      	b.n	800124c <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118a:	6872      	ldr	r2, [r6, #4]
 800118c:	4c45      	ldr	r4, [pc, #276]	; (80012a4 <HAL_RCC_ClockConfig+0x170>)
 800118e:	2a01      	cmp	r2, #1
 8001190:	d10e      	bne.n	80011b0 <HAL_RCC_ClockConfig+0x7c>
 8001192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001196:	fa93 f1a3 	rbit	r1, r3
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	6821      	ldr	r1, [r4, #0]
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	fab3 f383 	clz	r3, r3
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	420b      	tst	r3, r1
 80011ae:	e011      	b.n	80011d4 <HAL_RCC_ClockConfig+0xa0>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011b0:	2a02      	cmp	r2, #2
 80011b2:	bf0c      	ite	eq
 80011b4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80011b8:	2302      	movne	r3, #2
 80011ba:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011be:	6820      	ldr	r0, [r4, #0]
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	fab3 f383 	clz	r3, r3
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	4203      	tst	r3, r0
 80011d4:	d0cd      	beq.n	8001172 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d6:	6863      	ldr	r3, [r4, #4]
 80011d8:	f023 0303 	bic.w	r3, r3, #3
 80011dc:	431a      	orrs	r2, r3
 80011de:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e0:	f7ff f818 	bl	8000214 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e4:	6873      	ldr	r3, [r6, #4]
 80011e6:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e8:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ea:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ee:	d10c      	bne.n	800120a <HAL_RCC_ClockConfig+0xd6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d0c0      	beq.n	800117c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fa:	f7ff f80b 	bl	8000214 <HAL_GetTick>
 80011fe:	1bc0      	subs	r0, r0, r7
 8001200:	4540      	cmp	r0, r8
 8001202:	d9f5      	bls.n	80011f0 <HAL_RCC_ClockConfig+0xbc>
        {
          return HAL_TIMEOUT;
 8001204:	2003      	movs	r0, #3
 8001206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800120a:	2b02      	cmp	r3, #2
 800120c:	d10f      	bne.n	800122e <HAL_RCC_ClockConfig+0xfa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800120e:	6863      	ldr	r3, [r4, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b08      	cmp	r3, #8
 8001216:	d0b1      	beq.n	800117c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001218:	f7fe fffc 	bl	8000214 <HAL_GetTick>
 800121c:	1bc0      	subs	r0, r0, r7
 800121e:	4540      	cmp	r0, r8
 8001220:	d9f5      	bls.n	800120e <HAL_RCC_ClockConfig+0xda>
 8001222:	e7ef      	b.n	8001204 <HAL_RCC_ClockConfig+0xd0>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001224:	f7fe fff6 	bl	8000214 <HAL_GetTick>
 8001228:	1bc0      	subs	r0, r0, r7
 800122a:	4540      	cmp	r0, r8
 800122c:	d8ea      	bhi.n	8001204 <HAL_RCC_ClockConfig+0xd0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800122e:	6863      	ldr	r3, [r4, #4]
 8001230:	f013 0f0c 	tst.w	r3, #12
 8001234:	d1f6      	bne.n	8001224 <HAL_RCC_ClockConfig+0xf0>
 8001236:	e7a1      	b.n	800117c <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001238:	6813      	ldr	r3, [r2, #0]
 800123a:	f023 0307 	bic.w	r3, r3, #7
 800123e:	432b      	orrs	r3, r5
 8001240:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	429d      	cmp	r5, r3
 800124a:	d192      	bne.n	8001172 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	6831      	ldr	r1, [r6, #0]
 800124e:	4c15      	ldr	r4, [pc, #84]	; (80012a4 <HAL_RCC_ClockConfig+0x170>)
 8001250:	f011 0f04 	tst.w	r1, #4
 8001254:	d005      	beq.n	8001262 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001256:	6863      	ldr	r3, [r4, #4]
 8001258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800125c:	68f3      	ldr	r3, [r6, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001262:	070b      	lsls	r3, r1, #28
 8001264:	d506      	bpl.n	8001274 <HAL_RCC_ClockConfig+0x140>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001266:	6863      	ldr	r3, [r4, #4]
 8001268:	6932      	ldr	r2, [r6, #16]
 800126a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800126e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001272:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001274:	f7ff ff32 	bl	80010dc <HAL_RCC_GetSysClockFreq>
 8001278:	6863      	ldr	r3, [r4, #4]
 800127a:	22f0      	movs	r2, #240	; 0xf0
 800127c:	fa92 f2a2 	rbit	r2, r2
 8001280:	fab2 f282 	clz	r2, r2
 8001284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001288:	40d3      	lsrs	r3, r2
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_RCC_ClockConfig+0x174>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	40d8      	lsrs	r0, r3
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_RCC_ClockConfig+0x178>)
 8001292:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001294:	2000      	movs	r0, #0
 8001296:	f001 fa03 	bl	80026a0 <HAL_InitTick>
  
  return HAL_OK;
 800129a:	2000      	movs	r0, #0
}
 800129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a0:	40022000 	.word	0x40022000
 80012a4:	40021000 	.word	0x40021000
 80012a8:	0800288d 	.word	0x0800288d
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80012b0:	4b01      	ldr	r3, [pc, #4]	; (80012b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	fa92 f2a2 	rbit	r2, r2
 80012c8:	fab2 f282 	clz	r2, r2
 80012cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80012d0:	40d3      	lsrs	r3, r2
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80012d8:	6810      	ldr	r0, [r2, #0]
} 
 80012da:	40d8      	lsrs	r0, r3
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	0800289d 	.word	0x0800289d
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012ec:	230f      	movs	r3, #15
 80012ee:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_RCC_GetClockConfig+0x34>)
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	f002 0203 	and.w	r2, r2, #3
 80012f8:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001300:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001308:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001312:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_RCC_GetClockConfig+0x38>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	600b      	str	r3, [r1, #0]
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000
 8001324:	40022000 	.word	0x40022000

08001328 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001328:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800132a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800132e:	03df      	lsls	r7, r3, #15
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001330:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001332:	d57c      	bpl.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001334:	4d9b      	ldr	r5, [pc, #620]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001336:	69eb      	ldr	r3, [r5, #28]
 8001338:	00de      	lsls	r6, r3, #3
 800133a:	d40a      	bmi.n	8001352 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	69eb      	ldr	r3, [r5, #28]
 800133e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001342:	61eb      	str	r3, [r5, #28]
 8001344:	69eb      	ldr	r3, [r5, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800134e:	2601      	movs	r6, #1
 8001350:	e000      	b.n	8001354 <HAL_RCCEx_PeriphCLKConfig+0x2c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001352:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	4f94      	ldr	r7, [pc, #592]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	05d8      	lsls	r0, r3, #23
 800135a:	d505      	bpl.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x40>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800135c:	6a2b      	ldr	r3, [r5, #32]
 800135e:	4991      	ldr	r1, [pc, #580]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001360:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001364:	d112      	bne.n	800138c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001366:	e016      	b.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	603b      	str	r3, [r7, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001370:	f7fe ff50 	bl	8000214 <HAL_GetTick>
 8001374:	4680      	mov	r8, r0
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	05d9      	lsls	r1, r3, #23
 800137a:	d4ef      	bmi.n	800135c <HAL_RCCEx_PeriphCLKConfig+0x34>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137c:	f7fe ff4a 	bl	8000214 <HAL_GetTick>
 8001380:	ebc8 0000 	rsb	r0, r8, r0
 8001384:	2864      	cmp	r0, #100	; 0x64
 8001386:	d9f6      	bls.n	8001376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8001388:	2003      	movs	r0, #3
 800138a:	e107      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800138c:	6862      	ldr	r2, [r4, #4]
 800138e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001392:	4293      	cmp	r3, r2
 8001394:	d10d      	bne.n	80013b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001396:	6a2b      	ldr	r3, [r5, #32]
 8001398:	4982      	ldr	r1, [pc, #520]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800139a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800139e:	6863      	ldr	r3, [r4, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013a4:	2e00      	cmp	r6, #0
 80013a6:	d042      	beq.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a8:	69cb      	ldr	r3, [r1, #28]
 80013aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ae:	61cb      	str	r3, [r1, #28]
 80013b0:	e03d      	b.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013b2:	6a08      	ldr	r0, [r1, #32]
 80013b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b8:	f420 7e40 	bic.w	lr, r0, #768	; 0x300
 80013bc:	fa93 f7a3 	rbit	r7, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80013c0:	4a7a      	ldr	r2, [pc, #488]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80013c2:	fab7 f787 	clz	r7, r7
 80013c6:	443a      	add	r2, r7
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	2701      	movs	r7, #1
 80013cc:	6017      	str	r7, [r2, #0]
 80013ce:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80013d2:	4a76      	ldr	r2, [pc, #472]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80013d4:	fab3 f383 	clz	r3, r3
 80013d8:	441a      	add	r2, r3
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	2300      	movs	r3, #0
 80013de:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80013e0:	07c2      	lsls	r2, r0, #31
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80013e2:	f8c1 e020 	str.w	lr, [r1, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80013e6:	d5d6      	bpl.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7fe ff14 	bl	8000214 <HAL_GetTick>
 80013ec:	f04f 0802 	mov.w	r8, #2
 80013f0:	4682      	mov	sl, r0
 80013f2:	46c1      	mov	r9, r8
 80013f4:	fa98 f3a8 	rbit	r3, r8
 80013f8:	fa98 f3a8 	rbit	r3, r8
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fc:	b10b      	cbz	r3, 8001402 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80013fe:	6a2a      	ldr	r2, [r5, #32]
 8001400:	e002      	b.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8001402:	fa98 f3a8 	rbit	r3, r8
 8001406:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001408:	fa99 f3a9 	rbit	r3, r9
 800140c:	fab3 f383 	clz	r3, r3
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	fa07 f303 	lsl.w	r3, r7, r3
 8001418:	4213      	tst	r3, r2
 800141a:	d1bc      	bne.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7fe fefa 	bl	8000214 <HAL_GetTick>
 8001420:	f241 3388 	movw	r3, #5000	; 0x1388
 8001424:	ebca 0000 	rsb	r0, sl, r0
 8001428:	4298      	cmp	r0, r3
 800142a:	d9e3      	bls.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800142c:	e7ac      	b.n	8001388 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800142e:	6820      	ldr	r0, [r4, #0]
 8001430:	07c3      	lsls	r3, r0, #31
 8001432:	d506      	bpl.n	8001442 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001434:	495b      	ldr	r1, [pc, #364]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001436:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001438:	f023 0203 	bic.w	r2, r3, #3
 800143c:	68a3      	ldr	r3, [r4, #8]
 800143e:	4313      	orrs	r3, r2
 8001440:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001442:	0787      	lsls	r7, r0, #30
 8001444:	d506      	bpl.n	8001454 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001446:	4957      	ldr	r1, [pc, #348]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001448:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800144a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800144e:	68e3      	ldr	r3, [r4, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001454:	0746      	lsls	r6, r0, #29
 8001456:	d506      	bpl.n	8001466 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001458:	4952      	ldr	r1, [pc, #328]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800145a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800145c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001460:	6923      	ldr	r3, [r4, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001466:	0685      	lsls	r5, r0, #26
 8001468:	d506      	bpl.n	8001478 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800146a:	494e      	ldr	r1, [pc, #312]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800146c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800146e:	f023 0210 	bic.w	r2, r3, #16
 8001472:	69e3      	ldr	r3, [r4, #28]
 8001474:	4313      	orrs	r3, r2
 8001476:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001478:	0381      	lsls	r1, r0, #14
 800147a:	d506      	bpl.n	800148a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800147c:	4949      	ldr	r1, [pc, #292]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800147e:	684b      	ldr	r3, [r1, #4]
 8001480:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001484:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800148a:	0642      	lsls	r2, r0, #25
 800148c:	d506      	bpl.n	800149c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800148e:	4945      	ldr	r1, [pc, #276]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001490:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001492:	f023 0220 	bic.w	r2, r3, #32
 8001496:	6a23      	ldr	r3, [r4, #32]
 8001498:	4313      	orrs	r3, r2
 800149a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800149c:	0343      	lsls	r3, r0, #13
 800149e:	d506      	bpl.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80014a0:	4940      	ldr	r1, [pc, #256]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014a2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80014a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80014a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014aa:	4313      	orrs	r3, r2
 80014ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80014ae:	0707      	lsls	r7, r0, #28
 80014b0:	d506      	bpl.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80014b2:	493c      	ldr	r1, [pc, #240]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014b4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80014b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80014ba:	6963      	ldr	r3, [r4, #20]
 80014bc:	4313      	orrs	r3, r2
 80014be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80014c0:	06c6      	lsls	r6, r0, #27
 80014c2:	d506      	bpl.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80014c4:	4937      	ldr	r1, [pc, #220]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014c6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80014c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80014cc:	69a3      	ldr	r3, [r4, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80014d2:	0585      	lsls	r5, r0, #22
 80014d4:	d506      	bpl.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80014d6:	4933      	ldr	r1, [pc, #204]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014d8:	684b      	ldr	r3, [r1, #4]
 80014da:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80014e4:	0601      	lsls	r1, r0, #24
 80014e6:	d506      	bpl.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80014e8:	492e      	ldr	r1, [pc, #184]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014ea:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80014ec:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80014f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014f2:	4313      	orrs	r3, r2
 80014f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80014f6:	05c2      	lsls	r2, r0, #23
 80014f8:	d506      	bpl.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80014fa:	492a      	ldr	r1, [pc, #168]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014fc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80014fe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001502:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001504:	4313      	orrs	r3, r2
 8001506:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001508:	04c3      	lsls	r3, r0, #19
 800150a:	d506      	bpl.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800150c:	4925      	ldr	r1, [pc, #148]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800150e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001516:	4313      	orrs	r3, r2
 8001518:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800151a:	0487      	lsls	r7, r0, #18
 800151c:	d506      	bpl.n	800152c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800151e:	4921      	ldr	r1, [pc, #132]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001520:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001522:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001528:	4313      	orrs	r3, r2
 800152a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800152c:	02c6      	lsls	r6, r0, #11
 800152e:	d506      	bpl.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001530:	491c      	ldr	r1, [pc, #112]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001532:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001534:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800153a:	4313      	orrs	r3, r2
 800153c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800153e:	0285      	lsls	r5, r0, #10
 8001540:	d506      	bpl.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001542:	4918      	ldr	r1, [pc, #96]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001544:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001546:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800154a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800154c:	4313      	orrs	r3, r2
 800154e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001550:	0241      	lsls	r1, r0, #9
 8001552:	d506      	bpl.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001554:	4913      	ldr	r1, [pc, #76]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001556:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001558:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800155c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800155e:	4313      	orrs	r3, r2
 8001560:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001562:	0202      	lsls	r2, r0, #8
 8001564:	d506      	bpl.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001566:	490f      	ldr	r1, [pc, #60]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001568:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800156a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800156e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001570:	4313      	orrs	r3, r2
 8001572:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001574:	01c3      	lsls	r3, r0, #7
 8001576:	d506      	bpl.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001578:	490a      	ldr	r1, [pc, #40]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800157a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800157c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001580:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001582:	4313      	orrs	r3, r2
 8001584:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001586:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800158a:	d007      	beq.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800158c:	4905      	ldr	r1, [pc, #20]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800158e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001590:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001594:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001596:	4313      	orrs	r3, r2
 8001598:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800159a:	2000      	movs	r0, #0
}
 800159c:	b002      	add	sp, #8
 800159e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40007000 	.word	0x40007000
 80015ac:	10908100 	.word	0x10908100

080015b0 <HAL_TIM_Base_MspInit>:
 80015b0:	4770      	bx	lr

080015b2 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015b2:	6803      	ldr	r3, [r0, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80015c4:	2000      	movs	r0, #0
 80015c6:	4770      	bx	lr

080015c8 <HAL_TIM_OC_DelayElapsedCallback>:
 80015c8:	4770      	bx	lr

080015ca <HAL_TIM_IC_CaptureCallback>:
 80015ca:	4770      	bx	lr

080015cc <HAL_TIM_PWM_PulseFinishedCallback>:
 80015cc:	4770      	bx	lr

080015ce <HAL_TIM_TriggerCallback>:
 80015ce:	4770      	bx	lr

080015d0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015d0:	6803      	ldr	r3, [r0, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015d6:	b510      	push	{r4, lr}
 80015d8:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015da:	d514      	bpl.n	8001606 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	0792      	lsls	r2, r2, #30
 80015e0:	d511      	bpl.n	8001606 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015e2:	f06f 0202 	mvn.w	r2, #2
 80015e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015e8:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ea:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015ec:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ee:	7702      	strb	r2, [r0, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015f0:	d002      	beq.n	80015f8 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80015f2:	f7ff ffea 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 80015f6:	e004      	b.n	8001602 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f8:	f7ff ffe6 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015fc:	4620      	mov	r0, r4
 80015fe:	f7ff ffe5 	bl	80015cc <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001602:	2300      	movs	r3, #0
 8001604:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	0750      	lsls	r0, r2, #29
 800160c:	d516      	bpl.n	800163c <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	0751      	lsls	r1, r2, #29
 8001612:	d513      	bpl.n	800163c <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001614:	f06f 0204 	mvn.w	r2, #4
 8001618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800161a:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800161c:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800161e:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001622:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001624:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001626:	d002      	beq.n	800162e <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001628:	f7ff ffcf 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 800162c:	e004      	b.n	8001638 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800162e:	f7ff ffcb 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff ffca 	bl	80015cc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001638:	2300      	movs	r3, #0
 800163a:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	0712      	lsls	r2, r2, #28
 8001642:	d515      	bpl.n	8001670 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	0710      	lsls	r0, r2, #28
 8001648:	d512      	bpl.n	8001670 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800164a:	f06f 0208 	mvn.w	r2, #8
 800164e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001650:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001652:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001654:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001656:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001658:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800165a:	d002      	beq.n	8001662 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800165c:	f7ff ffb5 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 8001660:	e004      	b.n	800166c <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001662:	f7ff ffb1 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff ffb0 	bl	80015cc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166c:	2300      	movs	r3, #0
 800166e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	06d2      	lsls	r2, r2, #27
 8001676:	d516      	bpl.n	80016a6 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	06d0      	lsls	r0, r2, #27
 800167c:	d513      	bpl.n	80016a6 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800167e:	f06f 0210 	mvn.w	r2, #16
 8001682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001684:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001686:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001688:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800168c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800168e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001690:	d002      	beq.n	8001698 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001692:	f7ff ff9a 	bl	80015ca <HAL_TIM_IC_CaptureCallback>
 8001696:	e004      	b.n	80016a2 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001698:	f7ff ff96 	bl	80015c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff ff95 	bl	80015cc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a2:	2300      	movs	r3, #0
 80016a4:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	07d1      	lsls	r1, r2, #31
 80016ac:	d508      	bpl.n	80016c0 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	07d2      	lsls	r2, r2, #31
 80016b2:	d505      	bpl.n	80016c0 <HAL_TIM_IRQHandler+0xf0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016b4:	f06f 0201 	mvn.w	r2, #1
 80016b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ba:	4620      	mov	r0, r4
 80016bc:	f000 ff84 	bl	80025c8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	0610      	lsls	r0, r2, #24
 80016c6:	d508      	bpl.n	80016da <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	0611      	lsls	r1, r2, #24
 80016cc:	d505      	bpl.n	80016da <HAL_TIM_IRQHandler+0x10a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80016d4:	4620      	mov	r0, r4
 80016d6:	f000 f8a2 	bl	800181e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	0652      	lsls	r2, r2, #25
 80016e0:	d508      	bpl.n	80016f4 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	0650      	lsls	r0, r2, #25
 80016e6:	d505      	bpl.n	80016f4 <HAL_TIM_IRQHandler+0x124>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff ff6d 	bl	80015ce <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	0691      	lsls	r1, r2, #26
 80016fa:	d50a      	bpl.n	8001712 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	0692      	lsls	r2, r2, #26
 8001700:	d507      	bpl.n	8001712 <HAL_TIM_IRQHandler+0x142>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001702:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001706:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001708:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 800170a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 800170e:	f000 b885 	b.w	800181c <HAL_TIMEx_CommutationCallback>
 8001712:	bd10      	pop	{r4, pc}

08001714 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001714:	4a32      	ldr	r2, [pc, #200]	; (80017e0 <TIM_Base_SetConfig+0xcc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001716:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001718:	4290      	cmp	r0, r2
 800171a:	d012      	beq.n	8001742 <TIM_Base_SetConfig+0x2e>
 800171c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001720:	d00f      	beq.n	8001742 <TIM_Base_SetConfig+0x2e>
 8001722:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001726:	4290      	cmp	r0, r2
 8001728:	d00b      	beq.n	8001742 <TIM_Base_SetConfig+0x2e>
 800172a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800172e:	4290      	cmp	r0, r2
 8001730:	d007      	beq.n	8001742 <TIM_Base_SetConfig+0x2e>
 8001732:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001736:	4290      	cmp	r0, r2
 8001738:	d003      	beq.n	8001742 <TIM_Base_SetConfig+0x2e>
 800173a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800173e:	4290      	cmp	r0, r2
 8001740:	d115      	bne.n	800176e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001742:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001748:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800174a:	4a25      	ldr	r2, [pc, #148]	; (80017e0 <TIM_Base_SetConfig+0xcc>)
 800174c:	4290      	cmp	r0, r2
 800174e:	d01d      	beq.n	800178c <TIM_Base_SetConfig+0x78>
 8001750:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001754:	d01a      	beq.n	800178c <TIM_Base_SetConfig+0x78>
 8001756:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800175a:	4290      	cmp	r0, r2
 800175c:	d016      	beq.n	800178c <TIM_Base_SetConfig+0x78>
 800175e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001762:	4290      	cmp	r0, r2
 8001764:	d012      	beq.n	800178c <TIM_Base_SetConfig+0x78>
 8001766:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800176a:	4290      	cmp	r0, r2
 800176c:	d00e      	beq.n	800178c <TIM_Base_SetConfig+0x78>
 800176e:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <TIM_Base_SetConfig+0xd0>)
 8001770:	4290      	cmp	r0, r2
 8001772:	d00b      	beq.n	800178c <TIM_Base_SetConfig+0x78>
 8001774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001778:	4290      	cmp	r0, r2
 800177a:	d007      	beq.n	800178c <TIM_Base_SetConfig+0x78>
 800177c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001780:	4290      	cmp	r0, r2
 8001782:	d003      	beq.n	800178c <TIM_Base_SetConfig+0x78>
 8001784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001788:	4290      	cmp	r0, r2
 800178a:	d103      	bne.n	8001794 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800178c:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800178e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001792:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001794:	694a      	ldr	r2, [r1, #20]
 8001796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800179a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800179c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800179e:	688b      	ldr	r3, [r1, #8]
 80017a0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017a2:	680b      	ldr	r3, [r1, #0]
 80017a4:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <TIM_Base_SetConfig+0xcc>)
 80017a8:	4298      	cmp	r0, r3
 80017aa:	d013      	beq.n	80017d4 <TIM_Base_SetConfig+0xc0>
 80017ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b0:	4298      	cmp	r0, r3
 80017b2:	d00f      	beq.n	80017d4 <TIM_Base_SetConfig+0xc0>
 80017b4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80017b8:	4298      	cmp	r0, r3
 80017ba:	d00b      	beq.n	80017d4 <TIM_Base_SetConfig+0xc0>
 80017bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017c0:	4298      	cmp	r0, r3
 80017c2:	d007      	beq.n	80017d4 <TIM_Base_SetConfig+0xc0>
 80017c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017c8:	4298      	cmp	r0, r3
 80017ca:	d003      	beq.n	80017d4 <TIM_Base_SetConfig+0xc0>
 80017cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d0:	4298      	cmp	r0, r3
 80017d2:	d101      	bne.n	80017d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017d4:	690b      	ldr	r3, [r1, #16]
 80017d6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80017d8:	2301      	movs	r3, #1
 80017da:	6143      	str	r3, [r0, #20]
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40012c00 	.word	0x40012c00
 80017e4:	40014000 	.word	0x40014000

080017e8 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80017e8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80017ea:	4604      	mov	r4, r0
 80017ec:	b1a0      	cbz	r0, 8001818 <HAL_TIM_Base_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80017ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017f6:	b91b      	cbnz	r3, 8001800 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017fc:	f7ff fed8 	bl	80015b0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001800:	2302      	movs	r3, #2
 8001802:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001806:	6820      	ldr	r0, [r4, #0]
 8001808:	1d21      	adds	r1, r4, #4
 800180a:	f7ff ff83 	bl	8001714 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800180e:	2301      	movs	r3, #1
 8001810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  return HAL_OK;
 8001814:	2000      	movs	r0, #0
 8001816:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800181a:	bd10      	pop	{r4, pc}

0800181c <HAL_TIMEx_CommutationCallback>:
 800181c:	4770      	bx	lr

0800181e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800181e:	4770      	bx	lr

08001820 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001820:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001822:	f000 fbed 	bl	8002000 <vTaskStartScheduler>
  
  return osOK;
}
 8001826:	2000      	movs	r0, #0
 8001828:	bd08      	pop	{r3, pc}

0800182a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800182a:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800182c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001830:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001832:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001834:	e890 0022 	ldmia.w	r0, {r1, r5}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001838:	b085      	sub	sp, #20
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800183a:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800183c:	bf14      	ite	ne
 800183e:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001840:	2400      	moveq	r4, #0

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001842:	a803      	add	r0, sp, #12
 8001844:	9001      	str	r0, [sp, #4]
 8001846:	9400      	str	r4, [sp, #0]
 8001848:	4628      	mov	r0, r5
 800184a:	f000 fb0b 	bl	8001e64 <xTaskCreate>
 800184e:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001850:	bf0c      	ite	eq
 8001852:	9803      	ldreq	r0, [sp, #12]
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8001854:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
}
 8001856:	b005      	add	sp, #20
 8001858:	bd30      	pop	{r4, r5, pc}

0800185a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800185a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800185c:	2800      	cmp	r0, #0
 800185e:	bf08      	it	eq
 8001860:	2001      	moveq	r0, #1
 8001862:	f000 fd21 	bl	80022a8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001866:	2000      	movs	r0, #0
 8001868:	bd08      	pop	{r3, pc}

0800186a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800186a:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800186c:	f000 fdb6 	bl	80023dc <xTaskGetSchedulerState>
 8001870:	2801      	cmp	r0, #1
 8001872:	d003      	beq.n	800187c <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001878:	f000 b90c 	b.w	8001a94 <xPortSysTickHandler>
 800187c:	bd08      	pop	{r3, pc}

0800187e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800187e:	f100 0308 	add.w	r3, r0, #8
 8001882:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001884:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001888:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800188c:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800188e:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001890:	6003      	str	r3, [r0, #0]
 8001892:	4770      	bx	lr

08001894 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001894:	2300      	movs	r3, #0
 8001896:	6103      	str	r3, [r0, #16]
 8001898:	4770      	bx	lr

0800189a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800189a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800189c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018a6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80018a8:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018aa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80018ac:	3301      	adds	r3, #1
 80018ae:	6003      	str	r3, [r0, #0]
 80018b0:	4770      	bx	lr

080018b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018b2:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80018b4:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018b6:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80018b8:	d101      	bne.n	80018be <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80018ba:	6903      	ldr	r3, [r0, #16]
 80018bc:	e007      	b.n	80018ce <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018be:	f100 0308 	add.w	r3, r0, #8
 80018c2:	685c      	ldr	r4, [r3, #4]
 80018c4:	6825      	ldr	r5, [r4, #0]
 80018c6:	42aa      	cmp	r2, r5
 80018c8:	d301      	bcc.n	80018ce <vListInsert+0x1c>
 80018ca:	4623      	mov	r3, r4
 80018cc:	e7f9      	b.n	80018c2 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80018d2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80018d4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80018d6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80018d8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018da:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80018dc:	3301      	adds	r3, #1
 80018de:	6003      	str	r3, [r0, #0]
 80018e0:	bd30      	pop	{r4, r5, pc}

080018e2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018e2:	6841      	ldr	r1, [r0, #4]
 80018e4:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80018e6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018e8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018ea:	6882      	ldr	r2, [r0, #8]
 80018ec:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018f2:	bf08      	it	eq
 80018f4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80018f6:	2200      	movs	r2, #0
 80018f8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	3801      	subs	r0, #1
 80018fe:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001900:	4770      	bx	lr
	...

08001904 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <prvTaskExitError+0x2c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	d008      	beq.n	800191e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800190c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001910:	f383 8811 	msr	BASEPRI, r3
 8001914:	f3bf 8f6f 	isb	sy
 8001918:	f3bf 8f4f 	dsb	sy
 800191c:	e7fe      	b.n	800191c <prvTaskExitError+0x18>
 800191e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001922:	f383 8811 	msr	BASEPRI, r3
 8001926:	f3bf 8f6f 	isb	sy
 800192a:	f3bf 8f4f 	dsb	sy
 800192e:	e7fe      	b.n	800192e <prvTaskExitError+0x2a>
 8001930:	20000000 	.word	0x20000000

08001934 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001934:	4806      	ldr	r0, [pc, #24]	; (8001950 <prvPortStartFirstTask+0x1c>)
 8001936:	6800      	ldr	r0, [r0, #0]
 8001938:	6800      	ldr	r0, [r0, #0]
 800193a:	f380 8808 	msr	MSP, r0
 800193e:	b662      	cpsie	i
 8001940:	b661      	cpsie	f
 8001942:	f3bf 8f4f 	dsb	sy
 8001946:	f3bf 8f6f 	isb	sy
 800194a:	df00      	svc	0
 800194c:	bf00      	nop
 800194e:	0000      	.short	0x0000
 8001950:	e000ed08 	.word	0xe000ed08

08001954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001964 <vPortEnableVFP+0x10>
 8001958:	6801      	ldr	r1, [r0, #0]
 800195a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800195e:	6001      	str	r1, [r0, #0]
 8001960:	4770      	bx	lr
 8001962:	0000      	.short	0x0000
 8001964:	e000ed88 	.word	0xe000ed88

08001968 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800196c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <pxPortInitialiseStack+0x28>)
 8001972:	f840 3c0c 	str.w	r3, [r0, #-12]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001976:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800197a:	f06f 0302 	mvn.w	r3, #2
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800197e:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001982:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001986:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 800198a:	3844      	subs	r0, #68	; 0x44
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	08001905 	.word	0x08001905
	...

080019a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <pxCurrentTCBConst2>)
 80019a2:	6819      	ldr	r1, [r3, #0]
 80019a4:	6808      	ldr	r0, [r1, #0]
 80019a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019aa:	f380 8809 	msr	PSP, r0
 80019ae:	f3bf 8f6f 	isb	sy
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f380 8811 	msr	BASEPRI, r0
 80019ba:	4770      	bx	lr
 80019bc:	f3af 8000 	nop.w

080019c0 <pxCurrentTCBConst2>:
 80019c0:	20000d10 	.word	0x20000d10

080019c4 <vPortEnterCritical>:
 80019c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c8:	f383 8811 	msr	BASEPRI, r3
 80019cc:	f3bf 8f6f 	isb	sy
 80019d0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <vPortEnterCritical+0x3c>)
 80019d6:	6813      	ldr	r3, [r2, #0]
 80019d8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80019da:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80019dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80019de:	d10d      	bne.n	80019fc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <vPortEnterCritical+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80019e8:	d008      	beq.n	80019fc <vPortEnterCritical+0x38>
 80019ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ee:	f383 8811 	msr	BASEPRI, r3
 80019f2:	f3bf 8f6f 	isb	sy
 80019f6:	f3bf 8f4f 	dsb	sy
 80019fa:	e7fe      	b.n	80019fa <vPortEnterCritical+0x36>
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000000 	.word	0x20000000
 8001a04:	e000ed04 	.word	0xe000ed04

08001a08 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001a08:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <vPortExitCritical+0x24>)
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	b943      	cbnz	r3, 8001a20 <vPortExitCritical+0x18>
 8001a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a12:	f383 8811 	msr	BASEPRI, r3
 8001a16:	f3bf 8f6f 	isb	sy
 8001a1a:	f3bf 8f4f 	dsb	sy
 8001a1e:	e7fe      	b.n	8001a1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001a20:	3b01      	subs	r3, #1
 8001a22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001a24:	b90b      	cbnz	r3, 8001a2a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a26:	f383 8811 	msr	BASEPRI, r3
 8001a2a:	4770      	bx	lr
 8001a2c:	20000000 	.word	0x20000000

08001a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001a30:	f3ef 8009 	mrs	r0, PSP
 8001a34:	f3bf 8f6f 	isb	sy
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <pxCurrentTCBConst>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	f01e 0f10 	tst.w	lr, #16
 8001a40:	bf08      	it	eq
 8001a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a4a:	6010      	str	r0, [r2, #0]
 8001a4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a54:	f380 8811 	msr	BASEPRI, r0
 8001a58:	f3bf 8f4f 	dsb	sy
 8001a5c:	f3bf 8f6f 	isb	sy
 8001a60:	f000 fc82 	bl	8002368 <vTaskSwitchContext>
 8001a64:	f04f 0000 	mov.w	r0, #0
 8001a68:	f380 8811 	msr	BASEPRI, r0
 8001a6c:	bc08      	pop	{r3}
 8001a6e:	6819      	ldr	r1, [r3, #0]
 8001a70:	6808      	ldr	r0, [r1, #0]
 8001a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a76:	f01e 0f10 	tst.w	lr, #16
 8001a7a:	bf08      	it	eq
 8001a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a80:	f380 8809 	msr	PSP, r0
 8001a84:	f3bf 8f6f 	isb	sy
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	f3af 8000 	nop.w

08001a90 <pxCurrentTCBConst>:
 8001a90:	20000d10 	.word	0x20000d10

08001a94 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001a94:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9a:	f383 8811 	msr	BASEPRI, r3
 8001a9e:	f3bf 8f6f 	isb	sy
 8001aa2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001aa6:	f000 faef 	bl	8002088 <xTaskIncrementTick>
 8001aaa:	b118      	cbz	r0, 8001ab4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <xPortSysTickHandler+0x28>)
 8001aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ab2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f383 8811 	msr	BASEPRI, r3
 8001aba:	bd08      	pop	{r3, pc}
 8001abc:	e000ed04 	.word	0xe000ed04

08001ac0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <vPortSetupTimerInterrupt+0x1c>)
 8001ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <vPortSetupTimerInterrupt+0x20>)
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <vPortSetupTimerInterrupt+0x24>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	e000e014 	.word	0xe000e014
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <xPortStartScheduler+0xc8>)
 8001aea:	4a32      	ldr	r2, [pc, #200]	; (8001bb4 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001aec:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	4291      	cmp	r1, r2
 8001af2:	d108      	bne.n	8001b06 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	e7fe      	b.n	8001b04 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <xPortStartScheduler+0xd0>)
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d108      	bne.n	8001b20 <xPortStartScheduler+0x38>
 8001b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b12:	f383 8811 	msr	BASEPRI, r3
 8001b16:	f3bf 8f6f 	isb	sy
 8001b1a:	f3bf 8f4f 	dsb	sy
 8001b1e:	e7fe      	b.n	8001b1e <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <xPortStartScheduler+0xd4>)
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001b28:	22ff      	movs	r2, #255	; 0xff
 8001b2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001b2c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001b2e:	4a24      	ldr	r2, [pc, #144]	; (8001bc0 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001b36:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b3e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <xPortStartScheduler+0xdc>)
 8001b42:	2207      	movs	r2, #7
 8001b44:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b46:	2100      	movs	r1, #0
 8001b48:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001b4c:	0600      	lsls	r0, r0, #24
 8001b4e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001b52:	d508      	bpl.n	8001b66 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001b54:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001b58:	0052      	lsls	r2, r2, #1
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	f88d 2003 	strb.w	r2, [sp, #3]
 8001b60:	2101      	movs	r1, #1
 8001b62:	4622      	mov	r2, r4
 8001b64:	e7f0      	b.n	8001b48 <xPortStartScheduler+0x60>
 8001b66:	b101      	cbz	r1, 8001b6a <xPortStartScheduler+0x82>
 8001b68:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	0212      	lsls	r2, r2, #8
 8001b6e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001b72:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001b74:	9b01      	ldr	r3, [sp, #4]
 8001b76:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <xPortStartScheduler+0xd4>)
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <xPortStartScheduler+0xe0>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001b8c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001b8e:	f7ff ff97 	bl	8001ac0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <xPortStartScheduler+0xe4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001b98:	f7ff fedc 	bl	8001954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <xPortStartScheduler+0xe8>)
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001ba4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001ba6:	f7ff fec5 	bl	8001934 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001baa:	f7ff feab 	bl	8001904 <prvTaskExitError>
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	410fc271 	.word	0x410fc271
 8001bb8:	410fc270 	.word	0x410fc270
 8001bbc:	e000e400 	.word	0xe000e400
 8001bc0:	20000024 	.word	0x20000024
 8001bc4:	20000028 	.word	0x20000028
 8001bc8:	e000ed20 	.word	0xe000ed20
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	e000ef34 	.word	0xe000ef34

08001bd4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001bd4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <prvInsertBlockIntoFreeList+0x40>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4282      	cmp	r2, r0
 8001bdc:	d201      	bcs.n	8001be2 <prvInsertBlockIntoFreeList+0xe>
 8001bde:	4613      	mov	r3, r2
 8001be0:	e7fa      	b.n	8001bd8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	185c      	adds	r4, r3, r1
 8001be6:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001be8:	bf01      	itttt	eq
 8001bea:	6840      	ldreq	r0, [r0, #4]
 8001bec:	1809      	addeq	r1, r1, r0
 8001bee:	4618      	moveq	r0, r3
 8001bf0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bf2:	6841      	ldr	r1, [r0, #4]
 8001bf4:	1844      	adds	r4, r0, r1
 8001bf6:	42a2      	cmp	r2, r4
 8001bf8:	d107      	bne.n	8001c0a <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001bfa:	4c07      	ldr	r4, [pc, #28]	; (8001c18 <prvInsertBlockIntoFreeList+0x44>)
 8001bfc:	6824      	ldr	r4, [r4, #0]
 8001bfe:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c00:	bf1f      	itttt	ne
 8001c02:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c04:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c06:	1909      	addne	r1, r1, r4
 8001c08:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001c0a:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c0c:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c0e:	bf18      	it	ne
 8001c10:	6018      	strne	r0, [r3, #0]
 8001c12:	bd10      	pop	{r4, pc}
 8001c14:	20000034 	.word	0x20000034
 8001c18:	20000030 	.word	0x20000030

08001c1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c20:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8001c22:	f000 fa29 	bl	8002078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001c26:	4940      	ldr	r1, [pc, #256]	; (8001d28 <pvPortMalloc+0x10c>)
 8001c28:	4d40      	ldr	r5, [pc, #256]	; (8001d2c <pvPortMalloc+0x110>)
 8001c2a:	680b      	ldr	r3, [r1, #0]
 8001c2c:	bb0b      	cbnz	r3, 8001c72 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001c2e:	4a40      	ldr	r2, [pc, #256]	; (8001d30 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001c30:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c32:	bf1f      	itttt	ne
 8001c34:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c36:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001c3a:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
 8001c3e:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c40:	bf14      	ite	ne
 8001c42:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001c44:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001c48:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001c4a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c4c:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c50:	4e38      	ldr	r6, [pc, #224]	; (8001d34 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8001c52:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8001c54:	2000      	movs	r0, #0
 8001c56:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c58:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8001c5a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001c5c:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001c5e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001c60:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c62:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001c64:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c66:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c68:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <pvPortMalloc+0x120>)
 8001c6a:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c70:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001c72:	682f      	ldr	r7, [r5, #0]
 8001c74:	4227      	tst	r7, r4
 8001c76:	d146      	bne.n	8001d06 <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001c78:	2c00      	cmp	r4, #0
 8001c7a:	d045      	beq.n	8001d08 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 8001c7c:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c80:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001c82:	bf1c      	itt	ne
 8001c84:	f023 0307 	bicne.w	r3, r3, #7
 8001c88:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d039      	beq.n	8001d02 <pvPortMalloc+0xe6>
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <pvPortMalloc+0x120>)
 8001c90:	6816      	ldr	r6, [r2, #0]
 8001c92:	42b3      	cmp	r3, r6
 8001c94:	4690      	mov	r8, r2
 8001c96:	d836      	bhi.n	8001d06 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8001c98:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <pvPortMalloc+0x118>)
 8001c9a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c9c:	6868      	ldr	r0, [r5, #4]
 8001c9e:	4283      	cmp	r3, r0
 8001ca0:	d803      	bhi.n	8001caa <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001ca2:	6809      	ldr	r1, [r1, #0]
 8001ca4:	428d      	cmp	r5, r1
 8001ca6:	d106      	bne.n	8001cb6 <pvPortMalloc+0x9a>
 8001ca8:	e02d      	b.n	8001d06 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001caa:	682c      	ldr	r4, [r5, #0]
 8001cac:	2c00      	cmp	r4, #0
 8001cae:	d0f8      	beq.n	8001ca2 <pvPortMalloc+0x86>
 8001cb0:	462a      	mov	r2, r5
 8001cb2:	4625      	mov	r5, r4
 8001cb4:	e7f2      	b.n	8001c9c <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001cb6:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001cb8:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001cba:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001cbc:	1ac2      	subs	r2, r0, r3
 8001cbe:	2a10      	cmp	r2, #16
 8001cc0:	d90f      	bls.n	8001ce2 <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001cc2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001cc4:	0741      	lsls	r1, r0, #29
 8001cc6:	d008      	beq.n	8001cda <pvPortMalloc+0xbe>
 8001cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ccc:	f383 8811 	msr	BASEPRI, r3
 8001cd0:	f3bf 8f6f 	isb	sy
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	e7fe      	b.n	8001cd8 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001cda:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001cdc:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001cde:	f7ff ff79 	bl	8001bd4 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ce2:	4915      	ldr	r1, [pc, #84]	; (8001d38 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ce4:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ce6:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ce8:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001cea:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001cec:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8001cee:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001cf2:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cf6:	bf38      	it	cc
 8001cf8:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001cfa:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001cfc:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001cfe:	602b      	str	r3, [r5, #0]
 8001d00:	e002      	b.n	8001d08 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001d02:	461c      	mov	r4, r3
 8001d04:	e000      	b.n	8001d08 <pvPortMalloc+0xec>
 8001d06:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001d08:	f000 fa56 	bl	80021b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d0c:	0763      	lsls	r3, r4, #29
 8001d0e:	d008      	beq.n	8001d22 <pvPortMalloc+0x106>
 8001d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	e7fe      	b.n	8001d20 <pvPortMalloc+0x104>
	return pvReturn;
}
 8001d22:	4620      	mov	r0, r4
 8001d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d28:	20000030 	.word	0x20000030
 8001d2c:	20000c3c 	.word	0x20000c3c
 8001d30:	2000003c 	.word	0x2000003c
 8001d34:	20000034 	.word	0x20000034
 8001d38:	20000c40 	.word	0x20000c40
 8001d3c:	2000002c 	.word	0x2000002c

08001d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001d40:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8001d42:	4604      	mov	r4, r0
 8001d44:	b370      	cbz	r0, 8001da4 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <vPortFree+0x68>)
 8001d48:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	4213      	tst	r3, r2
 8001d50:	d108      	bne.n	8001d64 <vPortFree+0x24>
 8001d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d56:	f383 8811 	msr	BASEPRI, r3
 8001d5a:	f3bf 8f6f 	isb	sy
 8001d5e:	f3bf 8f4f 	dsb	sy
 8001d62:	e7fe      	b.n	8001d62 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d64:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001d68:	b141      	cbz	r1, 8001d7c <vPortFree+0x3c>
 8001d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6e:	f383 8811 	msr	BASEPRI, r3
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	f3bf 8f4f 	dsb	sy
 8001d7a:	e7fe      	b.n	8001d7a <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d7c:	ea23 0302 	bic.w	r3, r3, r2
 8001d80:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001d84:	f000 f978 	bl	8002078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d88:	4a08      	ldr	r2, [pc, #32]	; (8001dac <vPortFree+0x6c>)
 8001d8a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001d8e:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d90:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d94:	440b      	add	r3, r1
 8001d96:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d98:	f7ff ff1c 	bl	8001bd4 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8001da0:	f000 ba0a 	b.w	80021b8 <xTaskResumeAll>
 8001da4:	bd10      	pop	{r4, pc}
 8001da6:	bf00      	nop
 8001da8:	20000c3c 	.word	0x20000c3c
 8001dac:	2000002c 	.word	0x2000002c

08001db0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001db0:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <prvResetNextTaskUnblockTime+0x1c>)
 8001db2:	6813      	ldr	r3, [r2, #0]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <prvResetNextTaskUnblockTime+0x20>)
 8001db8:	b911      	cbnz	r1, 8001dc0 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001dba:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbe:	e003      	b.n	8001dc8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001dc4:	68d2      	ldr	r2, [r2, #12]
 8001dc6:	6852      	ldr	r2, [r2, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	4770      	bx	lr
 8001dcc:	20000c48 	.word	0x20000c48
 8001dd0:	20000d14 	.word	0x20000d14

08001dd4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <prvAddCurrentTaskToDelayedList+0x74>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dd8:	4d1c      	ldr	r5, [pc, #112]	; (8001e4c <prvAddCurrentTaskToDelayedList+0x78>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001dda:	681e      	ldr	r6, [r3, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001ddc:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dde:	6828      	ldr	r0, [r5, #0]
 8001de0:	3004      	adds	r0, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001de2:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001de4:	f7ff fd7d 	bl	80018e2 <uxListRemove>
 8001de8:	462b      	mov	r3, r5
 8001dea:	b940      	cbnz	r0, 8001dfe <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001dec:	682a      	ldr	r2, [r5, #0]
 8001dee:	4d18      	ldr	r5, [pc, #96]	; (8001e50 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001df0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001df2:	6828      	ldr	r0, [r5, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	408a      	lsls	r2, r1
 8001df8:	ea20 0202 	bic.w	r2, r0, r2
 8001dfc:	602a      	str	r2, [r5, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001dfe:	1c62      	adds	r2, r4, #1
 8001e00:	d107      	bne.n	8001e12 <prvAddCurrentTaskToDelayedList+0x3e>
 8001e02:	b137      	cbz	r7, 8001e12 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e04:	6819      	ldr	r1, [r3, #0]
 8001e06:	4813      	ldr	r0, [pc, #76]	; (8001e54 <prvAddCurrentTaskToDelayedList+0x80>)
 8001e08:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001e0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e0e:	f7ff bd44 	b.w	800189a <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001e12:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <prvAddCurrentTaskToDelayedList+0x78>)
 8001e18:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8001e1a:	42a6      	cmp	r6, r4
 8001e1c:	d907      	bls.n	8001e2e <prvAddCurrentTaskToDelayedList+0x5a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <prvAddCurrentTaskToDelayedList+0x84>)
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	6811      	ldr	r1, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001e24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e28:	3104      	adds	r1, #4
 8001e2a:	f7ff bd42 	b.w	80018b2 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <prvAddCurrentTaskToDelayedList+0x88>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	6811      	ldr	r1, [r2, #0]
 8001e34:	3104      	adds	r1, #4
 8001e36:	f7ff fd3c 	bl	80018b2 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <prvAddCurrentTaskToDelayedList+0x8c>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8001e40:	bf38      	it	cc
 8001e42:	601c      	strcc	r4, [r3, #0]
 8001e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000d18 	.word	0x20000d18
 8001e4c:	20000d10 	.word	0x20000d10
 8001e50:	20000d68 	.word	0x20000d68
 8001e54:	20000d54 	.word	0x20000d54
 8001e58:	20000d1c 	.word	0x20000d1c
 8001e5c:	20000c48 	.word	0x20000c48
 8001e60:	20000d14 	.word	0x20000d14

08001e64 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e68:	0095      	lsls	r5, r2, #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001e6a:	4680      	mov	r8, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e6c:	4628      	mov	r0, r5
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001e6e:	460f      	mov	r7, r1
 8001e70:	4699      	mov	r9, r3
 8001e72:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e74:	f7ff fed2 	bl	8001c1c <pvPortMalloc>

			if( pxStack != NULL )
 8001e78:	4682      	mov	sl, r0
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	f000 80a0 	beq.w	8001fc0 <xTaskCreate+0x15c>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e80:	2054      	movs	r0, #84	; 0x54
 8001e82:	f7ff fecb 	bl	8001c1c <pvPortMalloc>

				if( pxNewTCB != NULL )
 8001e86:	4604      	mov	r4, r0
 8001e88:	b150      	cbz	r0, 8001ea0 <xTaskCreate+0x3c>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001e8a:	3d04      	subs	r5, #4
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */

				if( pxNewTCB != NULL )
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e8c:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001e90:	44aa      	add	sl, r5
 8001e92:	1e7b      	subs	r3, r7, #1
 8001e94:	f02a 0a07 	bic.w	sl, sl, #7
 8001e98:	f100 0233 	add.w	r2, r0, #51	; 0x33
 8001e9c:	370f      	adds	r7, #15
 8001e9e:	e005      	b.n	8001eac <xTaskCreate+0x48>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001ea0:	4650      	mov	r0, sl
 8001ea2:	f7ff ff4d 	bl	8001d40 <vPortFree>
 8001ea6:	e08b      	b.n	8001fc0 <xTaskCreate+0x15c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ea8:	429f      	cmp	r7, r3
 8001eaa:	d006      	beq.n	8001eba <xTaskCreate+0x56>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001eac:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001eb0:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001eb4:	7819      	ldrb	r1, [r3, #0]
 8001eb6:	2900      	cmp	r1, #0
 8001eb8:	d1f6      	bne.n	8001ea8 <xTaskCreate+0x44>
 8001eba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001ebc:	2d06      	cmp	r5, #6
 8001ebe:	bf28      	it	cs
 8001ec0:	2506      	movcs	r5, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ec2:	f04f 0b00 	mov.w	fp, #0
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ec6:	1d27      	adds	r7, r4, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001ec8:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001eca:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ecc:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ece:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 8001ed2:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ed6:	f7ff fcdd 	bl	8001894 <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eda:	f1c5 0507 	rsb	r5, r5, #7
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ede:	f104 0018 	add.w	r0, r4, #24
 8001ee2:	f7ff fcd7 	bl	8001894 <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001ee6:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001eea:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eec:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001eee:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ef0:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ef4:	464a      	mov	r2, r9
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	4650      	mov	r0, sl
 8001efa:	f7ff fd35 	bl	8001968 <pxPortInitialiseStack>
 8001efe:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001f00:	b106      	cbz	r6, 8001f04 <xTaskCreate+0xa0>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001f02:	6034      	str	r4, [r6, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001f04:	f7ff fd5e 	bl	80019c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001f08:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <xTaskCreate+0x164>)
		if( pxCurrentTCB == NULL )
 8001f0a:	4e30      	ldr	r6, [pc, #192]	; (8001fcc <xTaskCreate+0x168>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8001ff8 <xTaskCreate+0x194>
 8001f12:	3201      	adds	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001f16:	6835      	ldr	r5, [r6, #0]
 8001f18:	bb15      	cbnz	r5, 8001f60 <xTaskCreate+0xfc>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001f1a:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d127      	bne.n	8001f72 <xTaskCreate+0x10e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f22:	eb08 0005 	add.w	r0, r8, r5
 8001f26:	3514      	adds	r5, #20
 8001f28:	f7ff fca9 	bl	800187e <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f2c:	2d8c      	cmp	r5, #140	; 0x8c
 8001f2e:	d1f8      	bne.n	8001f22 <xTaskCreate+0xbe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f30:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8001ffc <xTaskCreate+0x198>
	vListInitialise( &xDelayedTaskList2 );
 8001f34:	4d26      	ldr	r5, [pc, #152]	; (8001fd0 <xTaskCreate+0x16c>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f36:	4648      	mov	r0, r9
 8001f38:	f7ff fca1 	bl	800187e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f7ff fc9e 	bl	800187e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f42:	4824      	ldr	r0, [pc, #144]	; (8001fd4 <xTaskCreate+0x170>)
 8001f44:	f7ff fc9b 	bl	800187e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001f48:	4823      	ldr	r0, [pc, #140]	; (8001fd8 <xTaskCreate+0x174>)
 8001f4a:	f7ff fc98 	bl	800187e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f4e:	4823      	ldr	r0, [pc, #140]	; (8001fdc <xTaskCreate+0x178>)
 8001f50:	f7ff fc95 	bl	800187e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <xTaskCreate+0x17c>)
 8001f56:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <xTaskCreate+0x180>)
 8001f5c:	601d      	str	r5, [r3, #0]
 8001f5e:	e008      	b.n	8001f72 <xTaskCreate+0x10e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <xTaskCreate+0x184>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b92b      	cbnz	r3, 8001f72 <xTaskCreate+0x10e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f66:	6833      	ldr	r3, [r6, #0]
 8001f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f6c:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 8001f6e:	bf98      	it	ls
 8001f70:	6034      	strls	r4, [r6, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001f72:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <xTaskCreate+0x188>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001f74:	491e      	ldr	r1, [pc, #120]	; (8001ff0 <xTaskCreate+0x18c>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f7e:	680b      	ldr	r3, [r1, #0]
 8001f80:	2501      	movs	r5, #1
 8001f82:	fa05 f002 	lsl.w	r0, r5, r2
 8001f86:	4303      	orrs	r3, r0
 8001f88:	2014      	movs	r0, #20
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	fb00 8002 	mla	r0, r0, r2, r8
 8001f90:	4639      	mov	r1, r7
 8001f92:	f7ff fc82 	bl	800189a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001f96:	f7ff fd37 	bl	8001a08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <xTaskCreate+0x184>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b163      	cbz	r3, 8001fba <xTaskCreate+0x156>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001fa0:	6833      	ldr	r3, [r6, #0]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d207      	bcs.n	8001fba <xTaskCreate+0x156>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <xTaskCreate+0x190>)
 8001fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f3bf 8f4f 	dsb	sy
 8001fb6:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 8001fba:	4628      	mov	r0, r5
 8001fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8001fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fc8:	20000d38 	.word	0x20000d38
 8001fcc:	20000d10 	.word	0x20000d10
 8001fd0:	20000d3c 	.word	0x20000d3c
 8001fd4:	20000d20 	.word	0x20000d20
 8001fd8:	20000cf8 	.word	0x20000cf8
 8001fdc:	20000d54 	.word	0x20000d54
 8001fe0:	20000c48 	.word	0x20000c48
 8001fe4:	20000d1c 	.word	0x20000d1c
 8001fe8:	20000c4c 	.word	0x20000c4c
 8001fec:	20000d34 	.word	0x20000d34
 8001ff0:	20000d68 	.word	0x20000d68
 8001ff4:	e000ed04 	.word	0xe000ed04
 8001ff8:	20000c6c 	.word	0x20000c6c
 8001ffc:	20000c54 	.word	0x20000c54

08002000 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002000:	b513      	push	{r0, r1, r4, lr}
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <vTaskStartScheduler+0x60>)
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	2400      	movs	r4, #0
 8002008:	9400      	str	r4, [sp, #0]
 800200a:	4623      	mov	r3, r4
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	4915      	ldr	r1, [pc, #84]	; (8002064 <vTaskStartScheduler+0x64>)
 8002010:	4815      	ldr	r0, [pc, #84]	; (8002068 <vTaskStartScheduler+0x68>)
 8002012:	f7ff ff27 	bl	8001e64 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002016:	2801      	cmp	r0, #1
 8002018:	d114      	bne.n	8002044 <vTaskStartScheduler+0x44>
 800201a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800201e:	f383 8811 	msr	BASEPRI, r3
 8002022:	f3bf 8f6f 	isb	sy
 8002026:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <vTaskStartScheduler+0x6c>)
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <vTaskStartScheduler+0x70>)
 8002034:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <vTaskStartScheduler+0x74>)
 8002038:	601c      	str	r4, [r3, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800203a:	b002      	add	sp, #8
 800203c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002040:	f7ff bd52 	b.w	8001ae8 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002044:	3001      	adds	r0, #1
 8002046:	d108      	bne.n	800205a <vTaskStartScheduler+0x5a>
 8002048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	e7fe      	b.n	8002058 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800205a:	b002      	add	sp, #8
 800205c:	bd10      	pop	{r4, pc}
 800205e:	bf00      	nop
 8002060:	20000d50 	.word	0x20000d50
 8002064:	0800287c 	.word	0x0800287c
 8002068:	080022f1 	.word	0x080022f1
 800206c:	20000d14 	.word	0x20000d14
 8002070:	20000c4c 	.word	0x20000c4c
 8002074:	20000d18 	.word	0x20000d18

08002078 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002078:	4a02      	ldr	r2, [pc, #8]	; (8002084 <vTaskSuspendAll+0xc>)
 800207a:	6813      	ldr	r3, [r2, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000c50 	.word	0x20000c50

08002088 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002088:	4b40      	ldr	r3, [pc, #256]	; (800218c <xTaskIncrementTick+0x104>)
 800208a:	681b      	ldr	r3, [r3, #0]

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800208c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002090:	2b00      	cmp	r3, #0
 8002092:	d13b      	bne.n	800210c <xTaskIncrementTick+0x84>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002094:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <xTaskIncrementTick+0x108>)
 8002096:	681c      	ldr	r4, [r3, #0]
 8002098:	3401      	adds	r4, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800209a:	601c      	str	r4, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800209c:	b9bc      	cbnz	r4, 80020ce <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <xTaskIncrementTick+0x10c>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	b142      	cbz	r2, 80020b8 <xTaskIncrementTick+0x30>
 80020a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020aa:	f383 8811 	msr	BASEPRI, r3
 80020ae:	f3bf 8f6f 	isb	sy
 80020b2:	f3bf 8f4f 	dsb	sy
 80020b6:	e7fe      	b.n	80020b6 <xTaskIncrementTick+0x2e>
 80020b8:	4a37      	ldr	r2, [pc, #220]	; (8002198 <xTaskIncrementTick+0x110>)
 80020ba:	6819      	ldr	r1, [r3, #0]
 80020bc:	6810      	ldr	r0, [r2, #0]
 80020be:	6018      	str	r0, [r3, #0]
 80020c0:	6011      	str	r1, [r2, #0]
 80020c2:	4a36      	ldr	r2, [pc, #216]	; (800219c <xTaskIncrementTick+0x114>)
 80020c4:	6813      	ldr	r3, [r2, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	f7ff fe71 	bl	8001db0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80020ce:	4d34      	ldr	r5, [pc, #208]	; (80021a0 <xTaskIncrementTick+0x118>)
 80020d0:	9501      	str	r5, [sp, #4]
 80020d2:	682b      	ldr	r3, [r5, #0]
 80020d4:	4e33      	ldr	r6, [pc, #204]	; (80021a4 <xTaskIncrementTick+0x11c>)
 80020d6:	4f34      	ldr	r7, [pc, #208]	; (80021a8 <xTaskIncrementTick+0x120>)
 80020d8:	429c      	cmp	r4, r3
 80020da:	f04f 0b00 	mov.w	fp, #0
 80020de:	d30b      	bcc.n	80020f8 <xTaskIncrementTick+0x70>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020e0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002194 <xTaskIncrementTick+0x10c>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80020e4:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80021b4 <xTaskIncrementTick+0x12c>
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020e8:	f8d8 2000 	ldr.w	r2, [r8]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	b9a2      	cbnz	r2, 800211a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020f0:	9b01      	ldr	r3, [sp, #4]
 80020f2:	f04f 32ff 	mov.w	r2, #4294967295
 80020f6:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020fc:	2214      	movs	r2, #20
 80020fe:	434a      	muls	r2, r1
 8002100:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8002102:	2a02      	cmp	r2, #2
 8002104:	bf28      	it	cs
 8002106:	f04f 0b01 	movcs.w	fp, #1
 800210a:	e034      	b.n	8002176 <xTaskIncrementTick+0xee>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <xTaskIncrementTick+0x124>)
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	3301      	adds	r3, #1
 8002112:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002114:	f04f 0b00 	mov.w	fp, #0
 8002118:	e02d      	b.n	8002176 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800211a:	f8d8 2000 	ldr.w	r2, [r8]
 800211e:	68d2      	ldr	r2, [r2, #12]
 8002120:	68d5      	ldr	r5, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002122:	6869      	ldr	r1, [r5, #4]

					if( xConstTickCount < xItemValue )
 8002124:	428c      	cmp	r4, r1
 8002126:	d202      	bcs.n	800212e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002128:	9b01      	ldr	r3, [sp, #4]
 800212a:	6019      	str	r1, [r3, #0]
						break;
 800212c:	e7e4      	b.n	80020f8 <xTaskIncrementTick+0x70>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800212e:	f105 0a04 	add.w	sl, r5, #4
 8002132:	4650      	mov	r0, sl
 8002134:	f7ff fbd5 	bl	80018e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002138:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800213a:	b119      	cbz	r1, 8002144 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800213c:	f105 0018 	add.w	r0, r5, #24
 8002140:	f7ff fbcf 	bl	80018e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002144:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002146:	f8d9 1000 	ldr.w	r1, [r9]
 800214a:	2301      	movs	r3, #1
 800214c:	fa03 fe00 	lsl.w	lr, r3, r0
 8002150:	ea4e 0101 	orr.w	r1, lr, r1
 8002154:	f04f 0e14 	mov.w	lr, #20
 8002158:	f8c9 1000 	str.w	r1, [r9]
 800215c:	fb0e 6000 	mla	r0, lr, r0, r6
 8002160:	4651      	mov	r1, sl
 8002162:	f7ff fb9a 	bl	800189a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002166:	6838      	ldr	r0, [r7, #0]
 8002168:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800216a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 800216c:	4291      	cmp	r1, r2
 800216e:	bf28      	it	cs
 8002170:	f04f 0b01 	movcs.w	fp, #1
 8002174:	e7b8      	b.n	80020e8 <xTaskIncrementTick+0x60>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002176:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <xTaskIncrementTick+0x128>)
 8002178:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 800217a:	2a00      	cmp	r2, #0
 800217c:	bf18      	it	ne
 800217e:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8002182:	4658      	mov	r0, fp
 8002184:	b003      	add	sp, #12
 8002186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800218a:	bf00      	nop
 800218c:	20000c50 	.word	0x20000c50
 8002190:	20000d18 	.word	0x20000d18
 8002194:	20000c48 	.word	0x20000c48
 8002198:	20000d1c 	.word	0x20000d1c
 800219c:	20000c44 	.word	0x20000c44
 80021a0:	20000d14 	.word	0x20000d14
 80021a4:	20000c6c 	.word	0x20000c6c
 80021a8:	20000d10 	.word	0x20000d10
 80021ac:	20000c68 	.word	0x20000c68
 80021b0:	20000d6c 	.word	0x20000d6c
 80021b4:	20000d68 	.word	0x20000d68

080021b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80021b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80021bc:	4c31      	ldr	r4, [pc, #196]	; (8002284 <xTaskResumeAll+0xcc>)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	b943      	cbnz	r3, 80021d4 <xTaskResumeAll+0x1c>
 80021c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c6:	f383 8811 	msr	BASEPRI, r3
 80021ca:	f3bf 8f6f 	isb	sy
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	e7fe      	b.n	80021d2 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80021d4:	f7ff fbf6 	bl	80019c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021de:	6824      	ldr	r4, [r4, #0]
 80021e0:	b10c      	cbz	r4, 80021e6 <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 80021e2:	2400      	movs	r4, #0
 80021e4:	e049      	b.n	800227a <xTaskResumeAll+0xc2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80021e6:	4b28      	ldr	r3, [pc, #160]	; (8002288 <xTaskResumeAll+0xd0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f9      	beq.n	80021e2 <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021ee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80022a0 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 80021f2:	4f26      	ldr	r7, [pc, #152]	; (800228c <xTaskResumeAll+0xd4>)
 80021f4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80022a4 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021f8:	f8d9 3000 	ldr.w	r3, [r9]
 80021fc:	b303      	cbz	r3, 8002240 <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80021fe:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002202:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002204:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002206:	f104 0018 	add.w	r0, r4, #24
 800220a:	f7ff fb6a 	bl	80018e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800220e:	4630      	mov	r0, r6
 8002210:	f7ff fb67 	bl	80018e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002214:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2501      	movs	r5, #1
 800221a:	fa05 f102 	lsl.w	r1, r5, r2
 800221e:	2014      	movs	r0, #20
 8002220:	430b      	orrs	r3, r1
 8002222:	fb00 8002 	mla	r0, r0, r2, r8
 8002226:	4631      	mov	r1, r6
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	f7ff fb36 	bl	800189a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <xTaskResumeAll+0xd8>)
 8002230:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8002238:	bf24      	itt	cs
 800223a:	4b16      	ldrcs	r3, [pc, #88]	; (8002294 <xTaskResumeAll+0xdc>)
 800223c:	601d      	strcs	r5, [r3, #0]
 800223e:	e7db      	b.n	80021f8 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002240:	b10c      	cbz	r4, 8002246 <xTaskResumeAll+0x8e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002242:	f7ff fdb5 	bl	8001db0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <xTaskResumeAll+0xe0>)
 8002248:	681c      	ldr	r4, [r3, #0]
 800224a:	461d      	mov	r5, r3

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800224c:	b144      	cbz	r4, 8002260 <xTaskResumeAll+0xa8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 800224e:	4e11      	ldr	r6, [pc, #68]	; (8002294 <xTaskResumeAll+0xdc>)
 8002250:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002252:	f7ff ff19 	bl	8002088 <xTaskIncrementTick>
 8002256:	b100      	cbz	r0, 800225a <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
 8002258:	6037      	str	r7, [r6, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800225a:	3c01      	subs	r4, #1
 800225c:	d1f9      	bne.n	8002252 <xTaskResumeAll+0x9a>

						uxPendedTicks = 0;
 800225e:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <xTaskResumeAll+0xdc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0bc      	beq.n	80021e2 <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <xTaskResumeAll+0xe4>)
 800226a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002278:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800227a:	f7ff fbc5 	bl	8001a08 <vPortExitCritical>

	return xAlreadyYielded;
}
 800227e:	4620      	mov	r0, r4
 8002280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002284:	20000c50 	.word	0x20000c50
 8002288:	20000d38 	.word	0x20000d38
 800228c:	20000d68 	.word	0x20000d68
 8002290:	20000d10 	.word	0x20000d10
 8002294:	20000d6c 	.word	0x20000d6c
 8002298:	20000c68 	.word	0x20000c68
 800229c:	e000ed04 	.word	0xe000ed04
 80022a0:	20000d20 	.word	0x20000d20
 80022a4:	20000c6c 	.word	0x20000c6c

080022a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80022a8:	b508      	push	{r3, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022aa:	b940      	cbnz	r0, 80022be <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <vTaskDelay+0x40>)
 80022ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	bd08      	pop	{r3, pc}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <vTaskDelay+0x44>)
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	b141      	cbz	r1, 80022d6 <vTaskDelay+0x2e>
 80022c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	e7fe      	b.n	80022d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80022d6:	f7ff fecf 	bl	8002078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80022da:	f7ff fd7b 	bl	8001dd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80022de:	f7ff ff6b 	bl	80021b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80022e2:	2800      	cmp	r0, #0
 80022e4:	d0e2      	beq.n	80022ac <vTaskDelay+0x4>
 80022e6:	bd08      	pop	{r3, pc}
 80022e8:	e000ed04 	.word	0xe000ed04
 80022ec:	20000c50 	.word	0x20000c50

080022f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80022f0:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022f2:	4d18      	ldr	r5, [pc, #96]	; (8002354 <prvIdleTask+0x64>)
 80022f4:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80022f6:	4f18      	ldr	r7, [pc, #96]	; (8002358 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022f8:	682b      	ldr	r3, [r5, #0]
 80022fa:	b1f3      	cbz	r3, 800233a <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 80022fc:	f7ff febc 	bl	8002078 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002300:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8002302:	f7ff ff59 	bl	80021b8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002306:	2c00      	cmp	r4, #0
 8002308:	d0f6      	beq.n	80022f8 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800230a:	f7ff fb5b 	bl	80019c4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <prvIdleTask+0x68>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002314:	1d20      	adds	r0, r4, #4
 8002316:	f7ff fae4 	bl	80018e2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800231a:	4a10      	ldr	r2, [pc, #64]	; (800235c <prvIdleTask+0x6c>)
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	3b01      	subs	r3, #1
 8002320:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002322:	6833      	ldr	r3, [r6, #0]
 8002324:	3b01      	subs	r3, #1
 8002326:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8002328:	f7ff fb6e 	bl	8001a08 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800232c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800232e:	f7ff fd07 	bl	8001d40 <vPortFree>
			vPortFree( pxTCB );
 8002332:	4620      	mov	r0, r4
 8002334:	f7ff fd04 	bl	8001d40 <vPortFree>
 8002338:	e7de      	b.n	80022f8 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <prvIdleTask+0x70>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d9d9      	bls.n	80022f6 <prvIdleTask+0x6>
			{
				taskYIELD();
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <prvIdleTask+0x74>)
 8002344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	e7d0      	b.n	80022f6 <prvIdleTask+0x6>
 8002354:	20000d0c 	.word	0x20000d0c
 8002358:	20000cf8 	.word	0x20000cf8
 800235c:	20000d38 	.word	0x20000d38
 8002360:	20000c6c 	.word	0x20000c6c
 8002364:	e000ed04 	.word	0xe000ed04

08002368 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <vTaskSwitchContext+0x60>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800236e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002370:	b10a      	cbz	r2, 8002376 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002372:	2201      	movs	r2, #1
 8002374:	e025      	b.n	80023c2 <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 8002376:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <vTaskSwitchContext+0x68>)
 800237a:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f1c3 031f 	rsb	r3, r3, #31
 8002386:	2214      	movs	r2, #20
 8002388:	4912      	ldr	r1, [pc, #72]	; (80023d4 <vTaskSwitchContext+0x6c>)
 800238a:	435a      	muls	r2, r3
 800238c:	1888      	adds	r0, r1, r2
 800238e:	588c      	ldr	r4, [r1, r2]
 8002390:	b944      	cbnz	r4, 80023a4 <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002396:	f383 8811 	msr	BASEPRI, r3
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	e7fe      	b.n	80023a2 <vTaskSwitchContext+0x3a>
 80023a4:	6844      	ldr	r4, [r0, #4]
 80023a6:	3208      	adds	r2, #8
 80023a8:	6864      	ldr	r4, [r4, #4]
 80023aa:	6044      	str	r4, [r0, #4]
 80023ac:	440a      	add	r2, r1
 80023ae:	4294      	cmp	r4, r2
 80023b0:	bf04      	itt	eq
 80023b2:	6862      	ldreq	r2, [r4, #4]
 80023b4:	6042      	streq	r2, [r0, #4]
 80023b6:	2214      	movs	r2, #20
 80023b8:	fb02 1303 	mla	r3, r2, r3, r1
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <vTaskSwitchContext+0x70>)
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	bd10      	pop	{r4, pc}
 80023c6:	bf00      	nop
 80023c8:	20000c50 	.word	0x20000c50
 80023cc:	20000d6c 	.word	0x20000d6c
 80023d0:	20000d68 	.word	0x20000d68
 80023d4:	20000c6c 	.word	0x20000c6c
 80023d8:	20000d10 	.word	0x20000d10

080023dc <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <xTaskGetSchedulerState+0x18>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b133      	cbz	r3, 80023f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <xTaskGetSchedulerState+0x1c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80023e8:	bf0c      	ite	eq
 80023ea:	2002      	moveq	r0, #2
 80023ec:	2000      	movne	r0, #0
 80023ee:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80023f0:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 80023f2:	4770      	bx	lr
 80023f4:	20000c4c 	.word	0x20000c4c
 80023f8:	20000c50 	.word	0x20000c50

080023fc <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80023fc:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff fa2b 	bl	800185a <osDelay>
 8002404:	e7fb      	b.n	80023fe <StartDefaultTask+0x2>

08002406 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002406:	b530      	push	{r4, r5, lr}
 8002408:	b0a7      	sub	sp, #156	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800240a:	2301      	movs	r3, #1
 800240c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800240e:	2310      	movs	r3, #16
 8002410:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002416:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002418:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800241c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800241e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002420:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002422:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002424:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002426:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002428:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800242a:	f7fe fbcd 	bl	8000bc8 <HAL_RCC_OscConfig>
 800242e:	b100      	cbz	r0, 8002432 <SystemClock_Config+0x2c>
 8002430:	e7fe      	b.n	8002430 <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002432:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002434:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002436:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800243a:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800243c:	4621      	mov	r1, r4
 800243e:	a801      	add	r0, sp, #4
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002440:	9501      	str	r5, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002442:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002444:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002446:	f7fe fe75 	bl	8001134 <HAL_RCC_ClockConfig>
 800244a:	b100      	cbz	r0, 800244e <SystemClock_Config+0x48>
 800244c:	e7fe      	b.n	800244c <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC34;
 800244e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002452:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002454:	a810      	add	r0, sp, #64	; 0x40
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245a:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245c:	f7fe ff64 	bl	8001328 <HAL_RCCEx_PeriphCLKConfig>
 8002460:	4604      	mov	r4, r0
 8002462:	b100      	cbz	r0, 8002466 <SystemClock_Config+0x60>
 8002464:	e7fe      	b.n	8002464 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002466:	f7fe ff23 	bl	80012b0 <HAL_RCC_GetHCLKFreq>
 800246a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002472:	f7fe faad 	bl	80009d0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002476:	2004      	movs	r0, #4
 8002478:	f7fe fac0 	bl	80009fc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800247c:	4622      	mov	r2, r4
 800247e:	4629      	mov	r1, r5
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f7fe fa64 	bl	8000950 <HAL_NVIC_SetPriority>
}
 8002488:	b027      	add	sp, #156	; 0x9c
 800248a:	bd30      	pop	{r4, r5, pc}

0800248c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	b08e      	sub	sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002490:	f7fd fea6 	bl	80001e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002494:	f7ff ffb7 	bl	8002406 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002498:	4b44      	ldr	r3, [pc, #272]	; (80025ac <main+0x120>)
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 800249a:	4c45      	ldr	r4, [pc, #276]	; (80025b0 <main+0x124>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80024a2:	615a      	str	r2, [r3, #20]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80024aa:	9201      	str	r2, [sp, #4]
 80024ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80024b4:	615a      	str	r2, [r3, #20]
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80024bc:	9202      	str	r2, [sp, #8]
 80024be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80024ce:	9203      	str	r2, [sp, #12]
 80024d0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024d8:	615a      	str	r2, [r3, #20]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024e0:	2200      	movs	r2, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024e4:	2120      	movs	r1, #32
 80024e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024ec:	f7fe fb66 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2500      	movs	r5, #0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024f6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024f8:	a908      	add	r1, sp, #32
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <main+0x128>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024fc:	482e      	ldr	r0, [pc, #184]	; (80025b8 <main+0x12c>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024fe:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002502:	f7fe fa87 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002506:	230c      	movs	r3, #12
 8002508:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	a908      	add	r1, sp, #32
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002510:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002516:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	f7fe fa7a 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002520:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002522:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002524:	eb0d 0103 	add.w	r1, sp, r3
 8002528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800252c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002534:	f7fe fa6e 	bl	8000a14 <HAL_GPIO_Init>
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <main+0x130>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800253a:	60a5      	str	r5, [r4, #8]
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800253c:	e884 0028 	stmia.w	r4, {r3, r5}
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002540:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002542:	2304      	movs	r3, #4
    /**Common config 
    */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002544:	6125      	str	r5, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002546:	61e5      	str	r5, [r4, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002548:	6265      	str	r5, [r4, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800254a:	6325      	str	r5, [r4, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800254c:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800254e:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002550:	6226      	str	r6, [r4, #32]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002552:	6365      	str	r5, [r4, #52]	; 0x34
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002554:	6163      	str	r3, [r4, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002556:	61a5      	str	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002558:	63a5      	str	r5, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800255a:	f7fd fe99 	bl	8000290 <HAL_ADC_Init>
 800255e:	b100      	cbz	r0, 8002562 <main+0xd6>
 8002560:	e7fe      	b.n	8002560 <main+0xd4>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the ADC multi-mode 
    */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002562:	a90e      	add	r1, sp, #56	; 0x38
 8002564:	f841 0d24 	str.w	r0, [r1, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8002568:	4620      	mov	r0, r4
 800256a:	f7fe f955 	bl	8000818 <HAL_ADCEx_MultiModeConfigChannel>
 800256e:	b100      	cbz	r0, 8002572 <main+0xe6>
 8002570:	e7fe      	b.n	8002570 <main+0xe4>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002572:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002574:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002576:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.Offset = 0;
 8002578:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800257a:	a908      	add	r1, sp, #32
 800257c:	4620      	mov	r0, r4
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 800257e:	9608      	str	r6, [sp, #32]
  sConfig.Rank = 1;
 8002580:	9609      	str	r6, [sp, #36]	; 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002582:	f7fd ffbb 	bl	80004fc <HAL_ADC_ConfigChannel>
 8002586:	4606      	mov	r6, r0
 8002588:	b100      	cbz	r0, 800258c <main+0x100>
 800258a:	e7fe      	b.n	800258a <main+0xfe>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800258c:	4d0c      	ldr	r5, [pc, #48]	; (80025c0 <main+0x134>)
 800258e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002590:	ac08      	add	r4, sp, #32
 8002592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002598:	4631      	mov	r1, r6
 800259a:	a808      	add	r0, sp, #32
 800259c:	f7ff f945 	bl	800182a <osThreadCreate>
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <main+0x138>)
 80025a2:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 80025a4:	f7ff f93c 	bl	8001820 <osKernelStart>
 80025a8:	e7fe      	b.n	80025a8 <main+0x11c>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	20000d78 	.word	0x20000d78
 80025b4:	10210000 	.word	0x10210000
 80025b8:	48000800 	.word	0x48000800
 80025bc:	50000400 	.word	0x50000400
 80025c0:	08002848 	.word	0x08002848
 80025c4:	20000d74 	.word	0x20000d74

080025c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80025c8:	6802      	ldr	r2, [r0, #0]
 80025ca:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d101      	bne.n	80025d4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80025d0:	f7fd be18 	b.w	8000204 <HAL_IncTick>
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40012c00 	.word	0x40012c00

080025dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_MspInit+0x78>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025de:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	619a      	str	r2, [r3, #24]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f0:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f4:	f7fe f99a 	bl	800092c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	4611      	mov	r1, r2
 80025fc:	f06f 000b 	mvn.w	r0, #11
 8002600:	f7fe f9a6 	bl	8000950 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	4611      	mov	r1, r2
 8002608:	f06f 000a 	mvn.w	r0, #10
 800260c:	f7fe f9a0 	bl	8000950 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	4611      	mov	r1, r2
 8002614:	f06f 0009 	mvn.w	r0, #9
 8002618:	f7fe f99a 	bl	8000950 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	4611      	mov	r1, r2
 8002620:	f06f 0004 	mvn.w	r0, #4
 8002624:	f7fe f994 	bl	8000950 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	4611      	mov	r1, r2
 800262c:	f06f 0003 	mvn.w	r0, #3
 8002630:	f7fe f98e 	bl	8000950 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	210f      	movs	r1, #15
 8002638:	f06f 0001 	mvn.w	r0, #1
 800263c:	f7fe f988 	bl	8000950 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f7fe f982 	bl	8000950 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800264c:	b003      	add	sp, #12
 800264e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 800265a:	6802      	ldr	r2, [r0, #0]
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <HAL_ADC_MspInit+0x40>)
 800265e:	429a      	cmp	r2, r3
 8002660:	d117      	bne.n	8002692 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002662:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002666:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    PB13     ------> ADC3_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266a:	a901      	add	r1, sp, #4
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 800266c:	695a      	ldr	r2, [r3, #20]
    PB13     ------> ADC3_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	480b      	ldr	r0, [pc, #44]	; (800269c <HAL_ADC_MspInit+0x44>)
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002670:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002674:	615a      	str	r2, [r3, #20]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	9b00      	ldr	r3, [sp, #0]
    /**ADC3 GPIO Configuration    
    PB0     ------> ADC3_IN12
    PB1     ------> ADC3_IN1
    PB13     ------> ADC3_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8002680:	f242 0303 	movw	r3, #8195	; 0x2003
 8002684:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002686:	2303      	movs	r3, #3
 8002688:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268e:	f7fe f9c1 	bl	8000a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002692:	b007      	add	sp, #28
 8002694:	f85d fb04 	ldr.w	pc, [sp], #4
 8002698:	50000400 	.word	0x50000400
 800269c:	48000400 	.word	0x48000400

080026a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80026a2:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a4:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80026a6:	2200      	movs	r2, #0
 80026a8:	2019      	movs	r0, #25
 80026aa:	f7fe f951 	bl	8000950 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80026ae:	2019      	movs	r0, #25
 80026b0:	f7fe f982 	bl	80009b8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80026b6:	4c15      	ldr	r4, [pc, #84]	; (800270c <HAL_InitTick+0x6c>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026be:	619a      	str	r2, [r3, #24]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c6:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026c8:	a901      	add	r1, sp, #4
 80026ca:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026cc:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026ce:	f7fe fe0d 	bl	80012ec <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80026d2:	f7fe fdf3 	bl	80012bc <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_InitTick+0x70>)
 80026d8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80026da:	f240 33e7 	movw	r3, #999	; 0x3e7
 80026de:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_InitTick+0x74>)
 80026e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80026e6:	3801      	subs	r0, #1
  htim1.Init.ClockDivision = 0;
 80026e8:	2300      	movs	r3, #0
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
 80026ea:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80026ec:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80026ee:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f0:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80026f2:	f7ff f879 	bl	80017e8 <HAL_TIM_Base_Init>
 80026f6:	b918      	cbnz	r0, 8002700 <HAL_InitTick+0x60>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7fe ff5a 	bl	80015b2 <HAL_TIM_Base_Start_IT>
 80026fe:	e000      	b.n	8002702 <HAL_InitTick+0x62>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002700:	2001      	movs	r0, #1
}
 8002702:	b008      	add	sp, #32
 8002704:	bd10      	pop	{r4, pc}
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	20000dcc 	.word	0x20000dcc
 8002710:	40012c00 	.word	0x40012c00
 8002714:	000f4240 	.word	0x000f4240

08002718 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8002718:	f7ff b8a7 	b.w	800186a <osSystickHandler>

0800271c <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800271c:	4801      	ldr	r0, [pc, #4]	; (8002724 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800271e:	f7fe bf57 	b.w	80015d0 <HAL_TIM_IRQHandler>
 8002722:	bf00      	nop
 8002724:	20000dcc 	.word	0x20000dcc

08002728 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002728:	4915      	ldr	r1, [pc, #84]	; (8002780 <SystemInit+0x58>)
 800272a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800272e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <SystemInit+0x5c>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002740:	6858      	ldr	r0, [r3, #4]
 8002742:	4a11      	ldr	r2, [pc, #68]	; (8002788 <SystemInit+0x60>)
 8002744:	4002      	ands	r2, r0
 8002746:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800274e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002752:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800275a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002762:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002766:	f022 020f 	bic.w	r2, r2, #15
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800276c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800276e:	4a07      	ldr	r2, [pc, #28]	; (800278c <SystemInit+0x64>)
 8002770:	4002      	ands	r2, r0
 8002772:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002778:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800277c:	608b      	str	r3, [r1, #8]
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00
 8002784:	40021000 	.word	0x40021000
 8002788:	f87fc00c 	.word	0xf87fc00c
 800278c:	ff00fccc 	.word	0xff00fccc

08002790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002794:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002796:	e003      	b.n	80027a0 <LoopCopyDataInit>

08002798 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800279a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800279c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800279e:	3104      	adds	r1, #4

080027a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027a0:	480b      	ldr	r0, [pc, #44]	; (80027d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027a8:	d3f6      	bcc.n	8002798 <CopyDataInit>
	ldr	r2, =_sbss
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027ac:	e002      	b.n	80027b4 <LoopFillZerobss>

080027ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027b0:	f842 3b04 	str.w	r3, [r2], #4

080027b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <LoopForever+0x16>)
	cmp	r2, r3
 80027b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027b8:	d3f9      	bcc.n	80027ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027ba:	f7ff ffb5 	bl	8002728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027be:	f000 f811 	bl	80027e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027c2:	f7ff fe63 	bl	800248c <main>

080027c6 <LoopForever>:

LoopForever:
    b LoopForever
 80027c6:	e7fe      	b.n	80027c6 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027c8:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80027cc:	080028b0 	.word	0x080028b0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027d4:	20000008 	.word	0x20000008
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80027d8:	20000008 	.word	0x20000008
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80027dc:	20000e0c 	.word	0x20000e0c

080027e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027e0:	e7fe      	b.n	80027e0 <ADC1_2_IRQHandler>
	...

080027e4 <__libc_init_array>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <__libc_init_array+0x3c>)
 80027e8:	4c0e      	ldr	r4, [pc, #56]	; (8002824 <__libc_init_array+0x40>)
 80027ea:	1ae4      	subs	r4, r4, r3
 80027ec:	10a4      	asrs	r4, r4, #2
 80027ee:	2500      	movs	r5, #0
 80027f0:	461e      	mov	r6, r3
 80027f2:	42a5      	cmp	r5, r4
 80027f4:	d004      	beq.n	8002800 <__libc_init_array+0x1c>
 80027f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027fa:	4798      	blx	r3
 80027fc:	3501      	adds	r5, #1
 80027fe:	e7f8      	b.n	80027f2 <__libc_init_array+0xe>
 8002800:	f000 f816 	bl	8002830 <_init>
 8002804:	4c08      	ldr	r4, [pc, #32]	; (8002828 <__libc_init_array+0x44>)
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <__libc_init_array+0x48>)
 8002808:	1ae4      	subs	r4, r4, r3
 800280a:	10a4      	asrs	r4, r4, #2
 800280c:	2500      	movs	r5, #0
 800280e:	461e      	mov	r6, r3
 8002810:	42a5      	cmp	r5, r4
 8002812:	d004      	beq.n	800281e <__libc_init_array+0x3a>
 8002814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002818:	4798      	blx	r3
 800281a:	3501      	adds	r5, #1
 800281c:	e7f8      	b.n	8002810 <__libc_init_array+0x2c>
 800281e:	bd70      	pop	{r4, r5, r6, pc}
 8002820:	080028a8 	.word	0x080028a8
 8002824:	080028a8 	.word	0x080028a8
 8002828:	080028ac 	.word	0x080028ac
 800282c:	080028a8 	.word	0x080028a8

08002830 <_init>:
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002832:	bf00      	nop
 8002834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002836:	bc08      	pop	{r3}
 8002838:	469e      	mov	lr, r3
 800283a:	4770      	bx	lr

0800283c <_fini>:
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283e:	bf00      	nop
 8002840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002842:	bc08      	pop	{r3}
 8002844:	469e      	mov	lr, r3
 8002846:	4770      	bx	lr
