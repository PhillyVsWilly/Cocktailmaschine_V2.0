
C:\Users\Philipp\Documents\Cocktailmaschine_V2.0\Debug\Cocktailmaschine_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08004c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          00002ad4  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002b44  20002b44  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016ad9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000367a  00000000  00000000  00036b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bd1e  00000000  00000000  0003a1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f48  00000000  00000000  00045f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013b0  00000000  00000000  00046e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000866d  00000000  00000000  00048210  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005d5c  00000000  00000000  0005087d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  000565d9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000343c  00000000  00000000  00056658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a90 	.word	0x08004a90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004a90 	.word	0x08004a90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <BSP_LED_On>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <BSP_LED_On+0x10>)
 8000292:	2201      	movs	r2, #1
 8000294:	2120      	movs	r1, #32
 8000296:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800029a:	f000 bcfb 	b.w	8000c94 <HAL_GPIO_WritePin>
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000

080002a4 <BSP_LED_Off>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80002a4:	4b03      	ldr	r3, [pc, #12]	; (80002b4 <BSP_LED_Off+0x10>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	2120      	movs	r1, #32
 80002aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80002ae:	f000 bcf1 	b.w	8000c94 <HAL_GPIO_WritePin>
 80002b2:	bf00      	nop
 80002b4:	20000000 	.word	0x20000000

080002b8 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002ba:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002bc:	6813      	ldr	r3, [r2, #0]
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002c4:	2003      	movs	r0, #3
 80002c6:	f000 fb9d 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ca:	2000      	movs	r0, #0
 80002cc:	f003 f9e2 	bl	8003694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002d0:	f003 f95c 	bl	800358c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80002d4:	2000      	movs	r0, #0
 80002d6:	bd08      	pop	{r3, pc}
 80002d8:	40022000 	.word	0x40022000

080002dc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002dc:	4a02      	ldr	r2, [pc, #8]	; (80002e8 <HAL_IncTick+0xc>)
 80002de:	6813      	ldr	r3, [r2, #0]
 80002e0:	3301      	adds	r3, #1
 80002e2:	6013      	str	r3, [r2, #0]
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20002934 	.word	0x20002934

080002ec <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002ec:	4b01      	ldr	r3, [pc, #4]	; (80002f4 <HAL_GetTick+0x8>)
 80002ee:	6818      	ldr	r0, [r3, #0]
}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20002934 	.word	0x20002934

080002f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80002f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002fa:	6803      	ldr	r3, [r0, #0]
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80002fc:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002fe:	6898      	ldr	r0, [r3, #8]
 8000300:	f000 0003 	and.w	r0, r0, #3
 8000304:	2801      	cmp	r0, #1
 8000306:	d001      	beq.n	800030c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000308:	2000      	movs	r0, #0
 800030a:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	07d2      	lsls	r2, r2, #31
 8000310:	d5fa      	bpl.n	8000308 <ADC_Disable+0x10>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	f002 020d 	and.w	r2, r2, #13
 8000318:	2a01      	cmp	r2, #1
 800031a:	d109      	bne.n	8000330 <ADC_Disable+0x38>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800031c:	689a      	ldr	r2, [r3, #8]
 800031e:	f042 0202 	orr.w	r2, r2, #2
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	2203      	movs	r2, #3
 8000326:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000328:	f7ff ffe0 	bl	80002ec <HAL_GetTick>
 800032c:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800032e:	e008      	b.n	8000342 <ADC_Disable+0x4a>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000330:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000332:	f043 0310 	orr.w	r3, r3, #16
 8000336:	6463      	str	r3, [r4, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000338:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	64a3      	str	r3, [r4, #72]	; 0x48
      
      return HAL_ERROR;
 8000340:	bd38      	pop	{r3, r4, r5, pc}
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000342:	6823      	ldr	r3, [r4, #0]
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	07db      	lsls	r3, r3, #31
 8000348:	d5de      	bpl.n	8000308 <ADC_Disable+0x10>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800034a:	f7ff ffcf 	bl	80002ec <HAL_GetTick>
 800034e:	1b40      	subs	r0, r0, r5
 8000350:	2802      	cmp	r0, #2
 8000352:	d9f6      	bls.n	8000342 <ADC_Disable+0x4a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000354:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800035c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000364:	2001      	movs	r0, #1
 8000366:	bd38      	pop	{r3, r4, r5, pc}

08000368 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000368:	b530      	push	{r4, r5, lr}
 800036a:	b097      	sub	sp, #92	; 0x5c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800036c:	2200      	movs	r2, #0
 800036e:	9200      	str	r2, [sp, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000370:	4604      	mov	r4, r0
 8000372:	2800      	cmp	r0, #0
 8000374:	d066      	beq.n	8000444 <HAL_ADC_Init+0xdc>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000376:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000378:	06d9      	lsls	r1, r3, #27
 800037a:	d447      	bmi.n	800040c <HAL_ADC_Init+0xa4>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800037c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800037e:	b10b      	cbz	r3, 8000384 <HAL_ADC_Init+0x1c>
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000380:	2200      	movs	r2, #0
 8000382:	e031      	b.n	80003e8 <HAL_ADC_Init+0x80>
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000384:	6483      	str	r3, [r0, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000386:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000388:	64c3      	str	r3, [r0, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800038a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 800038e:	f003 f93b 	bl	8003608 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000392:	6823      	ldr	r3, [r4, #0]
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	00db      	lsls	r3, r3, #3
 8000398:	d4f2      	bmi.n	8000380 <HAL_ADC_Init+0x18>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800039a:	4620      	mov	r0, r4
 800039c:	f7ff ffac 	bl	80002f8 <ADC_Disable>
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003a2:	06dd      	lsls	r5, r3, #27
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80003a4:	4602      	mov	r2, r0
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003a6:	d41f      	bmi.n	80003e8 <HAL_ADC_Init+0x80>
 80003a8:	b9f0      	cbnz	r0, 80003e8 <HAL_ADC_Init+0x80>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80003aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003b0:	f023 0302 	bic.w	r3, r3, #2
 80003b4:	f043 0302 	orr.w	r3, r3, #2
 80003b8:	6463      	str	r3, [r4, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80003ba:	6823      	ldr	r3, [r4, #0]
 80003bc:	689a      	ldr	r2, [r3, #8]
 80003be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80003c2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80003c4:	689a      	ldr	r2, [r3, #8]
 80003c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003cc:	4b79      	ldr	r3, [pc, #484]	; (80005b4 <HAL_ADC_Init+0x24c>)
 80003ce:	4a7a      	ldr	r2, [pc, #488]	; (80005b8 <HAL_ADC_Init+0x250>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80003d6:	230a      	movs	r3, #10
 80003d8:	4353      	muls	r3, r2
          while(wait_loop_index != 0U)
          {
            wait_loop_index--;
 80003da:	9300      	str	r3, [sp, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
          while(wait_loop_index != 0U)
 80003dc:	9b00      	ldr	r3, [sp, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0ce      	beq.n	8000380 <HAL_ADC_Init+0x18>
          {
            wait_loop_index--;
 80003e2:	9b00      	ldr	r3, [sp, #0]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	e7f8      	b.n	80003da <HAL_ADC_Init+0x72>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003e8:	6823      	ldr	r3, [r4, #0]
 80003ea:	6899      	ldr	r1, [r3, #8]
 80003ec:	00c9      	lsls	r1, r1, #3
 80003ee:	d502      	bpl.n	80003f6 <HAL_ADC_Init+0x8e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80003f0:	689b      	ldr	r3, [r3, #8]
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003f2:	009d      	lsls	r5, r3, #2
 80003f4:	d50a      	bpl.n	800040c <HAL_ADC_Init+0xa4>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003f8:	f023 0312 	bic.w	r3, r3, #18
 80003fc:	f043 0310 	orr.w	r3, r3, #16
 8000400:	6463      	str	r3, [r4, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000402:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	64a3      	str	r3, [r4, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 800040a:	2201      	movs	r2, #1
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800040c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800040e:	06d8      	lsls	r0, r3, #27
 8000410:	d412      	bmi.n	8000438 <HAL_ADC_Init+0xd0>
 8000412:	b98a      	cbnz	r2, 8000438 <HAL_ADC_Init+0xd0>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000414:	6823      	ldr	r3, [r4, #0]
 8000416:	6899      	ldr	r1, [r3, #8]
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
      (tmp_hal_status == HAL_OK)                                &&
 8000418:	0749      	lsls	r1, r1, #29
 800041a:	d40d      	bmi.n	8000438 <HAL_ADC_Init+0xd0>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800041c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800041e:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000422:	f041 0102 	orr.w	r1, r1, #2
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800042a:	6461      	str	r1, [r4, #68]	; 0x44
 800042c:	4963      	ldr	r1, [pc, #396]	; (80005bc <HAL_ADC_Init+0x254>)
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800042e:	d00b      	beq.n	8000448 <HAL_ADC_Init+0xe0>
 8000430:	428b      	cmp	r3, r1
 8000432:	f040 80aa 	bne.w	800058a <HAL_ADC_Init+0x222>
 8000436:	e0b4      	b.n	80005a2 <HAL_ADC_Init+0x23a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000438:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800043a:	f023 0312 	bic.w	r3, r3, #18
 800043e:	f043 0310 	orr.w	r3, r3, #16
 8000442:	6463      	str	r3, [r4, #68]	; 0x44
  __IO uint32_t wait_loop_index = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000444:	2001      	movs	r0, #1
 8000446:	e0b2      	b.n	80005ae <HAL_ADC_Init+0x246>
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000448:	4a5d      	ldr	r2, [pc, #372]	; (80005c0 <HAL_ADC_Init+0x258>)
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800044a:	9101      	str	r1, [sp, #4]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800044c:	6899      	ldr	r1, [r3, #8]
 800044e:	f001 0103 	and.w	r1, r1, #3
 8000452:	2901      	cmp	r1, #1
 8000454:	d102      	bne.n	800045c <HAL_ADC_Init+0xf4>
 8000456:	6819      	ldr	r1, [r3, #0]
 8000458:	07cd      	lsls	r5, r1, #31
 800045a:	d40d      	bmi.n	8000478 <HAL_ADC_Init+0x110>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800045c:	9901      	ldr	r1, [sp, #4]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800045e:	2900      	cmp	r1, #0
 8000460:	f000 808c 	beq.w	800057c <HAL_ADC_Init+0x214>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000464:	6888      	ldr	r0, [r1, #8]
 8000466:	f000 0003 	and.w	r0, r0, #3
 800046a:	2801      	cmp	r0, #1
 800046c:	f040 8086 	bne.w	800057c <HAL_ADC_Init+0x214>
 8000470:	6809      	ldr	r1, [r1, #0]
 8000472:	07c8      	lsls	r0, r1, #31
 8000474:	f140 8082 	bpl.w	800057c <HAL_ADC_Init+0x214>
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000478:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800047a:	68e5      	ldr	r5, [r4, #12]
 800047c:	69e0      	ldr	r0, [r4, #28]
 800047e:	2a01      	cmp	r2, #1
 8000480:	68a2      	ldr	r2, [r4, #8]
 8000482:	ea42 0205 	orr.w	r2, r2, r5
 8000486:	bf0c      	ite	eq
 8000488:	2100      	moveq	r1, #0
 800048a:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 800048e:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8000492:	4311      	orrs	r1, r2
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000494:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000496:	2a01      	cmp	r2, #1
 8000498:	d111      	bne.n	80004be <HAL_ADC_Init+0x156>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800049a:	b930      	cbnz	r0, 80004aa <HAL_ADC_Init+0x142>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800049c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800049e:	3a01      	subs	r2, #1
 80004a0:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 80004a4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80004a8:	e009      	b.n	80004be <HAL_ADC_Init+0x156>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80004aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80004ac:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80004b0:	f042 0220 	orr.w	r2, r2, #32
 80004b4:	6462      	str	r2, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80004b8:	f042 0201 	orr.w	r2, r2, #1
 80004bc:	64a2      	str	r2, [r4, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80004be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80004c0:	2a01      	cmp	r2, #1
 80004c2:	d02f      	beq.n	8000524 <HAL_ADC_Init+0x1bc>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80004c4:	483f      	ldr	r0, [pc, #252]	; (80005c4 <HAL_ADC_Init+0x25c>)
 80004c6:	4283      	cmp	r3, r0
 80004c8:	d003      	beq.n	80004d2 <HAL_ADC_Init+0x16a>
 80004ca:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80004ce:	4283      	cmp	r3, r0
 80004d0:	d114      	bne.n	80004fc <HAL_ADC_Init+0x194>
 80004d2:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 80004d6:	d014      	beq.n	8000502 <HAL_ADC_Init+0x19a>
 80004d8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80004dc:	d014      	beq.n	8000508 <HAL_ADC_Init+0x1a0>
 80004de:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 80004e2:	d014      	beq.n	800050e <HAL_ADC_Init+0x1a6>
 80004e4:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 80004e8:	d014      	beq.n	8000514 <HAL_ADC_Init+0x1ac>
 80004ea:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 80004ee:	d014      	beq.n	800051a <HAL_ADC_Init+0x1b2>
 80004f0:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 80004f4:	bf08      	it	eq
 80004f6:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80004fa:	e010      	b.n	800051e <HAL_ADC_Init+0x1b6>
 80004fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000500:	e00d      	b.n	800051e <HAL_ADC_Init+0x1b6>
 8000502:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000506:	e00a      	b.n	800051e <HAL_ADC_Init+0x1b6>
 8000508:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800050c:	e007      	b.n	800051e <HAL_ADC_Init+0x1b6>
 800050e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000512:	e004      	b.n	800051e <HAL_ADC_Init+0x1b6>
 8000514:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000518:	e001      	b.n	800051e <HAL_ADC_Init+0x1b6>
 800051a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800051e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000520:	4301      	orrs	r1, r0
 8000522:	4311      	orrs	r1, r2
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000524:	689a      	ldr	r2, [r3, #8]
 8000526:	f012 0f0c 	tst.w	r2, #12
 800052a:	d10b      	bne.n	8000544 <HAL_ADC_Init+0x1dc>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800052c:	68da      	ldr	r2, [r3, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800052e:	69a0      	ldr	r0, [r4, #24]
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000530:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000534:	f022 0202 	bic.w	r2, r2, #2
 8000538:	60da      	str	r2, [r3, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800053a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800053c:	0052      	lsls	r2, r2, #1
 800053e:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8000542:	4311      	orrs	r1, r2
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000544:	68d8      	ldr	r0, [r3, #12]
 8000546:	4a20      	ldr	r2, [pc, #128]	; (80005c8 <HAL_ADC_Init+0x260>)
 8000548:	4002      	ands	r2, r0
 800054a:	4311      	orrs	r1, r2
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800054c:	6922      	ldr	r2, [r4, #16]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800054e:	60d9      	str	r1, [r3, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000550:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000552:	bf08      	it	eq
 8000554:	6a21      	ldreq	r1, [r4, #32]
 8000556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000558:	bf03      	ittte	eq
 800055a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800055e:	f022 020f 	biceq.w	r2, r2, #15
 8000562:	430a      	orreq	r2, r1
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000564:	f022 020f 	bicne.w	r2, r2, #15
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000568:	2000      	movs	r0, #0
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800056a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800056c:	64a0      	str	r0, [r4, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800056e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000570:	f023 0303 	bic.w	r3, r3, #3
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6463      	str	r3, [r4, #68]	; 0x44
 800057a:	e018      	b.n	80005ae <HAL_ADC_Init+0x246>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800057c:	6891      	ldr	r1, [r2, #8]
 800057e:	f421 3040 	bic.w	r0, r1, #196608	; 0x30000
 8000582:	6861      	ldr	r1, [r4, #4]
 8000584:	4301      	orrs	r1, r0
 8000586:	6091      	str	r1, [r2, #8]
 8000588:	e776      	b.n	8000478 <HAL_ADC_Init+0x110>
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800058a:	480e      	ldr	r0, [pc, #56]	; (80005c4 <HAL_ADC_Init+0x25c>)
 800058c:	490f      	ldr	r1, [pc, #60]	; (80005cc <HAL_ADC_Init+0x264>)
 800058e:	4283      	cmp	r3, r0
 8000590:	d101      	bne.n	8000596 <HAL_ADC_Init+0x22e>
 8000592:	9101      	str	r1, [sp, #4]
 8000594:	e003      	b.n	800059e <HAL_ADC_Init+0x236>
 8000596:	428b      	cmp	r3, r1
 8000598:	bf0c      	ite	eq
 800059a:	9001      	streq	r0, [sp, #4]
 800059c:	9201      	strne	r2, [sp, #4]
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800059e:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <HAL_ADC_Init+0x268>)
 80005a0:	e754      	b.n	800044c <HAL_ADC_Init+0xe4>
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80005a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005a6:	9201      	str	r2, [sp, #4]
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80005a8:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80005ac:	e74e      	b.n	800044c <HAL_ADC_Init+0xe4>
  }
  
  
  /* Return function status */
  return tmp_hal_status;
}
 80005ae:	b017      	add	sp, #92	; 0x5c
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop
 80005b4:	20000008 	.word	0x20000008
 80005b8:	000f4240 	.word	0x000f4240
 80005bc:	50000100 	.word	0x50000100
 80005c0:	50000300 	.word	0x50000300
 80005c4:	50000400 	.word	0x50000400
 80005c8:	fff0c007 	.word	0xfff0c007
 80005cc:	50000500 	.word	0x50000500
 80005d0:	50000700 	.word	0x50000700

080005d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	b097      	sub	sp, #92	; 0x5c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80005d8:	2300      	movs	r3, #0
 80005da:	9300      	str	r3, [sp, #0]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	f000 80eb 	beq.w	80007bc <HAL_ADC_ConfigChannel+0x1e8>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005e6:	6803      	ldr	r3, [r0, #0]
 80005e8:	689c      	ldr	r4, [r3, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005ea:	2201      	movs	r2, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005ec:	0767      	lsls	r7, r4, #29
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005ee:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005f2:	f100 80d9 	bmi.w	80007a8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80005f6:	684d      	ldr	r5, [r1, #4]
 80005f8:	680c      	ldr	r4, [r1, #0]
 80005fa:	2d04      	cmp	r5, #4
 80005fc:	f04f 0206 	mov.w	r2, #6
 8000600:	d80a      	bhi.n	8000618 <HAL_ADC_ConfigChannel+0x44>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000602:	436a      	muls	r2, r5
 8000604:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000606:	251f      	movs	r5, #31
 8000608:	4095      	lsls	r5, r2
 800060a:	ea26 0505 	bic.w	r5, r6, r5
 800060e:	fa04 f202 	lsl.w	r2, r4, r2
 8000612:	432a      	orrs	r2, r5
 8000614:	631a      	str	r2, [r3, #48]	; 0x30
 8000616:	e026      	b.n	8000666 <HAL_ADC_ConfigChannel+0x92>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000618:	2d09      	cmp	r5, #9
 800061a:	d80b      	bhi.n	8000634 <HAL_ADC_ConfigChannel+0x60>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800061c:	436a      	muls	r2, r5
 800061e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8000620:	3a1e      	subs	r2, #30
 8000622:	251f      	movs	r5, #31
 8000624:	4095      	lsls	r5, r2
 8000626:	ea26 0505 	bic.w	r5, r6, r5
 800062a:	fa04 f202 	lsl.w	r2, r4, r2
 800062e:	432a      	orrs	r2, r5
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
 8000632:	e018      	b.n	8000666 <HAL_ADC_ConfigChannel+0x92>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000634:	2d0e      	cmp	r5, #14
 8000636:	d80b      	bhi.n	8000650 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000638:	436a      	muls	r2, r5
 800063a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800063c:	3a3c      	subs	r2, #60	; 0x3c
 800063e:	251f      	movs	r5, #31
 8000640:	4095      	lsls	r5, r2
 8000642:	ea26 0505 	bic.w	r5, r6, r5
 8000646:	fa04 f202 	lsl.w	r2, r4, r2
 800064a:	432a      	orrs	r2, r5
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
 800064e:	e00a      	b.n	8000666 <HAL_ADC_ConfigChannel+0x92>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000650:	436a      	muls	r2, r5
 8000652:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8000654:	3a5a      	subs	r2, #90	; 0x5a
 8000656:	251f      	movs	r5, #31
 8000658:	4095      	lsls	r5, r2
 800065a:	ea26 0505 	bic.w	r5, r6, r5
 800065e:	fa04 f202 	lsl.w	r2, r4, r2
 8000662:	432a      	orrs	r2, r5
 8000664:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	f012 0f0c 	tst.w	r2, #12
 800066c:	d178      	bne.n	8000760 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800066e:	2c09      	cmp	r4, #9
 8000670:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8000674:	688e      	ldr	r6, [r1, #8]
 8000676:	d90c      	bls.n	8000692 <HAL_ADC_ConfigChannel+0xbe>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000678:	1915      	adds	r5, r2, r4
 800067a:	f1a5 021e 	sub.w	r2, r5, #30
 800067e:	699f      	ldr	r7, [r3, #24]
 8000680:	2507      	movs	r5, #7
 8000682:	4095      	lsls	r5, r2
 8000684:	ea27 0505 	bic.w	r5, r7, r5
 8000688:	fa06 f202 	lsl.w	r2, r6, r2
 800068c:	432a      	orrs	r2, r5
 800068e:	619a      	str	r2, [r3, #24]
 8000690:	e009      	b.n	80006a6 <HAL_ADC_ConfigChannel+0xd2>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000692:	695f      	ldr	r7, [r3, #20]
 8000694:	4422      	add	r2, r4
 8000696:	2507      	movs	r5, #7
 8000698:	4095      	lsls	r5, r2
 800069a:	ea27 0505 	bic.w	r5, r7, r5
 800069e:	fa06 f202 	lsl.w	r2, r6, r2
 80006a2:	432a      	orrs	r2, r5
 80006a4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80006a6:	68da      	ldr	r2, [r3, #12]
 80006a8:	694f      	ldr	r7, [r1, #20]
 80006aa:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	4097      	lsls	r7, r2
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80006b2:	690a      	ldr	r2, [r1, #16]
 80006b4:	3a01      	subs	r2, #1
 80006b6:	ea4f 6e84 	mov.w	lr, r4, lsl #26
 80006ba:	2a03      	cmp	r2, #3
 80006bc:	d82c      	bhi.n	8000718 <HAL_ADC_ConfigChannel+0x144>
 80006be:	e8df f002 	tbb	[pc, r2]
 80006c2:	0d02      	.short	0x0d02
 80006c4:	2218      	.short	0x2218
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80006c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006c8:	4e81      	ldr	r6, [pc, #516]	; (80008d0 <HAL_ADC_ConfigChannel+0x2fc>)
 80006ca:	4016      	ands	r6, r2
 80006cc:	ea46 060e 	orr.w	r6, r6, lr
 80006d0:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80006d4:	ea46 0207 	orr.w	r2, r6, r7
 80006d8:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80006da:	e041      	b.n	8000760 <HAL_ADC_ConfigChannel+0x18c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80006dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80006de:	4d7c      	ldr	r5, [pc, #496]	; (80008d0 <HAL_ADC_ConfigChannel+0x2fc>)
 80006e0:	4015      	ands	r5, r2
 80006e2:	ea45 050e 	orr.w	r5, r5, lr
 80006e6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80006ea:	ea45 0207 	orr.w	r2, r5, r7
 80006ee:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80006f0:	e036      	b.n	8000760 <HAL_ADC_ConfigChannel+0x18c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80006f2:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 80006f4:	4a76      	ldr	r2, [pc, #472]	; (80008d0 <HAL_ADC_ConfigChannel+0x2fc>)
 80006f6:	402a      	ands	r2, r5
 80006f8:	ea42 020e 	orr.w	r2, r2, lr
 80006fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000700:	433a      	orrs	r2, r7
 8000702:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000704:	e02c      	b.n	8000760 <HAL_ADC_ConfigChannel+0x18c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000706:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8000708:	4a71      	ldr	r2, [pc, #452]	; (80008d0 <HAL_ADC_ConfigChannel+0x2fc>)
 800070a:	402a      	ands	r2, r5
 800070c:	ea42 020e 	orr.w	r2, r2, lr
 8000710:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000714:	433a      	orrs	r2, r7
 8000716:	e022      	b.n	800075e <HAL_ADC_ConfigChannel+0x18a>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000718:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800071a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800071e:	4572      	cmp	r2, lr
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000720:	bf02      	ittt	eq
 8000722:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000724:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000728:	661a      	streq	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800072a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800072c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000730:	4596      	cmp	lr, r2
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000732:	bf02      	ittt	eq
 8000734:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000736:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800073a:	665a      	streq	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800073c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800073e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000742:	4596      	cmp	lr, r2
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000744:	bf02      	ittt	eq
 8000746:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000748:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800074c:	669a      	streq	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800074e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000750:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000754:	4596      	cmp	lr, r2
 8000756:	d103      	bne.n	8000760 <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000758:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800075a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800075e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000760:	689a      	ldr	r2, [r3, #8]
 8000762:	f002 0203 	and.w	r2, r2, #3
 8000766:	2a01      	cmp	r2, #1
 8000768:	d102      	bne.n	8000770 <HAL_ADC_ConfigChannel+0x19c>
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	07d6      	lsls	r6, r2, #31
 800076e:	d419      	bmi.n	80007a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000770:	68ca      	ldr	r2, [r1, #12]
 8000772:	2a01      	cmp	r2, #1
 8000774:	d024      	beq.n	80007c0 <HAL_ADC_ConfigChannel+0x1ec>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000776:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800077a:	2201      	movs	r2, #1
 800077c:	40a2      	lsls	r2, r4
 800077e:	ea21 0202 	bic.w	r2, r1, r2
 8000782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800078a:	d03d      	beq.n	8000808 <HAL_ADC_ConfigChannel+0x234>
 800078c:	4951      	ldr	r1, [pc, #324]	; (80008d4 <HAL_ADC_ConfigChannel+0x300>)
 800078e:	4a52      	ldr	r2, [pc, #328]	; (80008d8 <HAL_ADC_ConfigChannel+0x304>)
 8000790:	4d52      	ldr	r5, [pc, #328]	; (80008dc <HAL_ADC_ConfigChannel+0x308>)
 8000792:	42ab      	cmp	r3, r5
 8000794:	bf08      	it	eq
 8000796:	460a      	moveq	r2, r1
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000798:	2c10      	cmp	r4, #16
 800079a:	d137      	bne.n	800080c <HAL_ADC_ConfigChannel+0x238>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800079c:	6891      	ldr	r1, [r2, #8]
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800079e:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80007a2:	d03f      	beq.n	8000824 <HAL_ADC_ConfigChannel+0x250>
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e004      	b.n	80007b2 <HAL_ADC_ConfigChannel+0x1de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	6443      	str	r3, [r0, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80007b0:	4613      	mov	r3, r2
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 80007b8:	4618      	mov	r0, r3
 80007ba:	e087      	b.n	80008cc <HAL_ADC_ConfigChannel+0x2f8>
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007bc:	2002      	movs	r0, #2
 80007be:	e085      	b.n	80008cc <HAL_ADC_ConfigChannel+0x2f8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80007c0:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 80007c4:	40a2      	lsls	r2, r4
 80007c6:	432a      	orrs	r2, r5
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80007c8:	2c09      	cmp	r4, #9
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80007ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80007ce:	688d      	ldr	r5, [r1, #8]
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80007d0:	d90d      	bls.n	80007ee <HAL_ADC_ConfigChannel+0x21a>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80007d2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80007d6:	f1a1 021b 	sub.w	r2, r1, #27
 80007da:	699e      	ldr	r6, [r3, #24]
 80007dc:	2107      	movs	r1, #7
 80007de:	4091      	lsls	r1, r2
 80007e0:	ea26 0101 	bic.w	r1, r6, r1
 80007e4:	fa05 f202 	lsl.w	r2, r5, r2
 80007e8:	430a      	orrs	r2, r1
 80007ea:	619a      	str	r2, [r3, #24]
 80007ec:	e7cb      	b.n	8000786 <HAL_ADC_ConfigChannel+0x1b2>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80007ee:	1c62      	adds	r2, r4, #1
 80007f0:	695e      	ldr	r6, [r3, #20]
 80007f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80007f6:	2107      	movs	r1, #7
 80007f8:	4091      	lsls	r1, r2
 80007fa:	ea26 0101 	bic.w	r1, r6, r1
 80007fe:	fa05 f202 	lsl.w	r2, r5, r2
 8000802:	430a      	orrs	r2, r1
 8000804:	615a      	str	r2, [r3, #20]
 8000806:	e7be      	b.n	8000786 <HAL_ADC_ConfigChannel+0x1b2>
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000808:	4a32      	ldr	r2, [pc, #200]	; (80008d4 <HAL_ADC_ConfigChannel+0x300>)
 800080a:	e7c5      	b.n	8000798 <HAL_ADC_ConfigChannel+0x1c4>
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800080c:	2c11      	cmp	r4, #17
 800080e:	d103      	bne.n	8000818 <HAL_ADC_ConfigChannel+0x244>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000810:	6891      	ldr	r1, [r2, #8]
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000812:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8000816:	e7c4      	b.n	80007a2 <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000818:	2c12      	cmp	r4, #18
 800081a:	d1c3      	bne.n	80007a4 <HAL_ADC_ConfigChannel+0x1d0>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800081c:	6891      	ldr	r1, [r2, #8]
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800081e:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8000822:	e7be      	b.n	80007a2 <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000828:	492c      	ldr	r1, [pc, #176]	; (80008dc <HAL_ADC_ConfigChannel+0x308>)
 800082a:	d00d      	beq.n	8000848 <HAL_ADC_ConfigChannel+0x274>
 800082c:	428b      	cmp	r3, r1
 800082e:	d102      	bne.n	8000836 <HAL_ADC_ConfigChannel+0x262>
 8000830:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000834:	e008      	b.n	8000848 <HAL_ADC_ConfigChannel+0x274>
 8000836:	492a      	ldr	r1, [pc, #168]	; (80008e0 <HAL_ADC_ConfigChannel+0x30c>)
 8000838:	4d2a      	ldr	r5, [pc, #168]	; (80008e4 <HAL_ADC_ConfigChannel+0x310>)
 800083a:	428b      	cmp	r3, r1
 800083c:	d101      	bne.n	8000842 <HAL_ADC_ConfigChannel+0x26e>
 800083e:	9501      	str	r5, [sp, #4]
 8000840:	e003      	b.n	800084a <HAL_ADC_ConfigChannel+0x276>
 8000842:	42ab      	cmp	r3, r5
 8000844:	bf18      	it	ne
 8000846:	2100      	movne	r1, #0
 8000848:	9101      	str	r1, [sp, #4]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800084a:	6899      	ldr	r1, [r3, #8]
 800084c:	f001 0103 	and.w	r1, r1, #3
 8000850:	2901      	cmp	r1, #1
 8000852:	d102      	bne.n	800085a <HAL_ADC_ConfigChannel+0x286>
 8000854:	6819      	ldr	r1, [r3, #0]
 8000856:	07cd      	lsls	r5, r1, #31
 8000858:	d409      	bmi.n	800086e <HAL_ADC_ConfigChannel+0x29a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800085a:	9901      	ldr	r1, [sp, #4]
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800085c:	b169      	cbz	r1, 800087a <HAL_ADC_ConfigChannel+0x2a6>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800085e:	688d      	ldr	r5, [r1, #8]
 8000860:	f005 0503 	and.w	r5, r5, #3
 8000864:	2d01      	cmp	r5, #1
 8000866:	d108      	bne.n	800087a <HAL_ADC_ConfigChannel+0x2a6>
 8000868:	6809      	ldr	r1, [r1, #0]
 800086a:	07c9      	lsls	r1, r1, #31
 800086c:	d505      	bpl.n	800087a <HAL_ADC_ConfigChannel+0x2a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800086e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000870:	f043 0320 	orr.w	r3, r3, #32
 8000874:	6443      	str	r3, [r0, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e79b      	b.n	80007b2 <HAL_ADC_ConfigChannel+0x1de>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800087a:	2c10      	cmp	r4, #16
 800087c:	d114      	bne.n	80008a8 <HAL_ADC_ConfigChannel+0x2d4>
 800087e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000882:	d18f      	bne.n	80007a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000884:	6893      	ldr	r3, [r2, #8]
 8000886:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800088a:	6093      	str	r3, [r2, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_ADC_ConfigChannel+0x314>)
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_ADC_ConfigChannel+0x318>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	fbb3 f2f2 	udiv	r2, r3, r2
 8000896:	230a      	movs	r3, #10
 8000898:	4353      	muls	r3, r2
          while(wait_loop_index != 0U)
          {
            wait_loop_index--;
 800089a:	9300      	str	r3, [sp, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
          while(wait_loop_index != 0U)
 800089c:	9b00      	ldr	r3, [sp, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d080      	beq.n	80007a4 <HAL_ADC_ConfigChannel+0x1d0>
          {
            wait_loop_index--;
 80008a2:	9b00      	ldr	r3, [sp, #0]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	e7f8      	b.n	800089a <HAL_ADC_ConfigChannel+0x2c6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80008a8:	2c11      	cmp	r4, #17
 80008aa:	d107      	bne.n	80008bc <HAL_ADC_ConfigChannel+0x2e8>
 80008ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008b0:	f47f af78 	bne.w	80007a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80008b4:	6893      	ldr	r3, [r2, #8]
 80008b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008ba:	e005      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x2f4>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80008bc:	2c12      	cmp	r4, #18
 80008be:	f47f af71 	bne.w	80007a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80008c2:	6893      	ldr	r3, [r2, #8]
 80008c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008c8:	6093      	str	r3, [r2, #8]
 80008ca:	e76b      	b.n	80007a4 <HAL_ADC_ConfigChannel+0x1d0>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 80008cc:	b017      	add	sp, #92	; 0x5c
 80008ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d0:	83fff000 	.word	0x83fff000
 80008d4:	50000300 	.word	0x50000300
 80008d8:	50000700 	.word	0x50000700
 80008dc:	50000100 	.word	0x50000100
 80008e0:	50000400 	.word	0x50000400
 80008e4:	50000500 	.word	0x50000500
 80008e8:	20000008 	.word	0x20000008
 80008ec:	000f4240 	.word	0x000f4240

080008f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80008f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008f2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80008f6:	2b01      	cmp	r3, #1
  * @param  hadc: ADC handle
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80008f8:	b097      	sub	sp, #92	; 0x5c
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008fa:	d053      	beq.n	80009a4 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
  
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80008fc:	6802      	ldr	r2, [r0, #0]
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008fe:	2301      	movs	r3, #1
  
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000900:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000904:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8000908:	4b39      	ldr	r3, [pc, #228]	; (80009f0 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
  
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800090a:	d00d      	beq.n	8000928 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 800090c:	429a      	cmp	r2, r3
 800090e:	d102      	bne.n	8000916 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000910:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000914:	e008      	b.n	8000928 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8000916:	4b37      	ldr	r3, [pc, #220]	; (80009f4 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8000918:	4c37      	ldr	r4, [pc, #220]	; (80009f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 800091a:	429a      	cmp	r2, r3
 800091c:	d101      	bne.n	8000922 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800091e:	9401      	str	r4, [sp, #4]
 8000920:	e003      	b.n	800092a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8000922:	42a2      	cmp	r2, r4
 8000924:	bf18      	it	ne
 8000926:	2300      	movne	r3, #0
 8000928:	9301      	str	r3, [sp, #4]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800092a:	6893      	ldr	r3, [r2, #8]
 800092c:	075f      	lsls	r7, r3, #29
 800092e:	d42f      	bmi.n	8000990 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000930:	9c01      	ldr	r4, [sp, #4]
 8000932:	68a3      	ldr	r3, [r4, #8]
 8000934:	075e      	lsls	r6, r3, #29
 8000936:	d42b      	bmi.n	8000990 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000938:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800093c:	d006      	beq.n	800094c <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 800093e:	4d2f      	ldr	r5, [pc, #188]	; (80009fc <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000940:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8000942:	4e2b      	ldr	r6, [pc, #172]	; (80009f0 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8000944:	42b2      	cmp	r2, r6
 8000946:	bf08      	it	eq
 8000948:	462b      	moveq	r3, r5
 800094a:	e000      	b.n	800094e <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 800094c:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800094e:	680f      	ldr	r7, [r1, #0]
 8000950:	b18f      	cbz	r7, 8000976 <HAL_ADCEx_MultiModeConfigChannel+0x86>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000952:	689d      	ldr	r5, [r3, #8]
 8000954:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000956:	f425 4560 	bic.w	r5, r5, #57344	; 0xe000
 800095a:	ea45 3546 	orr.w	r5, r5, r6, lsl #13
 800095e:	684e      	ldr	r6, [r1, #4]
 8000960:	4335      	orrs	r5, r6
 8000962:	609d      	str	r5, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000964:	6895      	ldr	r5, [r2, #8]
 8000966:	f005 0503 	and.w	r5, r5, #3
 800096a:	2d01      	cmp	r5, #1
 800096c:	d11c      	bne.n	80009a8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 800096e:	6812      	ldr	r2, [r2, #0]
 8000970:	07d5      	lsls	r5, r2, #31
 8000972:	d519      	bpl.n	80009a8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8000974:	e038      	b.n	80009e8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000976:	6899      	ldr	r1, [r3, #8]
 8000978:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800097c:	6099      	str	r1, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800097e:	6891      	ldr	r1, [r2, #8]
 8000980:	f001 0103 	and.w	r1, r1, #3
 8000984:	2901      	cmp	r1, #1
 8000986:	d121      	bne.n	80009cc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	07d1      	lsls	r1, r2, #31
 800098c:	d42c      	bmi.n	80009e8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 800098e:	e01d      	b.n	80009cc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000990:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000992:	f043 0320 	orr.w	r3, r3, #32
 8000996:	6443      	str	r3, [r0, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800099a:	2200      	movs	r2, #0
 800099c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 80009a0:	4618      	mov	r0, r3
 80009a2:	e023      	b.n	80009ec <HAL_ADCEx_MultiModeConfigChannel+0xfc>
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009a4:	2002      	movs	r0, #2
 80009a6:	e021      	b.n	80009ec <HAL_ADCEx_MultiModeConfigChannel+0xfc>
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80009a8:	68a5      	ldr	r5, [r4, #8]
 80009aa:	f005 0503 	and.w	r5, r5, #3
 80009ae:	2d01      	cmp	r5, #1
 80009b0:	d102      	bne.n	80009b8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 80009b2:	6822      	ldr	r2, [r4, #0]
 80009b4:	07d4      	lsls	r4, r2, #31
 80009b6:	d417      	bmi.n	80009e8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80009b8:	688a      	ldr	r2, [r1, #8]
 80009ba:	689c      	ldr	r4, [r3, #8]
 80009bc:	ea47 0102 	orr.w	r1, r7, r2
 80009c0:	f424 6271 	bic.w	r2, r4, #3856	; 0xf10
 80009c4:	f022 020f 	bic.w	r2, r2, #15
 80009c8:	430a      	orrs	r2, r1
 80009ca:	e00c      	b.n	80009e6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80009cc:	68a2      	ldr	r2, [r4, #8]
 80009ce:	f002 0203 	and.w	r2, r2, #3
 80009d2:	2a01      	cmp	r2, #1
 80009d4:	d102      	bne.n	80009dc <HAL_ADCEx_MultiModeConfigChannel+0xec>
 80009d6:	6822      	ldr	r2, [r4, #0]
 80009d8:	07d2      	lsls	r2, r2, #31
 80009da:	d405      	bmi.n	80009e8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80009e2:	f022 020f 	bic.w	r2, r2, #15
 80009e6:	609a      	str	r2, [r3, #8]
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	e7d6      	b.n	800099a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
} 
 80009ec:	b017      	add	sp, #92	; 0x5c
 80009ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f0:	50000100 	.word	0x50000100
 80009f4:	50000400 	.word	0x50000400
 80009f8:	50000500 	.word	0x50000500
 80009fc:	50000300 	.word	0x50000300
 8000a00:	50000700 	.word	0x50000700

08000a04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a06:	68d3      	ldr	r3, [r2, #12]
 8000a08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a0c:	041b      	lsls	r3, r3, #16
 8000a0e:	0c1b      	lsrs	r3, r3, #16
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000a14:	0200      	lsls	r0, r0, #8
 8000a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000a1e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000a20:	60d3      	str	r3, [r2, #12]
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_NVIC_SetPriority+0x60>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a32:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a38:	2c04      	cmp	r4, #4
 8000a3a:	bf28      	it	cs
 8000a3c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	2d06      	cmp	r5, #6

  return (
 8000a40:	f04f 0501 	mov.w	r5, #1
 8000a44:	fa05 f404 	lsl.w	r4, r5, r4
 8000a48:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4c:	bf8c      	ite	hi
 8000a4e:	3b03      	subhi	r3, #3
 8000a50:	2300      	movls	r3, #0

  return (
 8000a52:	400c      	ands	r4, r1
 8000a54:	409c      	lsls	r4, r3
 8000a56:	fa05 f303 	lsl.w	r3, r5, r3
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000a5e:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000a60:	ea42 0204 	orr.w	r2, r2, r4
 8000a64:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	bfaf      	iteee	ge
 8000a6a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	f000 000f 	andlt.w	r0, r0, #15
 8000a72:	4b06      	ldrlt	r3, [pc, #24]	; (8000a8c <HAL_NVIC_SetPriority+0x64>)
 8000a74:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	bfa5      	ittet	ge
 8000a78:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000a7c:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a84:	bd30      	pop	{r4, r5, pc}
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	e000ed14 	.word	0xe000ed14

08000a90 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a90:	0942      	lsrs	r2, r0, #5
 8000a92:	2301      	movs	r3, #1
 8000a94:	f000 001f 	and.w	r0, r0, #31
 8000a98:	fa03 f000 	lsl.w	r0, r3, r0
 8000a9c:	4b01      	ldr	r3, [pc, #4]	; (8000aa4 <HAL_NVIC_EnableIRQ+0x14>)
 8000a9e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aae:	d20a      	bcs.n	8000ac6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab4:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	21f0      	movs	r1, #240	; 0xf0
 8000ab8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e010 	.word	0xe000e010
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ad6:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ad8:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ada:	bf0c      	ite	eq
 8000adc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ae0:	f022 0204 	bicne.w	r2, r2, #4
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af0:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8000c8c <HAL_GPIO_Init+0x1a0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000af4:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	f8df c198 	ldr.w	ip, [pc, #408]	; 8000c90 <HAL_GPIO_Init+0x1a4>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000afa:	b085      	sub	sp, #20
 8000afc:	4644      	mov	r4, r8
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000afe:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8000b00:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b02:	9a01      	ldr	r2, [sp, #4]
 8000b04:	40da      	lsrs	r2, r3
 8000b06:	f000 80bc 	beq.w	8000c82 <HAL_GPIO_Init+0x196>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b0a:	f04f 0e01 	mov.w	lr, #1

    if(iocurrent)
 8000b0e:	9a01      	ldr	r2, [sp, #4]

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b10:	fa0e fe03 	lsl.w	lr, lr, r3

    if(iocurrent)
 8000b14:	ea12 060e 	ands.w	r6, r2, lr
 8000b18:	f000 80b1 	beq.w	8000c7e <HAL_GPIO_Init+0x192>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b1c:	684a      	ldr	r2, [r1, #4]
 8000b1e:	f022 0910 	bic.w	r9, r2, #16
 8000b22:	f1b9 0f02 	cmp.w	r9, #2
 8000b26:	d114      	bne.n	8000b52 <HAL_GPIO_Init+0x66>
 8000b28:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b2c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b30:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000b34:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b38:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b3c:	250f      	movs	r5, #15
 8000b3e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b42:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b46:	690f      	ldr	r7, [r1, #16]
 8000b48:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b4c:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8000b4e:	f8ca 7020 	str.w	r7, [sl, #32]
 8000b52:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b56:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b58:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b5a:	fa05 f50a 	lsl.w	r5, r5, sl
 8000b5e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b60:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b64:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b66:	fa0b fb0a 	lsl.w	fp, fp, sl
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b6a:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b6e:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b72:	f1b9 0f01 	cmp.w	r9, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000b76:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b78:	d811      	bhi.n	8000b9e <HAL_GPIO_Init+0xb2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b7a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b7c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b80:	68cf      	ldr	r7, [r1, #12]
 8000b82:	fa07 f70a 	lsl.w	r7, r7, sl
 8000b86:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000b8a:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b8e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b92:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000b96:	409f      	lsls	r7, r3
 8000b98:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b9c:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b9e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ba0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba2:	688f      	ldr	r7, [r1, #8]
 8000ba4:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ba8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000baa:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bac:	00d5      	lsls	r5, r2, #3
 8000bae:	d566      	bpl.n	8000c7e <HAL_GPIO_Init+0x192>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb0:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000bb4:	f045 0501 	orr.w	r5, r5, #1
 8000bb8:	f8cc 5018 	str.w	r5, [ip, #24]
 8000bbc:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000bc0:	f023 0e03 	bic.w	lr, r3, #3
 8000bc4:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000bc8:	f005 0501 	and.w	r5, r5, #1
 8000bcc:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000bd0:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000bd2:	f003 0903 	and.w	r9, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000bd8:	f8de 7008 	ldr.w	r7, [lr, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000bdc:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000be0:	250f      	movs	r5, #15
 8000be2:	fa05 f509 	lsl.w	r5, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000be6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000bea:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bee:	d019      	beq.n	8000c24 <HAL_GPIO_Init+0x138>
 8000bf0:	4d25      	ldr	r5, [pc, #148]	; (8000c88 <HAL_GPIO_Init+0x19c>)
 8000bf2:	42a8      	cmp	r0, r5
 8000bf4:	d018      	beq.n	8000c28 <HAL_GPIO_Init+0x13c>
 8000bf6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bfa:	42a8      	cmp	r0, r5
 8000bfc:	d016      	beq.n	8000c2c <HAL_GPIO_Init+0x140>
 8000bfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c02:	42a8      	cmp	r0, r5
 8000c04:	d014      	beq.n	8000c30 <HAL_GPIO_Init+0x144>
 8000c06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c0a:	42a8      	cmp	r0, r5
 8000c0c:	d012      	beq.n	8000c34 <HAL_GPIO_Init+0x148>
 8000c0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c12:	42a8      	cmp	r0, r5
 8000c14:	d010      	beq.n	8000c38 <HAL_GPIO_Init+0x14c>
 8000c16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c1a:	42a8      	cmp	r0, r5
 8000c1c:	bf14      	ite	ne
 8000c1e:	2507      	movne	r5, #7
 8000c20:	2506      	moveq	r5, #6
 8000c22:	e00a      	b.n	8000c3a <HAL_GPIO_Init+0x14e>
 8000c24:	2500      	movs	r5, #0
 8000c26:	e008      	b.n	8000c3a <HAL_GPIO_Init+0x14e>
 8000c28:	2501      	movs	r5, #1
 8000c2a:	e006      	b.n	8000c3a <HAL_GPIO_Init+0x14e>
 8000c2c:	2502      	movs	r5, #2
 8000c2e:	e004      	b.n	8000c3a <HAL_GPIO_Init+0x14e>
 8000c30:	2503      	movs	r5, #3
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x14e>
 8000c34:	2504      	movs	r5, #4
 8000c36:	e000      	b.n	8000c3a <HAL_GPIO_Init+0x14e>
 8000c38:	2505      	movs	r5, #5
 8000c3a:	fa05 f509 	lsl.w	r5, r5, r9
 8000c3e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c40:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c44:	f8d8 5000 	ldr.w	r5, [r8]
        temp &= ~((uint32_t)iocurrent);
 8000c48:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c4a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000c4e:	bf0c      	ite	eq
 8000c50:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000c52:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000c54:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000c56:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c58:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000c5c:	bf0c      	ite	eq
 8000c5e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000c60:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000c62:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c64:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c66:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000c6a:	bf0c      	ite	eq
 8000c6c:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000c6e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000c70:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000c72:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c74:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000c76:	bf54      	ite	pl
 8000c78:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000c7a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000c7c:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 8000c7e:	3301      	adds	r3, #1
 8000c80:	e73f      	b.n	8000b02 <HAL_GPIO_Init+0x16>
  }
}
 8000c82:	b005      	add	sp, #20
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	40010400 	.word	0x40010400
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c94:	b10a      	cbz	r2, 8000c9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c96:	6181      	str	r1, [r0, #24]
 8000c98:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c9a:	6281      	str	r1, [r0, #40]	; 0x28
 8000c9c:	4770      	bx	lr
	...

08000ca0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca0:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	07df      	lsls	r7, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca8:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000caa:	d403      	bmi.n	8000cb4 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cac:	682b      	ldr	r3, [r5, #0]
 8000cae:	079e      	lsls	r6, r3, #30
 8000cb0:	d47b      	bmi.n	8000daa <HAL_RCC_OscConfig+0x10a>
 8000cb2:	e100      	b.n	8000eb6 <HAL_RCC_OscConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb4:	4cb5      	ldr	r4, [pc, #724]	; (8000f8c <HAL_RCC_OscConfig+0x2ec>)
 8000cb6:	6863      	ldr	r3, [r4, #4]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d00a      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x36>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc0:	6863      	ldr	r3, [r4, #4]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d11a      	bne.n	8000d00 <HAL_RCC_OscConfig+0x60>
 8000cca:	6863      	ldr	r3, [r4, #4]
 8000ccc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd4:	d114      	bne.n	8000d00 <HAL_RCC_OscConfig+0x60>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cda:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cde:	6821      	ldr	r1, [r4, #0]
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	f003 031f 	and.w	r3, r3, #31
 8000cec:	2201      	movs	r2, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	420b      	tst	r3, r1
 8000cf4:	d0da      	beq.n	8000cac <HAL_RCC_OscConfig+0xc>
 8000cf6:	686b      	ldr	r3, [r5, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1d7      	bne.n	8000cac <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	e254      	b.n	80011aa <HAL_RCC_OscConfig+0x50a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d00:	686b      	ldr	r3, [r5, #4]
 8000d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d06:	d016      	beq.n	8000d36 <HAL_RCC_OscConfig+0x96>
 8000d08:	b973      	cbnz	r3, 8000d28 <HAL_RCC_OscConfig+0x88>
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d10:	6023      	str	r3, [r4, #0]
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d18:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fae7 	bl	80002ec <HAL_GetTick>
 8000d1e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000d22:	4680      	mov	r8, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d24:	2701      	movs	r7, #1
 8000d26:	e032      	b.n	8000d8e <HAL_RCC_OscConfig+0xee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	d106      	bne.n	8000d3e <HAL_RCC_OscConfig+0x9e>
 8000d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d34:	6023      	str	r3, [r4, #0]
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3c:	e005      	b.n	8000d4a <HAL_RCC_OscConfig+0xaa>
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6023      	str	r3, [r4, #0]
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4a:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff face 	bl	80002ec <HAL_GetTick>
 8000d50:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000d54:	4680      	mov	r8, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	2701      	movs	r7, #1
 8000d58:	fa96 f3a6 	rbit	r3, r6
 8000d5c:	6822      	ldr	r2, [r4, #0]
 8000d5e:	fa96 f3a6 	rbit	r3, r6
 8000d62:	fab3 f383 	clz	r3, r3
 8000d66:	f003 031f 	and.w	r3, r3, #31
 8000d6a:	fa07 f303 	lsl.w	r3, r7, r3
 8000d6e:	4213      	tst	r3, r2
 8000d70:	d19c      	bne.n	8000cac <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d72:	f7ff fabb 	bl	80002ec <HAL_GetTick>
 8000d76:	ebc8 0000 	rsb	r0, r8, r0
 8000d7a:	2864      	cmp	r0, #100	; 0x64
 8000d7c:	d9ec      	bls.n	8000d58 <HAL_RCC_OscConfig+0xb8>
          {
            return HAL_TIMEOUT;
 8000d7e:	2003      	movs	r0, #3
 8000d80:	e213      	b.n	80011aa <HAL_RCC_OscConfig+0x50a>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d82:	f7ff fab3 	bl	80002ec <HAL_GetTick>
 8000d86:	ebc8 0000 	rsb	r0, r8, r0
 8000d8a:	2864      	cmp	r0, #100	; 0x64
 8000d8c:	d8f7      	bhi.n	8000d7e <HAL_RCC_OscConfig+0xde>
 8000d8e:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d92:	6822      	ldr	r2, [r4, #0]
 8000d94:	fa96 f3a6 	rbit	r3, r6
 8000d98:	fab3 f383 	clz	r3, r3
 8000d9c:	f003 031f 	and.w	r3, r3, #31
 8000da0:	fa07 f303 	lsl.w	r3, r7, r3
 8000da4:	4213      	tst	r3, r2
 8000da6:	d1ec      	bne.n	8000d82 <HAL_RCC_OscConfig+0xe2>
 8000da8:	e780      	b.n	8000cac <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000daa:	4c78      	ldr	r4, [pc, #480]	; (8000f8c <HAL_RCC_OscConfig+0x2ec>)
 8000dac:	6863      	ldr	r3, [r4, #4]
 8000dae:	f013 0f0c 	tst.w	r3, #12
 8000db2:	d00a      	beq.n	8000dca <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000db4:	6863      	ldr	r3, [r4, #4]
 8000db6:	f003 030c 	and.w	r3, r3, #12
 8000dba:	2b08      	cmp	r3, #8
 8000dbc:	d125      	bne.n	8000e0a <HAL_RCC_OscConfig+0x16a>
 8000dbe:	6863      	ldr	r3, [r4, #4]
 8000dc0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dc8:	d11f      	bne.n	8000e0a <HAL_RCC_OscConfig+0x16a>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd0:	6821      	ldr	r1, [r4, #0]
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	fab3 f383 	clz	r3, r3
 8000dda:	f003 031f 	and.w	r3, r3, #31
 8000dde:	2201      	movs	r2, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	420b      	tst	r3, r1
 8000de6:	d002      	beq.n	8000dee <HAL_RCC_OscConfig+0x14e>
 8000de8:	68eb      	ldr	r3, [r5, #12]
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d186      	bne.n	8000cfc <HAL_RCC_OscConfig+0x5c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	22f8      	movs	r2, #248	; 0xf8
 8000df2:	fa92 f2a2 	rbit	r2, r2
 8000df6:	6929      	ldr	r1, [r5, #16]
 8000df8:	fab2 f282 	clz	r2, r2
 8000dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000e00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e04:	4313      	orrs	r3, r2
 8000e06:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e08:	e055      	b.n	8000eb6 <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e0a:	68ea      	ldr	r2, [r5, #12]
 8000e0c:	2601      	movs	r6, #1
 8000e0e:	b382      	cbz	r2, 8000e72 <HAL_RCC_OscConfig+0x1d2>
 8000e10:	fa96 f3a6 	rbit	r3, r6
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e14:	fab3 f383 	clz	r3, r3
 8000e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	2702      	movs	r7, #2
 8000e24:	601e      	str	r6, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e26:	f7ff fa61 	bl	80002ec <HAL_GetTick>
 8000e2a:	4680      	mov	r8, r0
 8000e2c:	fa97 f3a7 	rbit	r3, r7
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e30:	4856      	ldr	r0, [pc, #344]	; (8000f8c <HAL_RCC_OscConfig+0x2ec>)
 8000e32:	6822      	ldr	r2, [r4, #0]
 8000e34:	fa97 f3a7 	rbit	r3, r7
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	fa06 f303 	lsl.w	r3, r6, r3
 8000e44:	4213      	tst	r3, r2
 8000e46:	d106      	bne.n	8000e56 <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e48:	f7ff fa50 	bl	80002ec <HAL_GetTick>
 8000e4c:	ebc8 0000 	rsb	r0, r8, r0
 8000e50:	2802      	cmp	r0, #2
 8000e52:	d9eb      	bls.n	8000e2c <HAL_RCC_OscConfig+0x18c>
 8000e54:	e793      	b.n	8000d7e <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e56:	6803      	ldr	r3, [r0, #0]
 8000e58:	22f8      	movs	r2, #248	; 0xf8
 8000e5a:	fa92 f2a2 	rbit	r2, r2
 8000e5e:	6929      	ldr	r1, [r5, #16]
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	fa01 f202 	lsl.w	r2, r1, r2
 8000e68:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	6003      	str	r3, [r0, #0]
 8000e70:	e021      	b.n	8000eb6 <HAL_RCC_OscConfig+0x216>
 8000e72:	fa96 f3a6 	rbit	r3, r6
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e76:	fab3 f383 	clz	r3, r3
 8000e7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	2702      	movs	r7, #2
 8000e86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fa30 	bl	80002ec <HAL_GetTick>
 8000e8c:	4680      	mov	r8, r0
 8000e8e:	fa97 f3a7 	rbit	r3, r7
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e92:	6822      	ldr	r2, [r4, #0]
 8000e94:	fa97 f3a7 	rbit	r3, r7
 8000e98:	fab3 f383 	clz	r3, r3
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	fa06 f303 	lsl.w	r3, r6, r3
 8000ea4:	4213      	tst	r3, r2
 8000ea6:	d006      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fa20 	bl	80002ec <HAL_GetTick>
 8000eac:	ebc8 0000 	rsb	r0, r8, r0
 8000eb0:	2802      	cmp	r0, #2
 8000eb2:	d9ec      	bls.n	8000e8e <HAL_RCC_OscConfig+0x1ee>
 8000eb4:	e763      	b.n	8000d7e <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	071c      	lsls	r4, r3, #28
 8000eba:	d403      	bmi.n	8000ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	0758      	lsls	r0, r3, #29
 8000ec0:	d44c      	bmi.n	8000f5c <HAL_RCC_OscConfig+0x2bc>
 8000ec2:	e0e3      	b.n	800108c <HAL_RCC_OscConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec4:	6969      	ldr	r1, [r5, #20]
 8000ec6:	4e31      	ldr	r6, [pc, #196]	; (8000f8c <HAL_RCC_OscConfig+0x2ec>)
 8000ec8:	2401      	movs	r4, #1
 8000eca:	b319      	cbz	r1, 8000f14 <HAL_RCC_OscConfig+0x274>
 8000ecc:	fa94 f2a4 	rbit	r2, r4
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <HAL_RCC_OscConfig+0x2f0>)
 8000ed2:	fab2 f282 	clz	r2, r2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	2702      	movs	r7, #2
 8000edc:	601c      	str	r4, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fa05 	bl	80002ec <HAL_GetTick>
 8000ee2:	4680      	mov	r8, r0
 8000ee4:	fa97 f3a7 	rbit	r3, r7
 8000ee8:	fa97 f3a7 	rbit	r3, r7
 8000eec:	fa97 f3a7 	rbit	r3, r7
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000ef2:	fa97 f3a7 	rbit	r3, r7
 8000ef6:	fab3 f383 	clz	r3, r3
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	fa04 f303 	lsl.w	r3, r4, r3
 8000f02:	4213      	tst	r3, r2
 8000f04:	d1da      	bne.n	8000ebc <HAL_RCC_OscConfig+0x21c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f06:	f7ff f9f1 	bl	80002ec <HAL_GetTick>
 8000f0a:	ebc8 0000 	rsb	r0, r8, r0
 8000f0e:	2802      	cmp	r0, #2
 8000f10:	d9e8      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x244>
 8000f12:	e734      	b.n	8000d7e <HAL_RCC_OscConfig+0xde>
 8000f14:	fa94 f2a4 	rbit	r2, r4
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_RCC_OscConfig+0x2f0>)
 8000f1a:	fab2 f282 	clz	r2, r2
 8000f1e:	4413      	add	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	2702      	movs	r7, #2
 8000f24:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f26:	f7ff f9e1 	bl	80002ec <HAL_GetTick>
 8000f2a:	4680      	mov	r8, r0
 8000f2c:	fa97 f3a7 	rbit	r3, r7
 8000f30:	fa97 f3a7 	rbit	r3, r7
 8000f34:	fa97 f3a7 	rbit	r3, r7
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000f3a:	fa97 f3a7 	rbit	r3, r7
 8000f3e:	fab3 f383 	clz	r3, r3
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	fa04 f303 	lsl.w	r3, r4, r3
 8000f4a:	4213      	tst	r3, r2
 8000f4c:	d0b6      	beq.n	8000ebc <HAL_RCC_OscConfig+0x21c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f4e:	f7ff f9cd 	bl	80002ec <HAL_GetTick>
 8000f52:	ebc8 0000 	rsb	r0, r8, r0
 8000f56:	2802      	cmp	r0, #2
 8000f58:	d9e8      	bls.n	8000f2c <HAL_RCC_OscConfig+0x28c>
 8000f5a:	e710      	b.n	8000d7e <HAL_RCC_OscConfig+0xde>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5c:	4c0b      	ldr	r4, [pc, #44]	; (8000f8c <HAL_RCC_OscConfig+0x2ec>)
 8000f5e:	69e3      	ldr	r3, [r4, #28]
 8000f60:	00d9      	lsls	r1, r3, #3
 8000f62:	d40a      	bmi.n	8000f7a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	69e3      	ldr	r3, [r4, #28]
 8000f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	61e3      	str	r3, [r4, #28]
 8000f6c:	69e3      	ldr	r3, [r4, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f76:	2601      	movs	r6, #1
 8000f78:	e000      	b.n	8000f7c <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7a:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7c:	4f05      	ldr	r7, [pc, #20]	; (8000f94 <HAL_RCC_OscConfig+0x2f4>)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	05da      	lsls	r2, r3, #23
 8000f82:	d509      	bpl.n	8000f98 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f84:	68ab      	ldr	r3, [r5, #8]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d117      	bne.n	8000fba <HAL_RCC_OscConfig+0x31a>
 8000f8a:	e02d      	b.n	8000fe8 <HAL_RCC_OscConfig+0x348>
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	10908120 	.word	0x10908120
 8000f94:	40007000 	.word	0x40007000
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	603b      	str	r3, [r7, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa0:	f7ff f9a4 	bl	80002ec <HAL_GetTick>
 8000fa4:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	d4eb      	bmi.n	8000f84 <HAL_RCC_OscConfig+0x2e4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fac:	f7ff f99e 	bl	80002ec <HAL_GetTick>
 8000fb0:	ebc8 0000 	rsb	r0, r8, r0
 8000fb4:	2864      	cmp	r0, #100	; 0x64
 8000fb6:	d9f6      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x306>
 8000fb8:	e6e1      	b.n	8000d7e <HAL_RCC_OscConfig+0xde>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fba:	b97b      	cbnz	r3, 8000fdc <HAL_RCC_OscConfig+0x33c>
 8000fbc:	6a23      	ldr	r3, [r4, #32]
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	6223      	str	r3, [r4, #32]
 8000fc4:	6a23      	ldr	r3, [r4, #32]
 8000fc6:	f023 0304 	bic.w	r3, r3, #4
 8000fca:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fcc:	f7ff f98e 	bl	80002ec <HAL_GetTick>
 8000fd0:	2702      	movs	r7, #2
 8000fd2:	4682      	mov	sl, r0
 8000fd4:	46b9      	mov	r9, r7
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd6:	f04f 0801 	mov.w	r8, #1
 8000fda:	e03d      	b.n	8001058 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	6a23      	ldr	r3, [r4, #32]
 8000fe0:	d106      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x350>
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6223      	str	r3, [r4, #32]
 8000fe8:	6a23      	ldr	r3, [r4, #32]
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	e005      	b.n	8000ffc <HAL_RCC_OscConfig+0x35c>
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6223      	str	r3, [r4, #32]
 8000ff6:	6a23      	ldr	r3, [r4, #32]
 8000ff8:	f023 0304 	bic.w	r3, r3, #4
 8000ffc:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffe:	f7ff f975 	bl	80002ec <HAL_GetTick>
 8001002:	2702      	movs	r7, #2
 8001004:	4682      	mov	sl, r0
 8001006:	46b9      	mov	r9, r7
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001008:	f04f 0801 	mov.w	r8, #1
 800100c:	fa97 f3a7 	rbit	r3, r7
 8001010:	fa97 f3a7 	rbit	r3, r7
 8001014:	b10b      	cbz	r3, 800101a <HAL_RCC_OscConfig+0x37a>
 8001016:	6a22      	ldr	r2, [r4, #32]
 8001018:	e002      	b.n	8001020 <HAL_RCC_OscConfig+0x380>
 800101a:	fa97 f3a7 	rbit	r3, r7
 800101e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001020:	fa99 f3a9 	rbit	r3, r9
 8001024:	fab3 f383 	clz	r3, r3
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	fa08 f303 	lsl.w	r3, r8, r3
 8001030:	4213      	tst	r3, r2
 8001032:	d121      	bne.n	8001078 <HAL_RCC_OscConfig+0x3d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001034:	f7ff f95a 	bl	80002ec <HAL_GetTick>
 8001038:	f241 3388 	movw	r3, #5000	; 0x1388
 800103c:	ebca 0000 	rsb	r0, sl, r0
 8001040:	4298      	cmp	r0, r3
 8001042:	d9e3      	bls.n	800100c <HAL_RCC_OscConfig+0x36c>
 8001044:	e69b      	b.n	8000d7e <HAL_RCC_OscConfig+0xde>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001046:	f7ff f951 	bl	80002ec <HAL_GetTick>
 800104a:	f241 3388 	movw	r3, #5000	; 0x1388
 800104e:	ebca 0000 	rsb	r0, sl, r0
 8001052:	4298      	cmp	r0, r3
 8001054:	f63f ae93 	bhi.w	8000d7e <HAL_RCC_OscConfig+0xde>
 8001058:	fa97 f3a7 	rbit	r3, r7
 800105c:	fa97 f3a7 	rbit	r3, r7
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001060:	b183      	cbz	r3, 8001084 <HAL_RCC_OscConfig+0x3e4>
 8001062:	6a22      	ldr	r2, [r4, #32]
 8001064:	fa99 f3a9 	rbit	r3, r9
 8001068:	fab3 f383 	clz	r3, r3
 800106c:	f003 031f 	and.w	r3, r3, #31
 8001070:	fa08 f303 	lsl.w	r3, r8, r3
 8001074:	4213      	tst	r3, r2
 8001076:	d1e6      	bne.n	8001046 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001078:	b146      	cbz	r6, 800108c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800107a:	69e3      	ldr	r3, [r4, #28]
 800107c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001080:	61e3      	str	r3, [r4, #28]
 8001082:	e003      	b.n	800108c <HAL_RCC_OscConfig+0x3ec>
 8001084:	fa97 f3a7 	rbit	r3, r7
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001088:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800108a:	e7eb      	b.n	8001064 <HAL_RCC_OscConfig+0x3c4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800108c:	69aa      	ldr	r2, [r5, #24]
 800108e:	b90a      	cbnz	r2, 8001094 <HAL_RCC_OscConfig+0x3f4>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001090:	2000      	movs	r0, #0
 8001092:	e08a      	b.n	80011aa <HAL_RCC_OscConfig+0x50a>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001094:	4c46      	ldr	r4, [pc, #280]	; (80011b0 <HAL_RCC_OscConfig+0x510>)
 8001096:	6863      	ldr	r3, [r4, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b08      	cmp	r3, #8
 800109e:	f43f ae2d 	beq.w	8000cfc <HAL_RCC_OscConfig+0x5c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a2:	2a02      	cmp	r2, #2
 80010a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a8:	d15a      	bne.n	8001160 <HAL_RCC_OscConfig+0x4c0>
 80010aa:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ae:	fab3 f383 	clz	r3, r3
 80010b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff f914 	bl	80002ec <HAL_GetTick>
 80010c4:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80010c8:	4681      	mov	r9, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ca:	f04f 0801 	mov.w	r8, #1
 80010ce:	fa97 f3a7 	rbit	r3, r7
 80010d2:	4a37      	ldr	r2, [pc, #220]	; (80011b0 <HAL_RCC_OscConfig+0x510>)
 80010d4:	6821      	ldr	r1, [r4, #0]
 80010d6:	fa97 f3a7 	rbit	r3, r7
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	fa08 f303 	lsl.w	r3, r8, r3
 80010e6:	420b      	tst	r3, r1
 80010e8:	f04f 0601 	mov.w	r6, #1
 80010ec:	d006      	beq.n	80010fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ee:	f7ff f8fd 	bl	80002ec <HAL_GetTick>
 80010f2:	ebc9 0000 	rsb	r0, r9, r0
 80010f6:	2802      	cmp	r0, #2
 80010f8:	d9e9      	bls.n	80010ce <HAL_RCC_OscConfig+0x42e>
 80010fa:	e640      	b.n	8000d7e <HAL_RCC_OscConfig+0xde>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80010fe:	f023 010f 	bic.w	r1, r3, #15
 8001102:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001104:	430b      	orrs	r3, r1
 8001106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001108:	6853      	ldr	r3, [r2, #4]
 800110a:	6a28      	ldr	r0, [r5, #32]
 800110c:	69e9      	ldr	r1, [r5, #28]
 800110e:	f423 1376 	bic.w	r3, r3, #4030464	; 0x3d8000
 8001112:	4301      	orrs	r1, r0
 8001114:	430b      	orrs	r3, r1
 8001116:	6053      	str	r3, [r2, #4]
 8001118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800111c:	fa93 f3a3 	rbit	r3, r3
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001128:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001132:	601e      	str	r6, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff f8da 	bl	80002ec <HAL_GetTick>
 8001138:	4607      	mov	r7, r0
 800113a:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113e:	6822      	ldr	r2, [r4, #0]
 8001140:	fa95 f3a5 	rbit	r3, r5
 8001144:	fab3 f383 	clz	r3, r3
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	fa06 f303 	lsl.w	r3, r6, r3
 8001150:	4213      	tst	r3, r2
 8001152:	d19d      	bne.n	8001090 <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001154:	f7ff f8ca 	bl	80002ec <HAL_GetTick>
 8001158:	1bc0      	subs	r0, r0, r7
 800115a:	2802      	cmp	r0, #2
 800115c:	d9ed      	bls.n	800113a <HAL_RCC_OscConfig+0x49a>
 800115e:	e60e      	b.n	8000d7e <HAL_RCC_OscConfig+0xde>
 8001160:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001164:	fab3 f383 	clz	r3, r3
 8001168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800116c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001176:	f7ff f8b9 	bl	80002ec <HAL_GetTick>
 800117a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800117e:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001180:	2601      	movs	r6, #1
 8001182:	fa95 f3a5 	rbit	r3, r5
 8001186:	6822      	ldr	r2, [r4, #0]
 8001188:	fa95 f3a5 	rbit	r3, r5
 800118c:	fab3 f383 	clz	r3, r3
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	fa06 f303 	lsl.w	r3, r6, r3
 8001198:	4213      	tst	r3, r2
 800119a:	f43f af79 	beq.w	8001090 <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff f8a5 	bl	80002ec <HAL_GetTick>
 80011a2:	1bc0      	subs	r0, r0, r7
 80011a4:	2802      	cmp	r0, #2
 80011a6:	d9ec      	bls.n	8001182 <HAL_RCC_OscConfig+0x4e2>
 80011a8:	e5e9      	b.n	8000d7e <HAL_RCC_OscConfig+0xde>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80011aa:	b002      	add	sp, #8
 80011ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80011b4:	4911      	ldr	r1, [pc, #68]	; (80011fc <HAL_RCC_GetSysClockFreq+0x48>)
 80011b6:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011b8:	f003 020c 	and.w	r2, r3, #12
 80011bc:	2a08      	cmp	r2, #8
 80011be:	d11a      	bne.n	80011f6 <HAL_RCC_GetSysClockFreq+0x42>
 80011c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80011c4:	fa92 f2a2 	rbit	r2, r2
 80011c8:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80011ca:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80011ce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80011d0:	fa90 f0a0 	rbit	r0, r0
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80011d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80011d8:	40d3      	lsrs	r3, r2
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80011da:	4a09      	ldr	r2, [pc, #36]	; (8001200 <HAL_RCC_GetSysClockFreq+0x4c>)
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80011dc:	fab0 f080 	clz	r0, r0
 80011e0:	f001 010f 	and.w	r1, r1, #15
 80011e4:	40c1      	lsrs	r1, r0
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80011e6:	5cd3      	ldrb	r3, [r2, r3]
 80011e8:	4806      	ldr	r0, [pc, #24]	; (8001204 <HAL_RCC_GetSysClockFreq+0x50>)
 80011ea:	5c40      	ldrb	r0, [r0, r1]
 80011ec:	4906      	ldr	r1, [pc, #24]	; (8001208 <HAL_RCC_GetSysClockFreq+0x54>)
 80011ee:	fbb1 f0f0 	udiv	r0, r1, r0
 80011f2:	4358      	muls	r0, r3
 80011f4:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	08004acc 	.word	0x08004acc
 8001204:	08004abc 	.word	0x08004abc
 8001208:	007a1200 	.word	0x007a1200

0800120c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800120c:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <HAL_RCC_ClockConfig+0x16c>)
 800120e:	6813      	ldr	r3, [r2, #0]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800121a:	4606      	mov	r6, r0
 800121c:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800121e:	d30a      	bcc.n	8001236 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001220:	6831      	ldr	r1, [r6, #0]
 8001222:	0788      	lsls	r0, r1, #30
 8001224:	d514      	bpl.n	8001250 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001226:	4855      	ldr	r0, [pc, #340]	; (800137c <HAL_RCC_ClockConfig+0x170>)
 8001228:	6843      	ldr	r3, [r0, #4]
 800122a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800122e:	68b3      	ldr	r3, [r6, #8]
 8001230:	4313      	orrs	r3, r2
 8001232:	6043      	str	r3, [r0, #4]
 8001234:	e00c      	b.n	8001250 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001236:	6813      	ldr	r3, [r2, #0]
 8001238:	f023 0307 	bic.w	r3, r3, #7
 800123c:	430b      	orrs	r3, r1
 800123e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001240:	6813      	ldr	r3, [r2, #0]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	4299      	cmp	r1, r3
 8001248:	d0ea      	beq.n	8001220 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800124a:	2001      	movs	r0, #1
 800124c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001250:	07ca      	lsls	r2, r1, #31
 8001252:	d406      	bmi.n	8001262 <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001254:	4a48      	ldr	r2, [pc, #288]	; (8001378 <HAL_RCC_ClockConfig+0x16c>)
 8001256:	6813      	ldr	r3, [r2, #0]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	429d      	cmp	r5, r3
 800125e:	d357      	bcc.n	8001310 <HAL_RCC_ClockConfig+0x104>
 8001260:	e060      	b.n	8001324 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	6872      	ldr	r2, [r6, #4]
 8001264:	4c45      	ldr	r4, [pc, #276]	; (800137c <HAL_RCC_ClockConfig+0x170>)
 8001266:	2a01      	cmp	r2, #1
 8001268:	d10e      	bne.n	8001288 <HAL_RCC_ClockConfig+0x7c>
 800126a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126e:	fa93 f1a3 	rbit	r1, r3
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	6821      	ldr	r1, [r4, #0]
 8001274:	fa93 f3a3 	rbit	r3, r3
 8001278:	fab3 f383 	clz	r3, r3
 800127c:	f003 031f 	and.w	r3, r3, #31
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	420b      	tst	r3, r1
 8001286:	e011      	b.n	80012ac <HAL_RCC_ClockConfig+0xa0>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001288:	2a02      	cmp	r2, #2
 800128a:	bf0c      	ite	eq
 800128c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001290:	2302      	movne	r3, #2
 8001292:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	6820      	ldr	r0, [r4, #0]
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	4203      	tst	r3, r0
 80012ac:	d0cd      	beq.n	800124a <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ae:	6863      	ldr	r3, [r4, #4]
 80012b0:	f023 0303 	bic.w	r3, r3, #3
 80012b4:	431a      	orrs	r2, r3
 80012b6:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b8:	f7ff f818 	bl	80002ec <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012bc:	6873      	ldr	r3, [r6, #4]
 80012be:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c0:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c6:	d10c      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xd6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c8:	6863      	ldr	r3, [r4, #4]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d0c0      	beq.n	8001254 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d2:	f7ff f80b 	bl	80002ec <HAL_GetTick>
 80012d6:	1bc0      	subs	r0, r0, r7
 80012d8:	4540      	cmp	r0, r8
 80012da:	d9f5      	bls.n	80012c8 <HAL_RCC_ClockConfig+0xbc>
        {
          return HAL_TIMEOUT;
 80012dc:	2003      	movs	r0, #3
 80012de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d10f      	bne.n	8001306 <HAL_RCC_ClockConfig+0xfa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e6:	6863      	ldr	r3, [r4, #4]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d0b1      	beq.n	8001254 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f0:	f7fe fffc 	bl	80002ec <HAL_GetTick>
 80012f4:	1bc0      	subs	r0, r0, r7
 80012f6:	4540      	cmp	r0, r8
 80012f8:	d9f5      	bls.n	80012e6 <HAL_RCC_ClockConfig+0xda>
 80012fa:	e7ef      	b.n	80012dc <HAL_RCC_ClockConfig+0xd0>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fc:	f7fe fff6 	bl	80002ec <HAL_GetTick>
 8001300:	1bc0      	subs	r0, r0, r7
 8001302:	4540      	cmp	r0, r8
 8001304:	d8ea      	bhi.n	80012dc <HAL_RCC_ClockConfig+0xd0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001306:	6863      	ldr	r3, [r4, #4]
 8001308:	f013 0f0c 	tst.w	r3, #12
 800130c:	d1f6      	bne.n	80012fc <HAL_RCC_ClockConfig+0xf0>
 800130e:	e7a1      	b.n	8001254 <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001310:	6813      	ldr	r3, [r2, #0]
 8001312:	f023 0307 	bic.w	r3, r3, #7
 8001316:	432b      	orrs	r3, r5
 8001318:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800131a:	6813      	ldr	r3, [r2, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	429d      	cmp	r5, r3
 8001322:	d192      	bne.n	800124a <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001324:	6831      	ldr	r1, [r6, #0]
 8001326:	4c15      	ldr	r4, [pc, #84]	; (800137c <HAL_RCC_ClockConfig+0x170>)
 8001328:	f011 0f04 	tst.w	r1, #4
 800132c:	d005      	beq.n	800133a <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800132e:	6863      	ldr	r3, [r4, #4]
 8001330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001334:	68f3      	ldr	r3, [r6, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	070b      	lsls	r3, r1, #28
 800133c:	d506      	bpl.n	800134c <HAL_RCC_ClockConfig+0x140>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800133e:	6863      	ldr	r3, [r4, #4]
 8001340:	6932      	ldr	r2, [r6, #16]
 8001342:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001346:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800134a:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800134c:	f7ff ff32 	bl	80011b4 <HAL_RCC_GetSysClockFreq>
 8001350:	6863      	ldr	r3, [r4, #4]
 8001352:	22f0      	movs	r2, #240	; 0xf0
 8001354:	fa92 f2a2 	rbit	r2, r2
 8001358:	fab2 f282 	clz	r2, r2
 800135c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001360:	40d3      	lsrs	r3, r2
 8001362:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_RCC_ClockConfig+0x174>)
 8001364:	5cd3      	ldrb	r3, [r2, r3]
 8001366:	40d8      	lsrs	r0, r3
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_RCC_ClockConfig+0x178>)
 800136a:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800136c:	2000      	movs	r0, #0
 800136e:	f002 f991 	bl	8003694 <HAL_InitTick>
  
  return HAL_OK;
 8001372:	2000      	movs	r0, #0
}
 8001374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001378:	40022000 	.word	0x40022000
 800137c:	40021000 	.word	0x40021000
 8001380:	08004b87 	.word	0x08004b87
 8001384:	20000008 	.word	0x20000008

08001388 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001388:	4b01      	ldr	r3, [pc, #4]	; (8001390 <HAL_RCC_GetHCLKFreq+0x8>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001396:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	fa92 f2a2 	rbit	r2, r2
 80013a0:	fab2 f282 	clz	r2, r2
 80013a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80013a8:	40d3      	lsrs	r3, r2
 80013aa:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80013b0:	6810      	ldr	r0, [r2, #0]
} 
 80013b2:	40d8      	lsrs	r0, r3
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	08004b97 	.word	0x08004b97
 80013c0:	20000008 	.word	0x20000008

080013c4 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013c4:	230f      	movs	r3, #15
 80013c6:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_GetClockConfig+0x34>)
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	f002 0203 	and.w	r2, r2, #3
 80013d0:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80013d8:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80013e0:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	08db      	lsrs	r3, r3, #3
 80013e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013ea:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_RCC_GetClockConfig+0x38>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	600b      	str	r3, [r1, #0]
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40022000 	.word	0x40022000

08001400 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001400:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001402:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001406:	03df      	lsls	r7, r3, #15
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001408:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800140a:	d57c      	bpl.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140c:	4d9b      	ldr	r5, [pc, #620]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800140e:	69eb      	ldr	r3, [r5, #28]
 8001410:	00de      	lsls	r6, r3, #3
 8001412:	d40a      	bmi.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	69eb      	ldr	r3, [r5, #28]
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	61eb      	str	r3, [r5, #28]
 800141c:	69eb      	ldr	r3, [r5, #28]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001426:	2601      	movs	r6, #1
 8001428:	e000      	b.n	800142c <HAL_RCCEx_PeriphCLKConfig+0x2c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800142a:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142c:	4f94      	ldr	r7, [pc, #592]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	05d8      	lsls	r0, r3, #23
 8001432:	d505      	bpl.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x40>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001434:	6a2b      	ldr	r3, [r5, #32]
 8001436:	4991      	ldr	r1, [pc, #580]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001438:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800143c:	d112      	bne.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800143e:	e016      	b.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001446:	603b      	str	r3, [r7, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001448:	f7fe ff50 	bl	80002ec <HAL_GetTick>
 800144c:	4680      	mov	r8, r0
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	05d9      	lsls	r1, r3, #23
 8001452:	d4ef      	bmi.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x34>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001454:	f7fe ff4a 	bl	80002ec <HAL_GetTick>
 8001458:	ebc8 0000 	rsb	r0, r8, r0
 800145c:	2864      	cmp	r0, #100	; 0x64
 800145e:	d9f6      	bls.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8001460:	2003      	movs	r0, #3
 8001462:	e107      	b.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001464:	6862      	ldr	r2, [r4, #4]
 8001466:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800146a:	4293      	cmp	r3, r2
 800146c:	d10d      	bne.n	800148a <HAL_RCCEx_PeriphCLKConfig+0x8a>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800146e:	6a2b      	ldr	r3, [r5, #32]
 8001470:	4982      	ldr	r1, [pc, #520]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001472:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001476:	6863      	ldr	r3, [r4, #4]
 8001478:	4313      	orrs	r3, r2
 800147a:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800147c:	2e00      	cmp	r6, #0
 800147e:	d042      	beq.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001480:	69cb      	ldr	r3, [r1, #28]
 8001482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001486:	61cb      	str	r3, [r1, #28]
 8001488:	e03d      	b.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800148a:	6a08      	ldr	r0, [r1, #32]
 800148c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001490:	f420 7e40 	bic.w	lr, r0, #768	; 0x300
 8001494:	fa93 f7a3 	rbit	r7, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001498:	4a7a      	ldr	r2, [pc, #488]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800149a:	fab7 f787 	clz	r7, r7
 800149e:	443a      	add	r2, r7
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	2701      	movs	r7, #1
 80014a4:	6017      	str	r7, [r2, #0]
 80014a6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014aa:	4a76      	ldr	r2, [pc, #472]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80014ac:	fab3 f383 	clz	r3, r3
 80014b0:	441a      	add	r2, r3
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	2300      	movs	r3, #0
 80014b6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014b8:	07c2      	lsls	r2, r0, #31
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80014ba:	f8c1 e020 	str.w	lr, [r1, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014be:	d5d6      	bpl.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7fe ff14 	bl	80002ec <HAL_GetTick>
 80014c4:	f04f 0802 	mov.w	r8, #2
 80014c8:	4682      	mov	sl, r0
 80014ca:	46c1      	mov	r9, r8
 80014cc:	fa98 f3a8 	rbit	r3, r8
 80014d0:	fa98 f3a8 	rbit	r3, r8
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d4:	b10b      	cbz	r3, 80014da <HAL_RCCEx_PeriphCLKConfig+0xda>
 80014d6:	6a2a      	ldr	r2, [r5, #32]
 80014d8:	e002      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80014da:	fa98 f3a8 	rbit	r3, r8
 80014de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80014e0:	fa99 f3a9 	rbit	r3, r9
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	fa07 f303 	lsl.w	r3, r7, r3
 80014f0:	4213      	tst	r3, r2
 80014f2:	d1bc      	bne.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f7fe fefa 	bl	80002ec <HAL_GetTick>
 80014f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80014fc:	ebca 0000 	rsb	r0, sl, r0
 8001500:	4298      	cmp	r0, r3
 8001502:	d9e3      	bls.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001504:	e7ac      	b.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001506:	6820      	ldr	r0, [r4, #0]
 8001508:	07c3      	lsls	r3, r0, #31
 800150a:	d506      	bpl.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800150c:	495b      	ldr	r1, [pc, #364]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800150e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001510:	f023 0203 	bic.w	r2, r3, #3
 8001514:	68a3      	ldr	r3, [r4, #8]
 8001516:	4313      	orrs	r3, r2
 8001518:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800151a:	0787      	lsls	r7, r0, #30
 800151c:	d506      	bpl.n	800152c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800151e:	4957      	ldr	r1, [pc, #348]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001520:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001522:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001526:	68e3      	ldr	r3, [r4, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800152c:	0746      	lsls	r6, r0, #29
 800152e:	d506      	bpl.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001530:	4952      	ldr	r1, [pc, #328]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001532:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001534:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001538:	6923      	ldr	r3, [r4, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800153e:	0685      	lsls	r5, r0, #26
 8001540:	d506      	bpl.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001542:	494e      	ldr	r1, [pc, #312]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001544:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001546:	f023 0210 	bic.w	r2, r3, #16
 800154a:	69e3      	ldr	r3, [r4, #28]
 800154c:	4313      	orrs	r3, r2
 800154e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001550:	0381      	lsls	r1, r0, #14
 8001552:	d506      	bpl.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001554:	4949      	ldr	r1, [pc, #292]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001556:	684b      	ldr	r3, [r1, #4]
 8001558:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800155c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800155e:	4313      	orrs	r3, r2
 8001560:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001562:	0642      	lsls	r2, r0, #25
 8001564:	d506      	bpl.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001566:	4945      	ldr	r1, [pc, #276]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001568:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800156a:	f023 0220 	bic.w	r2, r3, #32
 800156e:	6a23      	ldr	r3, [r4, #32]
 8001570:	4313      	orrs	r3, r2
 8001572:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001574:	0343      	lsls	r3, r0, #13
 8001576:	d506      	bpl.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001578:	4940      	ldr	r1, [pc, #256]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800157a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800157c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001582:	4313      	orrs	r3, r2
 8001584:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001586:	0707      	lsls	r7, r0, #28
 8001588:	d506      	bpl.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800158a:	493c      	ldr	r1, [pc, #240]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800158c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800158e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001592:	6963      	ldr	r3, [r4, #20]
 8001594:	4313      	orrs	r3, r2
 8001596:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001598:	06c6      	lsls	r6, r0, #27
 800159a:	d506      	bpl.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800159c:	4937      	ldr	r1, [pc, #220]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800159e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80015a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80015a4:	69a3      	ldr	r3, [r4, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80015aa:	0585      	lsls	r5, r0, #22
 80015ac:	d506      	bpl.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80015ae:	4933      	ldr	r1, [pc, #204]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015b0:	684b      	ldr	r3, [r1, #4]
 80015b2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80015bc:	0601      	lsls	r1, r0, #24
 80015be:	d506      	bpl.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80015c0:	492e      	ldr	r1, [pc, #184]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015c2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80015c4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80015c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015ca:	4313      	orrs	r3, r2
 80015cc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80015ce:	05c2      	lsls	r2, r0, #23
 80015d0:	d506      	bpl.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80015d2:	492a      	ldr	r1, [pc, #168]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015d4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80015d6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80015da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015dc:	4313      	orrs	r3, r2
 80015de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80015e0:	04c3      	lsls	r3, r0, #19
 80015e2:	d506      	bpl.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80015e4:	4925      	ldr	r1, [pc, #148]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80015e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015ee:	4313      	orrs	r3, r2
 80015f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80015f2:	0487      	lsls	r7, r0, #18
 80015f4:	d506      	bpl.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80015f6:	4921      	ldr	r1, [pc, #132]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80015fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80015fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001600:	4313      	orrs	r3, r2
 8001602:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001604:	02c6      	lsls	r6, r0, #11
 8001606:	d506      	bpl.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001608:	491c      	ldr	r1, [pc, #112]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800160a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800160c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001612:	4313      	orrs	r3, r2
 8001614:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001616:	0285      	lsls	r5, r0, #10
 8001618:	d506      	bpl.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800161a:	4918      	ldr	r1, [pc, #96]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800161c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800161e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001622:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001624:	4313      	orrs	r3, r2
 8001626:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001628:	0241      	lsls	r1, r0, #9
 800162a:	d506      	bpl.n	800163a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800162c:	4913      	ldr	r1, [pc, #76]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800162e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001630:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001634:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001636:	4313      	orrs	r3, r2
 8001638:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800163a:	0202      	lsls	r2, r0, #8
 800163c:	d506      	bpl.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800163e:	490f      	ldr	r1, [pc, #60]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001640:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001642:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001646:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001648:	4313      	orrs	r3, r2
 800164a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800164c:	01c3      	lsls	r3, r0, #7
 800164e:	d506      	bpl.n	800165e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001650:	490a      	ldr	r1, [pc, #40]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001652:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001654:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001658:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800165a:	4313      	orrs	r3, r2
 800165c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800165e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001662:	d007      	beq.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001664:	4905      	ldr	r1, [pc, #20]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001666:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001668:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800166c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800166e:	4313      	orrs	r3, r2
 8001670:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001672:	2000      	movs	r0, #0
}
 8001674:	b002      	add	sp, #8
 8001676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	40007000 	.word	0x40007000
 8001684:	10908100 	.word	0x10908100

08001688 <HAL_TIM_Base_MspInit>:
 8001688:	4770      	bx	lr

0800168a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800168a:	6803      	ldr	r3, [r0, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800169c:	2000      	movs	r0, #0
 800169e:	4770      	bx	lr

080016a0 <HAL_TIM_OC_DelayElapsedCallback>:
 80016a0:	4770      	bx	lr

080016a2 <HAL_TIM_IC_CaptureCallback>:
 80016a2:	4770      	bx	lr

080016a4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80016a4:	4770      	bx	lr

080016a6 <HAL_TIM_TriggerCallback>:
 80016a6:	4770      	bx	lr

080016a8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016a8:	6803      	ldr	r3, [r0, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016ae:	b510      	push	{r4, lr}
 80016b0:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016b2:	d514      	bpl.n	80016de <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	0792      	lsls	r2, r2, #30
 80016b8:	d511      	bpl.n	80016de <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016ba:	f06f 0202 	mvn.w	r2, #2
 80016be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016c0:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016c2:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016c4:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016c6:	7702      	strb	r2, [r0, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016c8:	d002      	beq.n	80016d0 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80016ca:	f7ff ffea 	bl	80016a2 <HAL_TIM_IC_CaptureCallback>
 80016ce:	e004      	b.n	80016da <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d0:	f7ff ffe6 	bl	80016a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff ffe5 	bl	80016a4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016da:	2300      	movs	r3, #0
 80016dc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	0750      	lsls	r0, r2, #29
 80016e4:	d516      	bpl.n	8001714 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	0751      	lsls	r1, r2, #29
 80016ea:	d513      	bpl.n	8001714 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016ec:	f06f 0204 	mvn.w	r2, #4
 80016f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016f2:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016f4:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016f6:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016fa:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80016fc:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016fe:	d002      	beq.n	8001706 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001700:	f7ff ffcf 	bl	80016a2 <HAL_TIM_IC_CaptureCallback>
 8001704:	e004      	b.n	8001710 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001706:	f7ff ffcb 	bl	80016a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ffca 	bl	80016a4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001710:	2300      	movs	r3, #0
 8001712:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	0712      	lsls	r2, r2, #28
 800171a:	d515      	bpl.n	8001748 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	0710      	lsls	r0, r2, #28
 8001720:	d512      	bpl.n	8001748 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001722:	f06f 0208 	mvn.w	r2, #8
 8001726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001728:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800172a:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800172c:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800172e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001730:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001732:	d002      	beq.n	800173a <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001734:	f7ff ffb5 	bl	80016a2 <HAL_TIM_IC_CaptureCallback>
 8001738:	e004      	b.n	8001744 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800173a:	f7ff ffb1 	bl	80016a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff ffb0 	bl	80016a4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001744:	2300      	movs	r3, #0
 8001746:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	06d2      	lsls	r2, r2, #27
 800174e:	d516      	bpl.n	800177e <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	06d0      	lsls	r0, r2, #27
 8001754:	d513      	bpl.n	800177e <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001756:	f06f 0210 	mvn.w	r2, #16
 800175a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800175c:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800175e:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001760:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001764:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001766:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001768:	d002      	beq.n	8001770 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800176a:	f7ff ff9a 	bl	80016a2 <HAL_TIM_IC_CaptureCallback>
 800176e:	e004      	b.n	800177a <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001770:	f7ff ff96 	bl	80016a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001774:	4620      	mov	r0, r4
 8001776:	f7ff ff95 	bl	80016a4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800177a:	2300      	movs	r3, #0
 800177c:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	07d1      	lsls	r1, r2, #31
 8001784:	d508      	bpl.n	8001798 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	07d2      	lsls	r2, r2, #31
 800178a:	d505      	bpl.n	8001798 <HAL_TIM_IRQHandler+0xf0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800178c:	f06f 0201 	mvn.w	r2, #1
 8001790:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001792:	4620      	mov	r0, r4
 8001794:	f001 fef0 	bl	8003578 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	0610      	lsls	r0, r2, #24
 800179e:	d508      	bpl.n	80017b2 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	0611      	lsls	r1, r2, #24
 80017a4:	d505      	bpl.n	80017b2 <HAL_TIM_IRQHandler+0x10a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80017ac:	4620      	mov	r0, r4
 80017ae:	f000 f8a2 	bl	80018f6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	0652      	lsls	r2, r2, #25
 80017b8:	d508      	bpl.n	80017cc <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	0650      	lsls	r0, r2, #25
 80017be:	d505      	bpl.n	80017cc <HAL_TIM_IRQHandler+0x124>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff ff6d 	bl	80016a6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	0691      	lsls	r1, r2, #26
 80017d2:	d50a      	bpl.n	80017ea <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	0692      	lsls	r2, r2, #26
 80017d8:	d507      	bpl.n	80017ea <HAL_TIM_IRQHandler+0x142>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017da:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80017de:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 80017e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 80017e6:	f000 b885 	b.w	80018f4 <HAL_TIMEx_CommutationCallback>
 80017ea:	bd10      	pop	{r4, pc}

080017ec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017ec:	4a32      	ldr	r2, [pc, #200]	; (80018b8 <TIM_Base_SetConfig+0xcc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 80017ee:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017f0:	4290      	cmp	r0, r2
 80017f2:	d012      	beq.n	800181a <TIM_Base_SetConfig+0x2e>
 80017f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017f8:	d00f      	beq.n	800181a <TIM_Base_SetConfig+0x2e>
 80017fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80017fe:	4290      	cmp	r0, r2
 8001800:	d00b      	beq.n	800181a <TIM_Base_SetConfig+0x2e>
 8001802:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001806:	4290      	cmp	r0, r2
 8001808:	d007      	beq.n	800181a <TIM_Base_SetConfig+0x2e>
 800180a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800180e:	4290      	cmp	r0, r2
 8001810:	d003      	beq.n	800181a <TIM_Base_SetConfig+0x2e>
 8001812:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8001816:	4290      	cmp	r0, r2
 8001818:	d115      	bne.n	8001846 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800181a:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800181c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001820:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <TIM_Base_SetConfig+0xcc>)
 8001824:	4290      	cmp	r0, r2
 8001826:	d01d      	beq.n	8001864 <TIM_Base_SetConfig+0x78>
 8001828:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800182c:	d01a      	beq.n	8001864 <TIM_Base_SetConfig+0x78>
 800182e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001832:	4290      	cmp	r0, r2
 8001834:	d016      	beq.n	8001864 <TIM_Base_SetConfig+0x78>
 8001836:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800183a:	4290      	cmp	r0, r2
 800183c:	d012      	beq.n	8001864 <TIM_Base_SetConfig+0x78>
 800183e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001842:	4290      	cmp	r0, r2
 8001844:	d00e      	beq.n	8001864 <TIM_Base_SetConfig+0x78>
 8001846:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <TIM_Base_SetConfig+0xd0>)
 8001848:	4290      	cmp	r0, r2
 800184a:	d00b      	beq.n	8001864 <TIM_Base_SetConfig+0x78>
 800184c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001850:	4290      	cmp	r0, r2
 8001852:	d007      	beq.n	8001864 <TIM_Base_SetConfig+0x78>
 8001854:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001858:	4290      	cmp	r0, r2
 800185a:	d003      	beq.n	8001864 <TIM_Base_SetConfig+0x78>
 800185c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001860:	4290      	cmp	r0, r2
 8001862:	d103      	bne.n	800186c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001864:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800186a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800186c:	694a      	ldr	r2, [r1, #20]
 800186e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001872:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001874:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001876:	688b      	ldr	r3, [r1, #8]
 8001878:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800187a:	680b      	ldr	r3, [r1, #0]
 800187c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <TIM_Base_SetConfig+0xcc>)
 8001880:	4298      	cmp	r0, r3
 8001882:	d013      	beq.n	80018ac <TIM_Base_SetConfig+0xc0>
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	4298      	cmp	r0, r3
 800188a:	d00f      	beq.n	80018ac <TIM_Base_SetConfig+0xc0>
 800188c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001890:	4298      	cmp	r0, r3
 8001892:	d00b      	beq.n	80018ac <TIM_Base_SetConfig+0xc0>
 8001894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001898:	4298      	cmp	r0, r3
 800189a:	d007      	beq.n	80018ac <TIM_Base_SetConfig+0xc0>
 800189c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018a0:	4298      	cmp	r0, r3
 80018a2:	d003      	beq.n	80018ac <TIM_Base_SetConfig+0xc0>
 80018a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a8:	4298      	cmp	r0, r3
 80018aa:	d101      	bne.n	80018b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018ac:	690b      	ldr	r3, [r1, #16]
 80018ae:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80018b0:	2301      	movs	r3, #1
 80018b2:	6143      	str	r3, [r0, #20]
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40012c00 	.word	0x40012c00
 80018bc:	40014000 	.word	0x40014000

080018c0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80018c0:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80018c2:	4604      	mov	r4, r0
 80018c4:	b1a0      	cbz	r0, 80018f0 <HAL_TIM_Base_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80018c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018ce:	b91b      	cbnz	r3, 80018d8 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018d4:	f7ff fed8 	bl	8001688 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80018d8:	2302      	movs	r3, #2
 80018da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80018de:	6820      	ldr	r0, [r4, #0]
 80018e0:	1d21      	adds	r1, r4, #4
 80018e2:	f7ff ff83 	bl	80017ec <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80018e6:	2301      	movs	r3, #1
 80018e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  return HAL_OK;
 80018ec:	2000      	movs	r0, #0
 80018ee:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80018f0:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 80018f2:	bd10      	pop	{r4, pc}

080018f4 <HAL_TIMEx_CommutationCallback>:
 80018f4:	4770      	bx	lr

080018f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018f6:	4770      	bx	lr

080018f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80018f8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80018fa:	f000 ff1d 	bl	8002738 <vTaskStartScheduler>
  
  return osOK;
}
 80018fe:	2000      	movs	r0, #0
 8001900:	bd08      	pop	{r3, pc}

08001902 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001902:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001904:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001908:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800190a:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800190c:	e890 0022 	ldmia.w	r0, {r1, r5}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001910:	b085      	sub	sp, #20
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001912:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001914:	bf14      	ite	ne
 8001916:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001918:	2400      	moveq	r4, #0

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800191a:	a803      	add	r0, sp, #12
 800191c:	9001      	str	r0, [sp, #4]
 800191e:	9400      	str	r4, [sp, #0]
 8001920:	4628      	mov	r0, r5
 8001922:	f000 fe3b 	bl	800259c <xTaskCreate>
 8001926:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001928:	bf0c      	ite	eq
 800192a:	9803      	ldreq	r0, [sp, #12]
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800192c:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
}
 800192e:	b005      	add	sp, #20
 8001930:	bd30      	pop	{r4, r5, pc}

08001932 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001932:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001934:	2800      	cmp	r0, #0
 8001936:	bf08      	it	eq
 8001938:	2001      	moveq	r0, #1
 800193a:	f001 f85b 	bl	80029f4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800193e:	2000      	movs	r0, #0
 8001940:	bd08      	pop	{r3, pc}
	...

08001944 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8001944:	b507      	push	{r0, r1, r2, lr}
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 8001946:	6803      	ldr	r3, [r0, #0]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	3901      	subs	r1, #1
 800194c:	4613      	mov	r3, r2
 800194e:	424a      	negs	r2, r1
 8001950:	414a      	adcs	r2, r1
 8001952:	4803      	ldr	r0, [pc, #12]	; (8001960 <osTimerCreate+0x1c>)
 8001954:	2101      	movs	r1, #1
 8001956:	f001 fad3 	bl	8002f00 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800195a:	b003      	add	sp, #12
 800195c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001960:	08004b74 	.word	0x08004b74

08001964 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001964:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001966:	f001 f9a9 	bl	8002cbc <xTaskGetSchedulerState>
 800196a:	2801      	cmp	r0, #1
 800196c:	d003      	beq.n	8001976 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800196e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001972:	f000 b907 	b.w	8001b84 <xPortSysTickHandler>
 8001976:	bd08      	pop	{r3, pc}

08001978 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001978:	f100 0308 	add.w	r3, r0, #8
 800197c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800197e:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001982:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001984:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001986:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001988:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800198a:	6003      	str	r3, [r0, #0]
 800198c:	4770      	bx	lr

0800198e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800198e:	2300      	movs	r3, #0
 8001990:	6103      	str	r3, [r0, #16]
 8001992:	4770      	bx	lr

08001994 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001994:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001996:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80019a0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80019a2:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80019a4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80019a6:	3301      	adds	r3, #1
 80019a8:	6003      	str	r3, [r0, #0]
 80019aa:	4770      	bx	lr

080019ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019ac:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80019ae:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019b0:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80019b2:	d101      	bne.n	80019b8 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80019b4:	6903      	ldr	r3, [r0, #16]
 80019b6:	e007      	b.n	80019c8 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019b8:	f100 0308 	add.w	r3, r0, #8
 80019bc:	685c      	ldr	r4, [r3, #4]
 80019be:	6825      	ldr	r5, [r4, #0]
 80019c0:	42aa      	cmp	r2, r5
 80019c2:	d301      	bcc.n	80019c8 <vListInsert+0x1c>
 80019c4:	4623      	mov	r3, r4
 80019c6:	e7f9      	b.n	80019bc <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019cc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80019ce:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80019d0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80019d2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80019d4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80019d6:	3301      	adds	r3, #1
 80019d8:	6003      	str	r3, [r0, #0]
 80019da:	bd30      	pop	{r4, r5, pc}

080019dc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019dc:	6841      	ldr	r1, [r0, #4]
 80019de:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80019e0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019e2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019e4:	6882      	ldr	r2, [r0, #8]
 80019e6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019e8:	6859      	ldr	r1, [r3, #4]
 80019ea:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019ec:	bf08      	it	eq
 80019ee:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019f0:	2200      	movs	r2, #0
 80019f2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	3801      	subs	r0, #1
 80019f8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80019fa:	4770      	bx	lr

080019fc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <prvTaskExitError+0x2c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	d008      	beq.n	8001a16 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a08:	f383 8811 	msr	BASEPRI, r3
 8001a0c:	f3bf 8f6f 	isb	sy
 8001a10:	f3bf 8f4f 	dsb	sy
 8001a14:	e7fe      	b.n	8001a14 <prvTaskExitError+0x18>
 8001a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1a:	f383 8811 	msr	BASEPRI, r3
 8001a1e:	f3bf 8f6f 	isb	sy
 8001a22:	f3bf 8f4f 	dsb	sy
 8001a26:	e7fe      	b.n	8001a26 <prvTaskExitError+0x2a>
 8001a28:	20000004 	.word	0x20000004

08001a2c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001a2c:	4806      	ldr	r0, [pc, #24]	; (8001a48 <prvPortStartFirstTask+0x1c>)
 8001a2e:	6800      	ldr	r0, [r0, #0]
 8001a30:	6800      	ldr	r0, [r0, #0]
 8001a32:	f380 8808 	msr	MSP, r0
 8001a36:	b662      	cpsie	i
 8001a38:	b661      	cpsie	f
 8001a3a:	f3bf 8f4f 	dsb	sy
 8001a3e:	f3bf 8f6f 	isb	sy
 8001a42:	df00      	svc	0
 8001a44:	bf00      	nop
 8001a46:	0000      	.short	0x0000
 8001a48:	e000ed08 	.word	0xe000ed08

08001a4c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001a4c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a5c <vPortEnableVFP+0x10>
 8001a50:	6801      	ldr	r1, [r0, #0]
 8001a52:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a56:	6001      	str	r1, [r0, #0]
 8001a58:	4770      	bx	lr
 8001a5a:	0000      	.short	0x0000
 8001a5c:	e000ed88 	.word	0xe000ed88

08001a60 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a64:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <pxPortInitialiseStack+0x28>)
 8001a6a:	f840 3c0c 	str.w	r3, [r0, #-12]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a6e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001a72:	f06f 0302 	mvn.w	r3, #2
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a76:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001a7a:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001a7e:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8001a82:	3844      	subs	r0, #68	; 0x44
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	080019fd 	.word	0x080019fd
 8001a8c:	00000000 	.word	0x00000000

08001a90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <pxCurrentTCBConst2>)
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	6808      	ldr	r0, [r1, #0]
 8001a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a9a:	f380 8809 	msr	PSP, r0
 8001a9e:	f3bf 8f6f 	isb	sy
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	f380 8811 	msr	BASEPRI, r0
 8001aaa:	4770      	bx	lr
 8001aac:	f3af 8000 	nop.w

08001ab0 <pxCurrentTCBConst2>:
 8001ab0:	20002888 	.word	0x20002888

08001ab4 <vPortEnterCritical>:
 8001ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab8:	f383 8811 	msr	BASEPRI, r3
 8001abc:	f3bf 8f6f 	isb	sy
 8001ac0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <vPortEnterCritical+0x3c>)
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001aca:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001acc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001ace:	d10d      	bne.n	8001aec <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <vPortEnterCritical+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001ad8:	d008      	beq.n	8001aec <vPortEnterCritical+0x38>
 8001ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ade:	f383 8811 	msr	BASEPRI, r3
 8001ae2:	f3bf 8f6f 	isb	sy
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	e7fe      	b.n	8001aea <vPortEnterCritical+0x36>
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000004 	.word	0x20000004
 8001af4:	e000ed04 	.word	0xe000ed04

08001af8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001af8:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <vPortExitCritical+0x24>)
 8001afa:	6813      	ldr	r3, [r2, #0]
 8001afc:	b943      	cbnz	r3, 8001b10 <vPortExitCritical+0x18>
 8001afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b02:	f383 8811 	msr	BASEPRI, r3
 8001b06:	f3bf 8f6f 	isb	sy
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	e7fe      	b.n	8001b0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001b10:	3b01      	subs	r3, #1
 8001b12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001b14:	b90b      	cbnz	r3, 8001b1a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b16:	f383 8811 	msr	BASEPRI, r3
 8001b1a:	4770      	bx	lr
 8001b1c:	20000004 	.word	0x20000004

08001b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001b20:	f3ef 8009 	mrs	r0, PSP
 8001b24:	f3bf 8f6f 	isb	sy
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <pxCurrentTCBConst>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	f01e 0f10 	tst.w	lr, #16
 8001b30:	bf08      	it	eq
 8001b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b3a:	6010      	str	r0, [r2, #0]
 8001b3c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b44:	f380 8811 	msr	BASEPRI, r0
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f000 ffb0 	bl	8002ab4 <vTaskSwitchContext>
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f380 8811 	msr	BASEPRI, r0
 8001b5c:	bc08      	pop	{r3}
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	6808      	ldr	r0, [r1, #0]
 8001b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b66:	f01e 0f10 	tst.w	lr, #16
 8001b6a:	bf08      	it	eq
 8001b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001b70:	f380 8809 	msr	PSP, r0
 8001b74:	f3bf 8f6f 	isb	sy
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	f3af 8000 	nop.w

08001b80 <pxCurrentTCBConst>:
 8001b80:	20002888 	.word	0x20002888

08001b84 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001b84:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8a:	f383 8811 	msr	BASEPRI, r3
 8001b8e:	f3bf 8f6f 	isb	sy
 8001b92:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001b96:	f000 fe1d 	bl	80027d4 <xTaskIncrementTick>
 8001b9a:	b118      	cbz	r0, 8001ba4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <xPortSysTickHandler+0x28>)
 8001b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ba2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f383 8811 	msr	BASEPRI, r3
 8001baa:	bd08      	pop	{r3, pc}
 8001bac:	e000ed04 	.word	0xe000ed04

08001bb0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <vPortSetupTimerInterrupt+0x1c>)
 8001bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <vPortSetupTimerInterrupt+0x20>)
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <vPortSetupTimerInterrupt+0x24>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	e000e014 	.word	0xe000e014
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001bd8:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <xPortStartScheduler+0xc8>)
 8001bda:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001bdc:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001bde:	6819      	ldr	r1, [r3, #0]
 8001be0:	4291      	cmp	r1, r2
 8001be2:	d108      	bne.n	8001bf6 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be8:	f383 8811 	msr	BASEPRI, r3
 8001bec:	f3bf 8f6f 	isb	sy
 8001bf0:	f3bf 8f4f 	dsb	sy
 8001bf4:	e7fe      	b.n	8001bf4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <xPortStartScheduler+0xd0>)
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d108      	bne.n	8001c10 <xPortStartScheduler+0x38>
 8001bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c02:	f383 8811 	msr	BASEPRI, r3
 8001c06:	f3bf 8f6f 	isb	sy
 8001c0a:	f3bf 8f4f 	dsb	sy
 8001c0e:	e7fe      	b.n	8001c0e <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <xPortStartScheduler+0xd4>)
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001c18:	22ff      	movs	r2, #255	; 0xff
 8001c1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c1c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c1e:	4a24      	ldr	r2, [pc, #144]	; (8001cb0 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c26:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001c2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c2e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001c30:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <xPortStartScheduler+0xdc>)
 8001c32:	2207      	movs	r2, #7
 8001c34:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c36:	2100      	movs	r1, #0
 8001c38:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001c3c:	0600      	lsls	r0, r0, #24
 8001c3e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001c42:	d508      	bpl.n	8001c56 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001c44:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001c48:	0052      	lsls	r2, r2, #1
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f88d 2003 	strb.w	r2, [sp, #3]
 8001c50:	2101      	movs	r1, #1
 8001c52:	4622      	mov	r2, r4
 8001c54:	e7f0      	b.n	8001c38 <xPortStartScheduler+0x60>
 8001c56:	b101      	cbz	r1, 8001c5a <xPortStartScheduler+0x82>
 8001c58:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	0212      	lsls	r2, r2, #8
 8001c5e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001c62:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001c64:	9b01      	ldr	r3, [sp, #4]
 8001c66:	4a11      	ldr	r2, [pc, #68]	; (8001cac <xPortStartScheduler+0xd4>)
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <xPortStartScheduler+0xe0>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001c7c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001c7e:	f7ff ff97 	bl	8001bb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <xPortStartScheduler+0xe4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001c88:	f7ff fee0 	bl	8001a4c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <xPortStartScheduler+0xe8>)
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c94:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001c96:	f7ff fec9 	bl	8001a2c <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001c9a:	f7ff feaf 	bl	80019fc <prvTaskExitError>
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00
 8001ca4:	410fc271 	.word	0x410fc271
 8001ca8:	410fc270 	.word	0x410fc270
 8001cac:	e000e400 	.word	0xe000e400
 8001cb0:	2000008c 	.word	0x2000008c
 8001cb4:	20000090 	.word	0x20000090
 8001cb8:	e000ed20 	.word	0xe000ed20
 8001cbc:	20000004 	.word	0x20000004
 8001cc0:	e000ef34 	.word	0xe000ef34

08001cc4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8001cc4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d90e      	bls.n	8001cea <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001ccc:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <vPortValidateInterruptPriority+0x4c>)
 8001cce:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001cd0:	4a10      	ldr	r2, [pc, #64]	; (8001d14 <vPortValidateInterruptPriority+0x50>)
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d908      	bls.n	8001cea <vPortValidateInterruptPriority+0x26>
 8001cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cdc:	f383 8811 	msr	BASEPRI, r3
 8001ce0:	f3bf 8f6f 	isb	sy
 8001ce4:	f3bf 8f4f 	dsb	sy
 8001ce8:	e7fe      	b.n	8001ce8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <vPortValidateInterruptPriority+0x54>)
 8001cec:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <vPortValidateInterruptPriority+0x58>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d908      	bls.n	8001d0c <vPortValidateInterruptPriority+0x48>
 8001cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	e7fe      	b.n	8001d0a <vPortValidateInterruptPriority+0x46>
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e3f0 	.word	0xe000e3f0
 8001d14:	2000008c 	.word	0x2000008c
 8001d18:	e000ed0c 	.word	0xe000ed0c
 8001d1c:	20000090 	.word	0x20000090

08001d20 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001d20:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <prvInsertBlockIntoFreeList+0x40>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4282      	cmp	r2, r0
 8001d28:	d201      	bcs.n	8001d2e <prvInsertBlockIntoFreeList+0xe>
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	e7fa      	b.n	8001d24 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	185c      	adds	r4, r3, r1
 8001d32:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d34:	bf01      	itttt	eq
 8001d36:	6840      	ldreq	r0, [r0, #4]
 8001d38:	1809      	addeq	r1, r1, r0
 8001d3a:	4618      	moveq	r0, r3
 8001d3c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d3e:	6841      	ldr	r1, [r0, #4]
 8001d40:	1844      	adds	r4, r0, r1
 8001d42:	42a2      	cmp	r2, r4
 8001d44:	d107      	bne.n	8001d56 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d46:	4c07      	ldr	r4, [pc, #28]	; (8001d64 <prvInsertBlockIntoFreeList+0x44>)
 8001d48:	6824      	ldr	r4, [r4, #0]
 8001d4a:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d4c:	bf1f      	itttt	ne
 8001d4e:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d50:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d52:	1909      	addne	r1, r1, r4
 8001d54:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d56:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d58:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d5a:	bf18      	it	ne
 8001d5c:	6018      	strne	r0, [r3, #0]
 8001d5e:	bd10      	pop	{r4, pc}
 8001d60:	2000009c 	.word	0x2000009c
 8001d64:	20000098 	.word	0x20000098

08001d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6c:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8001d6e:	f000 fd23 	bl	80027b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001d72:	493f      	ldr	r1, [pc, #252]	; (8001e70 <pvPortMalloc+0x108>)
 8001d74:	4d3f      	ldr	r5, [pc, #252]	; (8001e74 <pvPortMalloc+0x10c>)
 8001d76:	680b      	ldr	r3, [r1, #0]
 8001d78:	b9fb      	cbnz	r3, 8001dba <pvPortMalloc+0x52>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001d7a:	4a3f      	ldr	r2, [pc, #252]	; (8001e78 <pvPortMalloc+0x110>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d7c:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d7e:	bf1c      	itt	ne
 8001d80:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d82:	4b3e      	ldrne	r3, [pc, #248]	; (8001e7c <pvPortMalloc+0x114>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d84:	4e3e      	ldr	r6, [pc, #248]	; (8001e80 <pvPortMalloc+0x118>)
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d86:	bf1a      	itte	ne
 8001d88:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d8c:	1a9b      	subne	r3, r3, r2
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d8e:	f242 7310 	movweq	r3, #10000	; 0x2710
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d92:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001d94:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d96:	f023 0307 	bic.w	r3, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d9e:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8001da0:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001da2:	6018      	str	r0, [r3, #0]
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8001da4:	600b      	str	r3, [r1, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001da6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001da8:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001dac:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001dae:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001db0:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <pvPortMalloc+0x120>)
 8001db2:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001db4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001db8:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001dba:	682f      	ldr	r7, [r5, #0]
 8001dbc:	4227      	tst	r7, r4
 8001dbe:	d146      	bne.n	8001e4e <pvPortMalloc+0xe6>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d045      	beq.n	8001e50 <pvPortMalloc+0xe8>
			{
				xWantedSize += xHeapStructSize;
 8001dc4:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001dc8:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001dca:	bf1c      	itt	ne
 8001dcc:	f023 0307 	bicne.w	r3, r3, #7
 8001dd0:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d039      	beq.n	8001e4a <pvPortMalloc+0xe2>
 8001dd6:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <pvPortMalloc+0x120>)
 8001dd8:	6816      	ldr	r6, [r2, #0]
 8001dda:	42b3      	cmp	r3, r6
 8001ddc:	4690      	mov	r8, r2
 8001dde:	d836      	bhi.n	8001e4e <pvPortMalloc+0xe6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8001de0:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <pvPortMalloc+0x118>)
 8001de2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001de4:	6868      	ldr	r0, [r5, #4]
 8001de6:	4283      	cmp	r3, r0
 8001de8:	d803      	bhi.n	8001df2 <pvPortMalloc+0x8a>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001dea:	6809      	ldr	r1, [r1, #0]
 8001dec:	428d      	cmp	r5, r1
 8001dee:	d106      	bne.n	8001dfe <pvPortMalloc+0x96>
 8001df0:	e02d      	b.n	8001e4e <pvPortMalloc+0xe6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001df2:	682c      	ldr	r4, [r5, #0]
 8001df4:	2c00      	cmp	r4, #0
 8001df6:	d0f8      	beq.n	8001dea <pvPortMalloc+0x82>
 8001df8:	462a      	mov	r2, r5
 8001dfa:	4625      	mov	r5, r4
 8001dfc:	e7f2      	b.n	8001de4 <pvPortMalloc+0x7c>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001dfe:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e00:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e02:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e04:	1ac2      	subs	r2, r0, r3
 8001e06:	2a10      	cmp	r2, #16
 8001e08:	d90f      	bls.n	8001e2a <pvPortMalloc+0xc2>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001e0a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e0c:	0741      	lsls	r1, r0, #29
 8001e0e:	d008      	beq.n	8001e22 <pvPortMalloc+0xba>
 8001e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e14:	f383 8811 	msr	BASEPRI, r3
 8001e18:	f3bf 8f6f 	isb	sy
 8001e1c:	f3bf 8f4f 	dsb	sy
 8001e20:	e7fe      	b.n	8001e20 <pvPortMalloc+0xb8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e22:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001e24:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e26:	f7ff ff7b 	bl	8001d20 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e2a:	4916      	ldr	r1, [pc, #88]	; (8001e84 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e2c:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e2e:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e30:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e32:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e34:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8001e36:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e3a:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e3e:	bf38      	it	cc
 8001e40:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e42:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e44:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001e46:	602b      	str	r3, [r5, #0]
 8001e48:	e002      	b.n	8001e50 <pvPortMalloc+0xe8>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001e4a:	461c      	mov	r4, r3
 8001e4c:	e000      	b.n	8001e50 <pvPortMalloc+0xe8>
 8001e4e:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001e50:	f000 fd58 	bl	8002904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e54:	0763      	lsls	r3, r4, #29
 8001e56:	d008      	beq.n	8001e6a <pvPortMalloc+0x102>
 8001e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5c:	f383 8811 	msr	BASEPRI, r3
 8001e60:	f3bf 8f6f 	isb	sy
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	e7fe      	b.n	8001e68 <pvPortMalloc+0x100>
	return pvReturn;
}
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e70:	20000098 	.word	0x20000098
 8001e74:	200027b4 	.word	0x200027b4
 8001e78:	200000a4 	.word	0x200000a4
 8001e7c:	200027b4 	.word	0x200027b4
 8001e80:	2000009c 	.word	0x2000009c
 8001e84:	200027b8 	.word	0x200027b8
 8001e88:	20000094 	.word	0x20000094

08001e8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001e8c:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8001e8e:	4604      	mov	r4, r0
 8001e90:	b370      	cbz	r0, 8001ef0 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <vPortFree+0x68>)
 8001e94:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	4213      	tst	r3, r2
 8001e9c:	d108      	bne.n	8001eb0 <vPortFree+0x24>
 8001e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea2:	f383 8811 	msr	BASEPRI, r3
 8001ea6:	f3bf 8f6f 	isb	sy
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	e7fe      	b.n	8001eae <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001eb0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001eb4:	b141      	cbz	r1, 8001ec8 <vPortFree+0x3c>
 8001eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eba:	f383 8811 	msr	BASEPRI, r3
 8001ebe:	f3bf 8f6f 	isb	sy
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	e7fe      	b.n	8001ec6 <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ec8:	ea23 0302 	bic.w	r3, r3, r2
 8001ecc:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001ed0:	f000 fc72 	bl	80027b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <vPortFree+0x6c>)
 8001ed6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001eda:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001edc:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ee0:	440b      	add	r3, r1
 8001ee2:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ee4:	f7ff ff1c 	bl	8001d20 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8001eec:	f000 bd0a 	b.w	8002904 <xTaskResumeAll>
 8001ef0:	bd10      	pop	{r4, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200027b4 	.word	0x200027b4
 8001ef8:	20000094 	.word	0x20000094

08001efc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001f00:	6c02      	ldr	r2, [r0, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f02:	6b86      	ldr	r6, [r0, #56]	; 0x38

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001f04:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001f06:	b932      	cbnz	r2, 8001f16 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f08:	6805      	ldr	r5, [r0, #0]
 8001f0a:	bb2d      	cbnz	r5, 8001f58 <prvCopyDataToQueue+0x5c>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001f0c:	6840      	ldr	r0, [r0, #4]
 8001f0e:	f000 ff2b 	bl	8002d68 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001f12:	6065      	str	r5, [r4, #4]
 8001f14:	e027      	b.n	8001f66 <prvCopyDataToQueue+0x6a>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001f16:	b965      	cbnz	r5, 8001f32 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001f18:	6880      	ldr	r0, [r0, #8]
 8001f1a:	f001 fcd7 	bl	80038cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001f1e:	68a2      	ldr	r2, [r4, #8]
 8001f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f22:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f24:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001f26:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d317      	bcc.n	8001f5c <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	60a3      	str	r3, [r4, #8]
 8001f30:	e014      	b.n	8001f5c <prvCopyDataToQueue+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f32:	68c0      	ldr	r0, [r0, #12]
 8001f34:	f001 fcca 	bl	80038cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f3a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f3c:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f3e:	425b      	negs	r3, r3
 8001f40:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f42:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f44:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001f46:	bf3e      	ittt	cc
 8001f48:	6862      	ldrcc	r2, [r4, #4]
 8001f4a:	189b      	addcc	r3, r3, r2
 8001f4c:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001f4e:	2d02      	cmp	r5, #2
 8001f50:	d106      	bne.n	8001f60 <prvCopyDataToQueue+0x64>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f52:	b13e      	cbz	r6, 8001f64 <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001f54:	3e01      	subs	r6, #1
 8001f56:	e003      	b.n	8001f60 <prvCopyDataToQueue+0x64>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8001f58:	4610      	mov	r0, r2
 8001f5a:	e004      	b.n	8001f66 <prvCopyDataToQueue+0x6a>
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	e002      	b.n	8001f66 <prvCopyDataToQueue+0x6a>
 8001f60:	2000      	movs	r0, #0
 8001f62:	e000      	b.n	8001f66 <prvCopyDataToQueue+0x6a>
 8001f64:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001f66:	3601      	adds	r6, #1
 8001f68:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}

08001f6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001f72:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f74:	b162      	cbz	r2, 8001f90 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f76:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f78:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f7a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f7c:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f7e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001f80:	bf24      	itt	cs
 8001f82:	6819      	ldrcs	r1, [r3, #0]
 8001f84:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001f86:	68d9      	ldr	r1, [r3, #12]
	}
}
 8001f88:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001f8c:	f001 bc9e 	b.w	80038cc <memcpy>
	}
}
 8001f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001f96:	b570      	push	{r4, r5, r6, lr}
 8001f98:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001f9a:	f7ff fd8b 	bl	8001ab4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001f9e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fa2:	f104 0624 	add.w	r6, r4, #36	; 0x24
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001fa6:	b26d      	sxtb	r5, r5

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fa8:	2d00      	cmp	r5, #0
 8001faa:	dd0a      	ble.n	8001fc2 <prvUnlockQueue+0x2c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fae:	b143      	cbz	r3, 8001fc2 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fb0:	4630      	mov	r0, r6
 8001fb2:	f000 fdf1 	bl	8002b98 <xTaskRemoveFromEventList>
 8001fb6:	b108      	cbz	r0, 8001fbc <prvUnlockQueue+0x26>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001fb8:	f000 fe7a 	bl	8002cb0 <vTaskMissedYield>
 8001fbc:	3d01      	subs	r5, #1
 8001fbe:	b26d      	sxtb	r5, r5
 8001fc0:	e7f2      	b.n	8001fa8 <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001fc2:	23ff      	movs	r3, #255	; 0xff
 8001fc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001fc8:	f7ff fd96 	bl	8001af8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001fcc:	f7ff fd72 	bl	8001ab4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001fd0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fd4:	f104 0610 	add.w	r6, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001fd8:	b26d      	sxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001fda:	2d00      	cmp	r5, #0
 8001fdc:	dd0a      	ble.n	8001ff4 <prvUnlockQueue+0x5e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fde:	6923      	ldr	r3, [r4, #16]
 8001fe0:	b143      	cbz	r3, 8001ff4 <prvUnlockQueue+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fe2:	4630      	mov	r0, r6
 8001fe4:	f000 fdd8 	bl	8002b98 <xTaskRemoveFromEventList>
 8001fe8:	b108      	cbz	r0, 8001fee <prvUnlockQueue+0x58>
				{
					vTaskMissedYield();
 8001fea:	f000 fe61 	bl	8002cb0 <vTaskMissedYield>
 8001fee:	3d01      	subs	r5, #1
 8001ff0:	b26d      	sxtb	r5, r5
 8001ff2:	e7f2      	b.n	8001fda <prvUnlockQueue+0x44>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001ff4:	23ff      	movs	r3, #255	; 0xff
 8001ff6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8001ffe:	f7ff bd7b 	b.w	8001af8 <vPortExitCritical>
	...

08002004 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002008:	4604      	mov	r4, r0
 800200a:	b940      	cbnz	r0, 800201e <xQueueGenericReset+0x1a>
 800200c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002010:	f383 8811 	msr	BASEPRI, r3
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	e7fe      	b.n	800201c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800201e:	f7ff fd49 	bl	8001ab4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002022:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002024:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002026:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002028:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800202a:	4343      	muls	r3, r0
 800202c:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800202e:	1a1b      	subs	r3, r3, r0
 8002030:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002032:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002034:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002036:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 8002038:	23ff      	movs	r3, #255	; 0xff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800203a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 800203c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002044:	b97d      	cbnz	r5, 8002066 <xQueueGenericReset+0x62>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002046:	6923      	ldr	r3, [r4, #16]
 8002048:	b1ab      	cbz	r3, 8002076 <xQueueGenericReset+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800204a:	f104 0010 	add.w	r0, r4, #16
 800204e:	f000 fda3 	bl	8002b98 <xTaskRemoveFromEventList>
 8002052:	b180      	cbz	r0, 8002076 <xQueueGenericReset+0x72>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <xQueueGenericReset+0x7c>)
 8002056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	f3bf 8f6f 	isb	sy
 8002064:	e007      	b.n	8002076 <xQueueGenericReset+0x72>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002066:	f104 0010 	add.w	r0, r4, #16
 800206a:	f7ff fc85 	bl	8001978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800206e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002072:	f7ff fc81 	bl	8001978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002076:	f7ff fd3f 	bl	8001af8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800207a:	2001      	movs	r0, #1
 800207c:	bd38      	pop	{r3, r4, r5, pc}
 800207e:	bf00      	nop
 8002080:	e000ed04 	.word	0xe000ed04

08002084 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	460d      	mov	r5, r1
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002088:	4606      	mov	r6, r0
 800208a:	b940      	cbnz	r0, 800209e <xQueueGenericCreate+0x1a>
 800208c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002090:	f383 8811 	msr	BASEPRI, r3
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	e7fe      	b.n	800209c <xQueueGenericCreate+0x18>
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800209e:	4348      	muls	r0, r1
 80020a0:	3048      	adds	r0, #72	; 0x48
 80020a2:	f7ff fe61 	bl	8001d68 <pvPortMalloc>

		if( pxNewQueue != NULL )
 80020a6:	4604      	mov	r4, r0
 80020a8:	b158      	cbz	r0, 80020c2 <xQueueGenericCreate+0x3e>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020aa:	b90d      	cbnz	r5, 80020b0 <xQueueGenericCreate+0x2c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020ac:	6020      	str	r0, [r4, #0]
 80020ae:	e002      	b.n	80020b6 <xQueueGenericCreate+0x32>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020b0:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80020b4:	6003      	str	r3, [r0, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80020b6:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80020b8:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020ba:	2101      	movs	r1, #1
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff ffa1 	bl	8002004 <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
 80020c2:	4620      	mov	r0, r4
 80020c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080020c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80020c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020cc:	4689      	mov	r9, r1
 80020ce:	9201      	str	r2, [sp, #4]
 80020d0:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80020d2:	4604      	mov	r4, r0
 80020d4:	b940      	cbnz	r0, 80020e8 <xQueueGenericSend+0x20>
 80020d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020da:	f383 8811 	msr	BASEPRI, r3
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	f3bf 8f4f 	dsb	sy
 80020e6:	e7fe      	b.n	80020e6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020e8:	b951      	cbnz	r1, 8002100 <xQueueGenericSend+0x38>
 80020ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020ec:	b143      	cbz	r3, 8002100 <xQueueGenericSend+0x38>
 80020ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f2:	f383 8811 	msr	BASEPRI, r3
 80020f6:	f3bf 8f6f 	isb	sy
 80020fa:	f3bf 8f4f 	dsb	sy
 80020fe:	e7fe      	b.n	80020fe <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002100:	2f02      	cmp	r7, #2
 8002102:	d10b      	bne.n	800211c <xQueueGenericSend+0x54>
 8002104:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002106:	2b01      	cmp	r3, #1
 8002108:	d008      	beq.n	800211c <xQueueGenericSend+0x54>
 800210a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	e7fe      	b.n	800211a <xQueueGenericSend+0x52>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800211c:	f000 fdce 	bl	8002cbc <xTaskGetSchedulerState>
 8002120:	b910      	cbnz	r0, 8002128 <xQueueGenericSend+0x60>
 8002122:	9e01      	ldr	r6, [sp, #4]
 8002124:	b10e      	cbz	r6, 800212a <xQueueGenericSend+0x62>
 8002126:	e072      	b.n	800220e <xQueueGenericSend+0x146>
 8002128:	2600      	movs	r6, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800212a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8002228 <xQueueGenericSend+0x160>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800212e:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002132:	f7ff fcbf 	bl	8001ab4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002136:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002138:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800213a:	429a      	cmp	r2, r3
 800213c:	d301      	bcc.n	8002142 <xQueueGenericSend+0x7a>
 800213e:	2f02      	cmp	r7, #2
 8002140:	d117      	bne.n	8002172 <xQueueGenericSend+0xaa>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002142:	463a      	mov	r2, r7
 8002144:	4649      	mov	r1, r9
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff fed8 	bl	8001efc <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800214c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800214e:	b11b      	cbz	r3, 8002158 <xQueueGenericSend+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002150:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002154:	f000 fd20 	bl	8002b98 <xTaskRemoveFromEventList>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002158:	b138      	cbz	r0, 800216a <xQueueGenericSend+0xa2>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <xQueueGenericSend+0x160>)
 800215c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	f3bf 8f4f 	dsb	sy
 8002166:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800216a:	f7ff fcc5 	bl	8001af8 <vPortExitCritical>
				return pdPASS;
 800216e:	2001      	movs	r0, #1
 8002170:	e056      	b.n	8002220 <xQueueGenericSend+0x158>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002172:	9d01      	ldr	r5, [sp, #4]
 8002174:	b91d      	cbnz	r5, 800217e <xQueueGenericSend+0xb6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002176:	f7ff fcbf 	bl	8001af8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800217a:	4628      	mov	r0, r5
 800217c:	e050      	b.n	8002220 <xQueueGenericSend+0x158>
				}
				else if( xEntryTimeSet == pdFALSE )
 800217e:	b916      	cbnz	r6, 8002186 <xQueueGenericSend+0xbe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002180:	a802      	add	r0, sp, #8
 8002182:	f000 fd4b 	bl	8002c1c <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002186:	f7ff fcb7 	bl	8001af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800218a:	f000 fb15 	bl	80027b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800218e:	f7ff fc91 	bl	8001ab4 <vPortEnterCritical>
 8002192:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002196:	2bff      	cmp	r3, #255	; 0xff
 8002198:	bf08      	it	eq
 800219a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800219e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80021a2:	2bff      	cmp	r3, #255	; 0xff
 80021a4:	bf08      	it	eq
 80021a6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80021aa:	f7ff fca5 	bl	8001af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021ae:	a901      	add	r1, sp, #4
 80021b0:	a802      	add	r0, sp, #8
 80021b2:	f000 fd43 	bl	8002c3c <xTaskCheckForTimeOut>
 80021b6:	bb18      	cbnz	r0, 8002200 <xQueueGenericSend+0x138>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80021b8:	f7ff fc7c 	bl	8001ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80021bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80021be:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80021c0:	f7ff fc9a 	bl	8001af8 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021c4:	42ae      	cmp	r6, r5
 80021c6:	d115      	bne.n	80021f4 <xQueueGenericSend+0x12c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021c8:	9901      	ldr	r1, [sp, #4]
 80021ca:	f104 0010 	add.w	r0, r4, #16
 80021ce:	f000 fcab 	bl	8002b28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021d2:	4620      	mov	r0, r4
 80021d4:	f7ff fedf 	bl	8001f96 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021d8:	f000 fb94 	bl	8002904 <xTaskResumeAll>
 80021dc:	b108      	cbz	r0, 80021e2 <xQueueGenericSend+0x11a>
 80021de:	2601      	movs	r6, #1
 80021e0:	e7a7      	b.n	8002132 <xQueueGenericSend+0x6a>
				{
					portYIELD_WITHIN_API();
 80021e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80021e6:	f8ca 3000 	str.w	r3, [sl]
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	e7f4      	b.n	80021de <xQueueGenericSend+0x116>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff fece 	bl	8001f96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021fa:	f000 fb83 	bl	8002904 <xTaskResumeAll>
 80021fe:	e7ee      	b.n	80021de <xQueueGenericSend+0x116>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002200:	4620      	mov	r0, r4
 8002202:	f7ff fec8 	bl	8001f96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002206:	f000 fb7d 	bl	8002904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800220a:	2000      	movs	r0, #0
 800220c:	e008      	b.n	8002220 <xQueueGenericSend+0x158>
 800220e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	e7fe      	b.n	800221e <xQueueGenericSend+0x156>
		}
	}
}
 8002220:	b004      	add	sp, #16
 8002222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002226:	bf00      	nop
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800222c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002230:	4688      	mov	r8, r1
 8002232:	4691      	mov	r9, r2
 8002234:	461f      	mov	r7, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002236:	4604      	mov	r4, r0
 8002238:	b940      	cbnz	r0, 800224c <xQueueGenericSendFromISR+0x20>
 800223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223e:	f383 8811 	msr	BASEPRI, r3
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	e7fe      	b.n	800224a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800224c:	b951      	cbnz	r1, 8002264 <xQueueGenericSendFromISR+0x38>
 800224e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002250:	b143      	cbz	r3, 8002264 <xQueueGenericSendFromISR+0x38>
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	e7fe      	b.n	8002262 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002264:	2f02      	cmp	r7, #2
 8002266:	d10b      	bne.n	8002280 <xQueueGenericSendFromISR+0x54>
 8002268:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800226a:	2b01      	cmp	r3, #1
 800226c:	d008      	beq.n	8002280 <xQueueGenericSendFromISR+0x54>
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	e7fe      	b.n	800227e <xQueueGenericSendFromISR+0x52>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002280:	f7ff fd20 	bl	8001cc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002284:	f3ef 8611 	mrs	r6, BASEPRI
 8002288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002298:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800229a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800229c:	429a      	cmp	r2, r3
 800229e:	d301      	bcc.n	80022a4 <xQueueGenericSendFromISR+0x78>
 80022a0:	2f02      	cmp	r7, #2
 80022a2:	d11d      	bne.n	80022e0 <xQueueGenericSendFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80022a4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022a8:	463a      	mov	r2, r7
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80022aa:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022ac:	4641      	mov	r1, r8
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7ff fe24 	bl	8001efc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80022b4:	1c6b      	adds	r3, r5, #1
 80022b6:	d10d      	bne.n	80022d4 <xQueueGenericSendFromISR+0xa8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022ba:	b17b      	cbz	r3, 80022dc <xQueueGenericSendFromISR+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80022c0:	f000 fc6a 	bl	8002b98 <xTaskRemoveFromEventList>
 80022c4:	b150      	cbz	r0, 80022dc <xQueueGenericSendFromISR+0xb0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022c6:	f1b9 0f00 	cmp.w	r9, #0
 80022ca:	d007      	beq.n	80022dc <xQueueGenericSendFromISR+0xb0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022cc:	2001      	movs	r0, #1
 80022ce:	f8c9 0000 	str.w	r0, [r9]
 80022d2:	e006      	b.n	80022e2 <xQueueGenericSendFromISR+0xb6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022d4:	3501      	adds	r5, #1
 80022d6:	b26d      	sxtb	r5, r5
 80022d8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 80022dc:	2001      	movs	r0, #1
 80022de:	e000      	b.n	80022e2 <xQueueGenericSendFromISR+0xb6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022e0:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022e2:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 80022e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080022ec <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80022ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022f0:	4688      	mov	r8, r1
 80022f2:	9201      	str	r2, [sp, #4]
 80022f4:	4699      	mov	r9, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80022f6:	4604      	mov	r4, r0
 80022f8:	b940      	cbnz	r0, 800230c <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fe:	f383 8811 	msr	BASEPRI, r3
 8002302:	f3bf 8f6f 	isb	sy
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	e7fe      	b.n	800230a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800230c:	b951      	cbnz	r1, 8002324 <xQueueGenericReceive+0x38>
 800230e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002310:	b143      	cbz	r3, 8002324 <xQueueGenericReceive+0x38>
 8002312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	e7fe      	b.n	8002322 <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002324:	f000 fcca 	bl	8002cbc <xTaskGetSchedulerState>
 8002328:	b910      	cbnz	r0, 8002330 <xQueueGenericReceive+0x44>
 800232a:	9e01      	ldr	r6, [sp, #4]
 800232c:	b10e      	cbz	r6, 8002332 <xQueueGenericReceive+0x46>
 800232e:	e08a      	b.n	8002446 <xQueueGenericReceive+0x15a>
 8002330:	2600      	movs	r6, #0

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8002332:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8002460 <xQueueGenericReceive+0x174>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8002336:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002338:	f7ff fbbc 	bl	8001ab4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800233c:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800233e:	b33d      	cbz	r5, 8002390 <xQueueGenericReceive+0xa4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002340:	4641      	mov	r1, r8
 8002342:	4620      	mov	r0, r4
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002344:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002346:	f7ff fe11 	bl	8001f6c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800234a:	f1b9 0f00 	cmp.w	r9, #0
 800234e:	d10b      	bne.n	8002368 <xQueueGenericReceive+0x7c>
					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002350:	6823      	ldr	r3, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002352:	3d01      	subs	r5, #1
 8002354:	63a5      	str	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002356:	b913      	cbnz	r3, 800235e <xQueueGenericReceive+0x72>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002358:	f000 fd56 	bl	8002e08 <pvTaskIncrementMutexHeldCount>
 800235c:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800235e:	6923      	ldr	r3, [r4, #16]
 8002360:	b193      	cbz	r3, 8002388 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002362:	f104 0010 	add.w	r0, r4, #16
 8002366:	e004      	b.n	8002372 <xQueueGenericReceive+0x86>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002368:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800236a:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800236c:	b163      	cbz	r3, 8002388 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800236e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002372:	f000 fc11 	bl	8002b98 <xTaskRemoveFromEventList>
 8002376:	b138      	cbz	r0, 8002388 <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <xQueueGenericReceive+0x174>)
 800237a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8002388:	f7ff fbb6 	bl	8001af8 <vPortExitCritical>
				return pdPASS;
 800238c:	2001      	movs	r0, #1
 800238e:	e063      	b.n	8002458 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002390:	9d01      	ldr	r5, [sp, #4]
 8002392:	b915      	cbnz	r5, 800239a <xQueueGenericReceive+0xae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002394:	f7ff fbb0 	bl	8001af8 <vPortExitCritical>
 8002398:	e053      	b.n	8002442 <xQueueGenericReceive+0x156>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 800239a:	b916      	cbnz	r6, 80023a2 <xQueueGenericReceive+0xb6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800239c:	a802      	add	r0, sp, #8
 800239e:	f000 fc3d 	bl	8002c1c <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023a2:	f7ff fba9 	bl	8001af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023a6:	f000 fa07 	bl	80027b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023aa:	f7ff fb83 	bl	8001ab4 <vPortEnterCritical>
 80023ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80023b2:	2bff      	cmp	r3, #255	; 0xff
 80023b4:	bf08      	it	eq
 80023b6:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80023ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80023be:	2bff      	cmp	r3, #255	; 0xff
 80023c0:	bf08      	it	eq
 80023c2:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80023c6:	f7ff fb97 	bl	8001af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023ca:	a901      	add	r1, sp, #4
 80023cc:	a802      	add	r0, sp, #8
 80023ce:	f000 fc35 	bl	8002c3c <xTaskCheckForTimeOut>
 80023d2:	bb50      	cbnz	r0, 800242a <xQueueGenericReceive+0x13e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023d4:	f7ff fb6e 	bl	8001ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023d8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80023da:	f7ff fb8d 	bl	8001af8 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023de:	b9f5      	cbnz	r5, 800241e <xQueueGenericReceive+0x132>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	b933      	cbnz	r3, 80023f2 <xQueueGenericReceive+0x106>
					{
						taskENTER_CRITICAL();
 80023e4:	f7ff fb66 	bl	8001ab4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80023e8:	6860      	ldr	r0, [r4, #4]
 80023ea:	f000 fc77 	bl	8002cdc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80023ee:	f7ff fb83 	bl	8001af8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023f2:	9901      	ldr	r1, [sp, #4]
 80023f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023f8:	f000 fb96 	bl	8002b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7ff fdca 	bl	8001f96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002402:	f000 fa7f 	bl	8002904 <xTaskResumeAll>
 8002406:	b108      	cbz	r0, 800240c <xQueueGenericReceive+0x120>
 8002408:	2601      	movs	r6, #1
 800240a:	e795      	b.n	8002338 <xQueueGenericReceive+0x4c>
				{
					portYIELD_WITHIN_API();
 800240c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002410:	f8ca 3000 	str.w	r3, [sl]
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	e7f4      	b.n	8002408 <xQueueGenericReceive+0x11c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff fdb9 	bl	8001f96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002424:	f000 fa6e 	bl	8002904 <xTaskResumeAll>
 8002428:	e7ee      	b.n	8002408 <xQueueGenericReceive+0x11c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff fdb3 	bl	8001f96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002430:	f000 fa68 	bl	8002904 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002434:	f7ff fb3e 	bl	8001ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002438:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800243a:	f7ff fb5d 	bl	8001af8 <vPortExitCritical>
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800243e:	2d00      	cmp	r5, #0
 8002440:	d1e2      	bne.n	8002408 <xQueueGenericReceive+0x11c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002442:	4628      	mov	r0, r5
 8002444:	e008      	b.n	8002458 <xQueueGenericReceive+0x16c>
 8002446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	e7fe      	b.n	8002456 <xQueueGenericReceive+0x16a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002458:	b004      	add	sp, #16
 800245a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800245e:	bf00      	nop
 8002460:	e000ed04 	.word	0xe000ed04

08002464 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002464:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <vQueueAddToRegistry+0x24>)
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002468:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800246a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800246e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8002472:	b925      	cbnz	r5, 800247e <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <vQueueAddToRegistry+0x24>)
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002476:	6060      	str	r0, [r4, #4]
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002478:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800247c:	bd30      	pop	{r4, r5, pc}
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800247e:	3301      	adds	r3, #1
 8002480:	2b08      	cmp	r3, #8
 8002482:	d1f2      	bne.n	800246a <vQueueAddToRegistry+0x6>
 8002484:	bd30      	pop	{r4, r5, pc}
 8002486:	bf00      	nop
 8002488:	20002938 	.word	0x20002938

0800248c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	4604      	mov	r4, r0
 8002490:	460d      	mov	r5, r1
 8002492:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002494:	f7ff fb0e 	bl	8001ab4 <vPortEnterCritical>
 8002498:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800249c:	2bff      	cmp	r3, #255	; 0xff
 800249e:	bf04      	itt	eq
 80024a0:	2300      	moveq	r3, #0
 80024a2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80024a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80024aa:	2bff      	cmp	r3, #255	; 0xff
 80024ac:	bf04      	itt	eq
 80024ae:	2300      	moveq	r3, #0
 80024b0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80024b4:	f7ff fb20 	bl	8001af8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024ba:	b92b      	cbnz	r3, 80024c8 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024bc:	4632      	mov	r2, r6
 80024be:	4629      	mov	r1, r5
 80024c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024c4:	f000 fb4a 	bl	8002b5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80024c8:	4620      	mov	r0, r4
	}
 80024ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80024ce:	f7ff bd62 	b.w	8001f96 <prvUnlockQueue>
	...

080024d4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <prvResetNextTaskUnblockTime+0x1c>)
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <prvResetNextTaskUnblockTime+0x20>)
 80024dc:	b911      	cbnz	r1, 80024e4 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024de:	f04f 32ff 	mov.w	r2, #4294967295
 80024e2:	e003      	b.n	80024ec <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024e8:	68d2      	ldr	r2, [r2, #12]
 80024ea:	6852      	ldr	r2, [r2, #4]
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	4770      	bx	lr
 80024f0:	200027c0 	.word	0x200027c0
 80024f4:	2000288c 	.word	0x2000288c

080024f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024fa:	4b1c      	ldr	r3, [pc, #112]	; (800256c <prvAddCurrentTaskToDelayedList+0x74>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024fc:	4d1c      	ldr	r5, [pc, #112]	; (8002570 <prvAddCurrentTaskToDelayedList+0x78>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024fe:	681e      	ldr	r6, [r3, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002500:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002502:	6828      	ldr	r0, [r5, #0]
 8002504:	3004      	adds	r0, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002506:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002508:	f7ff fa68 	bl	80019dc <uxListRemove>
 800250c:	462b      	mov	r3, r5
 800250e:	b940      	cbnz	r0, 8002522 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002510:	682a      	ldr	r2, [r5, #0]
 8002512:	4d18      	ldr	r5, [pc, #96]	; (8002574 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002514:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002516:	6828      	ldr	r0, [r5, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	408a      	lsls	r2, r1
 800251c:	ea20 0202 	bic.w	r2, r0, r2
 8002520:	602a      	str	r2, [r5, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002522:	1c62      	adds	r2, r4, #1
 8002524:	d107      	bne.n	8002536 <prvAddCurrentTaskToDelayedList+0x3e>
 8002526:	b137      	cbz	r7, 8002536 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	4813      	ldr	r0, [pc, #76]	; (8002578 <prvAddCurrentTaskToDelayedList+0x80>)
 800252c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800252e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002532:	f7ff ba2f 	b.w	8001994 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002536:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <prvAddCurrentTaskToDelayedList+0x78>)
 800253c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800253e:	42a6      	cmp	r6, r4
 8002540:	d907      	bls.n	8002552 <prvAddCurrentTaskToDelayedList+0x5a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <prvAddCurrentTaskToDelayedList+0x84>)
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	6811      	ldr	r1, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002548:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800254c:	3104      	adds	r1, #4
 800254e:	f7ff ba2d 	b.w	80019ac <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <prvAddCurrentTaskToDelayedList+0x88>)
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	6811      	ldr	r1, [r2, #0]
 8002558:	3104      	adds	r1, #4
 800255a:	f7ff fa27 	bl	80019ac <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <prvAddCurrentTaskToDelayedList+0x8c>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002564:	bf38      	it	cc
 8002566:	601c      	strcc	r4, [r3, #0]
 8002568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800256a:	bf00      	nop
 800256c:	20002890 	.word	0x20002890
 8002570:	20002888 	.word	0x20002888
 8002574:	200028e0 	.word	0x200028e0
 8002578:	200028cc 	.word	0x200028cc
 800257c:	20002894 	.word	0x20002894
 8002580:	200027c0 	.word	0x200027c0
 8002584:	2000288c 	.word	0x2000288c

08002588 <prvTaskIsTaskSuspended.part.0>:
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	e7fe      	b.n	8002598 <prvTaskIsTaskSuspended.part.0+0x10>
	...

0800259c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800259c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025a0:	0095      	lsls	r5, r2, #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80025a2:	4680      	mov	r8, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025a4:	4628      	mov	r0, r5
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80025a6:	460f      	mov	r7, r1
 80025a8:	4699      	mov	r9, r3
 80025aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ac:	f7ff fbdc 	bl	8001d68 <pvPortMalloc>

			if( pxStack != NULL )
 80025b0:	4682      	mov	sl, r0
 80025b2:	2800      	cmp	r0, #0
 80025b4:	f000 80a0 	beq.w	80026f8 <xTaskCreate+0x15c>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80025b8:	2054      	movs	r0, #84	; 0x54
 80025ba:	f7ff fbd5 	bl	8001d68 <pvPortMalloc>

				if( pxNewTCB != NULL )
 80025be:	4604      	mov	r4, r0
 80025c0:	b150      	cbz	r0, 80025d8 <xTaskCreate+0x3c>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80025c2:	3d04      	subs	r5, #4
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */

				if( pxNewTCB != NULL )
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025c4:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80025c8:	44aa      	add	sl, r5
 80025ca:	1e7b      	subs	r3, r7, #1
 80025cc:	f02a 0a07 	bic.w	sl, sl, #7
 80025d0:	f100 0233 	add.w	r2, r0, #51	; 0x33
 80025d4:	370f      	adds	r7, #15
 80025d6:	e005      	b.n	80025e4 <xTaskCreate+0x48>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025d8:	4650      	mov	r0, sl
 80025da:	f7ff fc57 	bl	8001e8c <vPortFree>
 80025de:	e08b      	b.n	80026f8 <xTaskCreate+0x15c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025e0:	429f      	cmp	r7, r3
 80025e2:	d006      	beq.n	80025f2 <xTaskCreate+0x56>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025e4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80025e8:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80025ec:	7819      	ldrb	r1, [r3, #0]
 80025ee:	2900      	cmp	r1, #0
 80025f0:	d1f6      	bne.n	80025e0 <xTaskCreate+0x44>
 80025f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80025f4:	2d06      	cmp	r5, #6
 80025f6:	bf28      	it	cs
 80025f8:	2506      	movcs	r5, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025fa:	f04f 0b00 	mov.w	fp, #0
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025fe:	1d27      	adds	r7, r4, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002600:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002602:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002604:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002606:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 800260a:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800260e:	f7ff f9be 	bl	800198e <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002612:	f1c5 0507 	rsb	r5, r5, #7
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002616:	f104 0018 	add.w	r0, r4, #24
 800261a:	f7ff f9b8 	bl	800198e <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800261e:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002622:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002624:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002626:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002628:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800262c:	464a      	mov	r2, r9
 800262e:	4641      	mov	r1, r8
 8002630:	4650      	mov	r0, sl
 8002632:	f7ff fa15 	bl	8001a60 <pxPortInitialiseStack>
 8002636:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002638:	b106      	cbz	r6, 800263c <xTaskCreate+0xa0>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800263a:	6034      	str	r4, [r6, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800263c:	f7ff fa3a 	bl	8001ab4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002640:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <xTaskCreate+0x164>)
		if( pxCurrentTCB == NULL )
 8002642:	4e30      	ldr	r6, [pc, #192]	; (8002704 <xTaskCreate+0x168>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8002730 <xTaskCreate+0x194>
 800264a:	3201      	adds	r2, #1
 800264c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800264e:	6835      	ldr	r5, [r6, #0]
 8002650:	bb15      	cbnz	r5, 8002698 <xTaskCreate+0xfc>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002652:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d127      	bne.n	80026aa <xTaskCreate+0x10e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800265a:	eb08 0005 	add.w	r0, r8, r5
 800265e:	3514      	adds	r5, #20
 8002660:	f7ff f98a 	bl	8001978 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002664:	2d8c      	cmp	r5, #140	; 0x8c
 8002666:	d1f8      	bne.n	800265a <xTaskCreate+0xbe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002668:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002734 <xTaskCreate+0x198>
	vListInitialise( &xDelayedTaskList2 );
 800266c:	4d26      	ldr	r5, [pc, #152]	; (8002708 <xTaskCreate+0x16c>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800266e:	4648      	mov	r0, r9
 8002670:	f7ff f982 	bl	8001978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002674:	4628      	mov	r0, r5
 8002676:	f7ff f97f 	bl	8001978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800267a:	4824      	ldr	r0, [pc, #144]	; (800270c <xTaskCreate+0x170>)
 800267c:	f7ff f97c 	bl	8001978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002680:	4823      	ldr	r0, [pc, #140]	; (8002710 <xTaskCreate+0x174>)
 8002682:	f7ff f979 	bl	8001978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002686:	4823      	ldr	r0, [pc, #140]	; (8002714 <xTaskCreate+0x178>)
 8002688:	f7ff f976 	bl	8001978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800268c:	4b22      	ldr	r3, [pc, #136]	; (8002718 <xTaskCreate+0x17c>)
 800268e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <xTaskCreate+0x180>)
 8002694:	601d      	str	r5, [r3, #0]
 8002696:	e008      	b.n	80026aa <xTaskCreate+0x10e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <xTaskCreate+0x184>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b92b      	cbnz	r3, 80026aa <xTaskCreate+0x10e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800269e:	6833      	ldr	r3, [r6, #0]
 80026a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026a4:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 80026a6:	bf98      	it	ls
 80026a8:	6034      	strls	r4, [r6, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <xTaskCreate+0x188>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026ac:	491e      	ldr	r1, [pc, #120]	; (8002728 <xTaskCreate+0x18c>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026b6:	680b      	ldr	r3, [r1, #0]
 80026b8:	2501      	movs	r5, #1
 80026ba:	fa05 f002 	lsl.w	r0, r5, r2
 80026be:	4303      	orrs	r3, r0
 80026c0:	2014      	movs	r0, #20
 80026c2:	600b      	str	r3, [r1, #0]
 80026c4:	fb00 8002 	mla	r0, r0, r2, r8
 80026c8:	4639      	mov	r1, r7
 80026ca:	f7ff f963 	bl	8001994 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80026ce:	f7ff fa13 	bl	8001af8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <xTaskCreate+0x184>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b163      	cbz	r3, 80026f2 <xTaskCreate+0x156>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026d8:	6833      	ldr	r3, [r6, #0]
 80026da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026de:	429a      	cmp	r2, r3
 80026e0:	d207      	bcs.n	80026f2 <xTaskCreate+0x156>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <xTaskCreate+0x190>)
 80026e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 80026f2:	4628      	mov	r0, r5
 80026f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 80026fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002700:	200028b0 	.word	0x200028b0
 8002704:	20002888 	.word	0x20002888
 8002708:	200028b4 	.word	0x200028b4
 800270c:	20002898 	.word	0x20002898
 8002710:	20002870 	.word	0x20002870
 8002714:	200028cc 	.word	0x200028cc
 8002718:	200027c0 	.word	0x200027c0
 800271c:	20002894 	.word	0x20002894
 8002720:	200027c4 	.word	0x200027c4
 8002724:	200028ac 	.word	0x200028ac
 8002728:	200028e0 	.word	0x200028e0
 800272c:	e000ed04 	.word	0xe000ed04
 8002730:	200027e4 	.word	0x200027e4
 8002734:	200027cc 	.word	0x200027cc

08002738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002738:	b513      	push	{r0, r1, r4, lr}
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <vTaskStartScheduler+0x68>)
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	2400      	movs	r4, #0
 8002740:	9400      	str	r4, [sp, #0]
 8002742:	4623      	mov	r3, r4
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	4917      	ldr	r1, [pc, #92]	; (80027a4 <vTaskStartScheduler+0x6c>)
 8002748:	4817      	ldr	r0, [pc, #92]	; (80027a8 <vTaskStartScheduler+0x70>)
 800274a:	f7ff ff27 	bl	800259c <xTaskCreate>
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800274e:	2801      	cmp	r0, #1
 8002750:	d118      	bne.n	8002784 <vTaskStartScheduler+0x4c>
		{
			xReturn = xTimerCreateTimerTask();
 8002752:	f000 fbaf 	bl	8002eb4 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002756:	2801      	cmp	r0, #1
 8002758:	d114      	bne.n	8002784 <vTaskStartScheduler+0x4c>
 800275a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <vTaskStartScheduler+0x74>)
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <vTaskStartScheduler+0x78>)
 8002774:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <vTaskStartScheduler+0x7c>)
 8002778:	601c      	str	r4, [r3, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800277a:	b002      	add	sp, #8
 800277c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002780:	f7ff ba2a 	b.w	8001bd8 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002784:	3001      	adds	r0, #1
 8002786:	d108      	bne.n	800279a <vTaskStartScheduler+0x62>
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	e7fe      	b.n	8002798 <vTaskStartScheduler+0x60>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800279a:	b002      	add	sp, #8
 800279c:	bd10      	pop	{r4, pc}
 800279e:	bf00      	nop
 80027a0:	200028c8 	.word	0x200028c8
 80027a4:	08004adc 	.word	0x08004adc
 80027a8:	08002a3d 	.word	0x08002a3d
 80027ac:	2000288c 	.word	0x2000288c
 80027b0:	200027c4 	.word	0x200027c4
 80027b4:	20002890 	.word	0x20002890

080027b8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80027b8:	4a02      	ldr	r2, [pc, #8]	; (80027c4 <vTaskSuspendAll+0xc>)
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	200027c8 	.word	0x200027c8

080027c8 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80027c8:	4b01      	ldr	r3, [pc, #4]	; (80027d0 <xTaskGetTickCount+0x8>)
 80027ca:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20002890 	.word	0x20002890

080027d4 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <xTaskIncrementTick+0x104>)
 80027d6:	681b      	ldr	r3, [r3, #0]

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d13b      	bne.n	8002858 <xTaskIncrementTick+0x84>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80027e0:	4b3e      	ldr	r3, [pc, #248]	; (80028dc <xTaskIncrementTick+0x108>)
 80027e2:	681c      	ldr	r4, [r3, #0]
 80027e4:	3401      	adds	r4, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027e6:	601c      	str	r4, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80027e8:	b9bc      	cbnz	r4, 800281a <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <xTaskIncrementTick+0x10c>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	b142      	cbz	r2, 8002804 <xTaskIncrementTick+0x30>
 80027f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	e7fe      	b.n	8002802 <xTaskIncrementTick+0x2e>
 8002804:	4a37      	ldr	r2, [pc, #220]	; (80028e4 <xTaskIncrementTick+0x110>)
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	6810      	ldr	r0, [r2, #0]
 800280a:	6018      	str	r0, [r3, #0]
 800280c:	6011      	str	r1, [r2, #0]
 800280e:	4a36      	ldr	r2, [pc, #216]	; (80028e8 <xTaskIncrementTick+0x114>)
 8002810:	6813      	ldr	r3, [r2, #0]
 8002812:	3301      	adds	r3, #1
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	f7ff fe5d 	bl	80024d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800281a:	4d34      	ldr	r5, [pc, #208]	; (80028ec <xTaskIncrementTick+0x118>)
 800281c:	9501      	str	r5, [sp, #4]
 800281e:	682b      	ldr	r3, [r5, #0]
 8002820:	4e33      	ldr	r6, [pc, #204]	; (80028f0 <xTaskIncrementTick+0x11c>)
 8002822:	4f34      	ldr	r7, [pc, #208]	; (80028f4 <xTaskIncrementTick+0x120>)
 8002824:	429c      	cmp	r4, r3
 8002826:	f04f 0b00 	mov.w	fp, #0
 800282a:	d30b      	bcc.n	8002844 <xTaskIncrementTick+0x70>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800282c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80028e0 <xTaskIncrementTick+0x10c>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002830:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8002900 <xTaskIncrementTick+0x12c>
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002834:	f8d8 2000 	ldr.w	r2, [r8]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	b9a2      	cbnz	r2, 8002866 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800283c:	9b01      	ldr	r3, [sp, #4]
 800283e:	f04f 32ff 	mov.w	r2, #4294967295
 8002842:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002848:	2214      	movs	r2, #20
 800284a:	434a      	muls	r2, r1
 800284c:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 800284e:	2a02      	cmp	r2, #2
 8002850:	bf28      	it	cs
 8002852:	f04f 0b01 	movcs.w	fp, #1
 8002856:	e034      	b.n	80028c2 <xTaskIncrementTick+0xee>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002858:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <xTaskIncrementTick+0x124>)
 800285a:	6813      	ldr	r3, [r2, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002860:	f04f 0b00 	mov.w	fp, #0
 8002864:	e02d      	b.n	80028c2 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002866:	f8d8 2000 	ldr.w	r2, [r8]
 800286a:	68d2      	ldr	r2, [r2, #12]
 800286c:	68d5      	ldr	r5, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800286e:	6869      	ldr	r1, [r5, #4]

					if( xConstTickCount < xItemValue )
 8002870:	428c      	cmp	r4, r1
 8002872:	d202      	bcs.n	800287a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002874:	9b01      	ldr	r3, [sp, #4]
 8002876:	6019      	str	r1, [r3, #0]
						break;
 8002878:	e7e4      	b.n	8002844 <xTaskIncrementTick+0x70>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800287a:	f105 0a04 	add.w	sl, r5, #4
 800287e:	4650      	mov	r0, sl
 8002880:	f7ff f8ac 	bl	80019dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002884:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002886:	b119      	cbz	r1, 8002890 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002888:	f105 0018 	add.w	r0, r5, #24
 800288c:	f7ff f8a6 	bl	80019dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002890:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002892:	f8d9 1000 	ldr.w	r1, [r9]
 8002896:	2301      	movs	r3, #1
 8002898:	fa03 fe00 	lsl.w	lr, r3, r0
 800289c:	ea4e 0101 	orr.w	r1, lr, r1
 80028a0:	f04f 0e14 	mov.w	lr, #20
 80028a4:	f8c9 1000 	str.w	r1, [r9]
 80028a8:	fb0e 6000 	mla	r0, lr, r0, r6
 80028ac:	4651      	mov	r1, sl
 80028ae:	f7ff f871 	bl	8001994 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028b2:	6838      	ldr	r0, [r7, #0]
 80028b4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80028b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 80028b8:	4291      	cmp	r1, r2
 80028ba:	bf28      	it	cs
 80028bc:	f04f 0b01 	movcs.w	fp, #1
 80028c0:	e7b8      	b.n	8002834 <xTaskIncrementTick+0x60>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80028c2:	4a0e      	ldr	r2, [pc, #56]	; (80028fc <xTaskIncrementTick+0x128>)
 80028c4:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 80028c6:	2a00      	cmp	r2, #0
 80028c8:	bf18      	it	ne
 80028ca:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80028ce:	4658      	mov	r0, fp
 80028d0:	b003      	add	sp, #12
 80028d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	200027c8 	.word	0x200027c8
 80028dc:	20002890 	.word	0x20002890
 80028e0:	200027c0 	.word	0x200027c0
 80028e4:	20002894 	.word	0x20002894
 80028e8:	200027bc 	.word	0x200027bc
 80028ec:	2000288c 	.word	0x2000288c
 80028f0:	200027e4 	.word	0x200027e4
 80028f4:	20002888 	.word	0x20002888
 80028f8:	200027e0 	.word	0x200027e0
 80028fc:	200028e4 	.word	0x200028e4
 8002900:	200028e0 	.word	0x200028e0

08002904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002908:	4c31      	ldr	r4, [pc, #196]	; (80029d0 <xTaskResumeAll+0xcc>)
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	b943      	cbnz	r3, 8002920 <xTaskResumeAll+0x1c>
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	e7fe      	b.n	800291e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002920:	f7ff f8c8 	bl	8001ab4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	3b01      	subs	r3, #1
 8002928:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800292a:	6824      	ldr	r4, [r4, #0]
 800292c:	b10c      	cbz	r4, 8002932 <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 800292e:	2400      	movs	r4, #0
 8002930:	e049      	b.n	80029c6 <xTaskResumeAll+0xc2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <xTaskResumeAll+0xd0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f9      	beq.n	800292e <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800293a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80029ec <xTaskResumeAll+0xe8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 800293e:	4f26      	ldr	r7, [pc, #152]	; (80029d8 <xTaskResumeAll+0xd4>)
 8002940:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80029f0 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002944:	f8d9 3000 	ldr.w	r3, [r9]
 8002948:	b303      	cbz	r3, 800298c <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800294a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800294e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002950:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002952:	f104 0018 	add.w	r0, r4, #24
 8002956:	f7ff f841 	bl	80019dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800295a:	4630      	mov	r0, r6
 800295c:	f7ff f83e 	bl	80019dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002960:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2501      	movs	r5, #1
 8002966:	fa05 f102 	lsl.w	r1, r5, r2
 800296a:	2014      	movs	r0, #20
 800296c:	430b      	orrs	r3, r1
 800296e:	fb00 8002 	mla	r0, r0, r2, r8
 8002972:	4631      	mov	r1, r6
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	f7ff f80d 	bl	8001994 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <xTaskResumeAll+0xd8>)
 800297c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8002984:	bf24      	itt	cs
 8002986:	4b16      	ldrcs	r3, [pc, #88]	; (80029e0 <xTaskResumeAll+0xdc>)
 8002988:	601d      	strcs	r5, [r3, #0]
 800298a:	e7db      	b.n	8002944 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800298c:	b10c      	cbz	r4, 8002992 <xTaskResumeAll+0x8e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800298e:	f7ff fda1 	bl	80024d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <xTaskResumeAll+0xe0>)
 8002994:	681c      	ldr	r4, [r3, #0]
 8002996:	461d      	mov	r5, r3

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002998:	b144      	cbz	r4, 80029ac <xTaskResumeAll+0xa8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 800299a:	4e11      	ldr	r6, [pc, #68]	; (80029e0 <xTaskResumeAll+0xdc>)
 800299c:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800299e:	f7ff ff19 	bl	80027d4 <xTaskIncrementTick>
 80029a2:	b100      	cbz	r0, 80029a6 <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
 80029a4:	6037      	str	r7, [r6, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80029a6:	3c01      	subs	r4, #1
 80029a8:	d1f9      	bne.n	800299e <xTaskResumeAll+0x9a>

						uxPendedTicks = 0;
 80029aa:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <xTaskResumeAll+0xdc>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0bc      	beq.n	800292e <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <xTaskResumeAll+0xe4>)
 80029b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80029c4:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029c6:	f7ff f897 	bl	8001af8 <vPortExitCritical>

	return xAlreadyYielded;
}
 80029ca:	4620      	mov	r0, r4
 80029cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029d0:	200027c8 	.word	0x200027c8
 80029d4:	200028b0 	.word	0x200028b0
 80029d8:	200028e0 	.word	0x200028e0
 80029dc:	20002888 	.word	0x20002888
 80029e0:	200028e4 	.word	0x200028e4
 80029e4:	200027e0 	.word	0x200027e0
 80029e8:	e000ed04 	.word	0xe000ed04
 80029ec:	20002898 	.word	0x20002898
 80029f0:	200027e4 	.word	0x200027e4

080029f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80029f4:	b508      	push	{r3, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80029f6:	b940      	cbnz	r0, 8002a0a <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <vTaskDelay+0x40>)
 80029fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	bd08      	pop	{r3, pc}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <vTaskDelay+0x44>)
 8002a0c:	6819      	ldr	r1, [r3, #0]
 8002a0e:	b141      	cbz	r1, 8002a22 <vTaskDelay+0x2e>
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	e7fe      	b.n	8002a20 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002a22:	f7ff fec9 	bl	80027b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a26:	f7ff fd67 	bl	80024f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a2a:	f7ff ff6b 	bl	8002904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d0e2      	beq.n	80029f8 <vTaskDelay+0x4>
 8002a32:	bd08      	pop	{r3, pc}
 8002a34:	e000ed04 	.word	0xe000ed04
 8002a38:	200027c8 	.word	0x200027c8

08002a3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a3c:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a3e:	4d18      	ldr	r5, [pc, #96]	; (8002aa0 <prvIdleTask+0x64>)
 8002a40:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002a42:	4f18      	ldr	r7, [pc, #96]	; (8002aa4 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	b1f3      	cbz	r3, 8002a86 <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8002a48:	f7ff feb6 	bl	80027b8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002a4c:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8002a4e:	f7ff ff59 	bl	8002904 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002a52:	2c00      	cmp	r4, #0
 8002a54:	d0f6      	beq.n	8002a44 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002a56:	f7ff f82d 	bl	8001ab4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <prvIdleTask+0x68>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a60:	1d20      	adds	r0, r4, #4
 8002a62:	f7fe ffbb 	bl	80019dc <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002a66:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <prvIdleTask+0x6c>)
 8002a68:	6813      	ldr	r3, [r2, #0]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002a6e:	6833      	ldr	r3, [r6, #0]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8002a74:	f7ff f840 	bl	8001af8 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002a78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002a7a:	f7ff fa07 	bl	8001e8c <vPortFree>
			vPortFree( pxTCB );
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f7ff fa04 	bl	8001e8c <vPortFree>
 8002a84:	e7de      	b.n	8002a44 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <prvIdleTask+0x70>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d9d9      	bls.n	8002a42 <prvIdleTask+0x6>
			{
				taskYIELD();
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <prvIdleTask+0x74>)
 8002a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	e7d0      	b.n	8002a42 <prvIdleTask+0x6>
 8002aa0:	20002884 	.word	0x20002884
 8002aa4:	20002870 	.word	0x20002870
 8002aa8:	200028b0 	.word	0x200028b0
 8002aac:	200027e4 	.word	0x200027e4
 8002ab0:	e000ed04 	.word	0xe000ed04

08002ab4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <vTaskSwitchContext+0x60>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002aba:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002abc:	b10a      	cbz	r2, 8002ac2 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002abe:	2201      	movs	r2, #1
 8002ac0:	e025      	b.n	8002b0e <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 8002ac2:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ac4:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <vTaskSwitchContext+0x68>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f1c3 031f 	rsb	r3, r3, #31
 8002ad2:	2214      	movs	r2, #20
 8002ad4:	4912      	ldr	r1, [pc, #72]	; (8002b20 <vTaskSwitchContext+0x6c>)
 8002ad6:	435a      	muls	r2, r3
 8002ad8:	1888      	adds	r0, r1, r2
 8002ada:	588c      	ldr	r4, [r1, r2]
 8002adc:	b944      	cbnz	r4, 8002af0 <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	e7fe      	b.n	8002aee <vTaskSwitchContext+0x3a>
 8002af0:	6844      	ldr	r4, [r0, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	6864      	ldr	r4, [r4, #4]
 8002af6:	6044      	str	r4, [r0, #4]
 8002af8:	440a      	add	r2, r1
 8002afa:	4294      	cmp	r4, r2
 8002afc:	bf04      	itt	eq
 8002afe:	6862      	ldreq	r2, [r4, #4]
 8002b00:	6042      	streq	r2, [r0, #4]
 8002b02:	2214      	movs	r2, #20
 8002b04:	fb02 1303 	mla	r3, r2, r3, r1
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <vTaskSwitchContext+0x70>)
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	bf00      	nop
 8002b14:	200027c8 	.word	0x200027c8
 8002b18:	200028e4 	.word	0x200028e4
 8002b1c:	200028e0 	.word	0x200028e0
 8002b20:	200027e4 	.word	0x200027e4
 8002b24:	20002888 	.word	0x20002888

08002b28 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002b28:	b510      	push	{r4, lr}
 8002b2a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002b2c:	b940      	cbnz	r0, 8002b40 <vTaskPlaceOnEventList+0x18>
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	e7fe      	b.n	8002b3e <vTaskPlaceOnEventList+0x16>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <vTaskPlaceOnEventList+0x30>)
 8002b42:	6819      	ldr	r1, [r3, #0]
 8002b44:	3118      	adds	r1, #24
 8002b46:	f7fe ff31 	bl	80019ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	2101      	movs	r1, #1
}
 8002b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b52:	f7ff bcd1 	b.w	80024f8 <prvAddCurrentTaskToDelayedList>
 8002b56:	bf00      	nop
 8002b58:	20002888 	.word	0x20002888

08002b5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	460d      	mov	r5, r1
 8002b60:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8002b62:	b940      	cbnz	r0, 8002b76 <vTaskPlaceOnEventListRestricted+0x1a>
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	e7fe      	b.n	8002b74 <vTaskPlaceOnEventListRestricted+0x18>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <vTaskPlaceOnEventListRestricted+0x38>)
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	3118      	adds	r1, #24
 8002b7c:	f7fe ff0a 	bl	8001994 <vListInsertEnd>
		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
		{
			xTicksToWait = portMAX_DELAY;
 8002b80:	2c00      	cmp	r4, #0
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b82:	4621      	mov	r1, r4
 8002b84:	bf0c      	ite	eq
 8002b86:	4628      	moveq	r0, r5
 8002b88:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8002b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			xTicksToWait = portMAX_DELAY;
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b90:	f7ff bcb2 	b.w	80024f8 <prvAddCurrentTaskToDelayedList>
 8002b94:	20002888 	.word	0x20002888

08002b98 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002b98:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002b9a:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002b9c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002b9e:	b944      	cbnz	r4, 8002bb2 <xTaskRemoveFromEventList+0x1a>
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	e7fe      	b.n	8002bb0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002bb2:	f104 0518 	add.w	r5, r4, #24
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	f7fe ff10 	bl	80019dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <xTaskRemoveFromEventList+0x6c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	b983      	cbnz	r3, 8002be4 <xTaskRemoveFromEventList+0x4c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002bc2:	1d26      	adds	r6, r4, #4
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	f7fe ff09 	bl	80019dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002bca:	490f      	ldr	r1, [pc, #60]	; (8002c08 <xTaskRemoveFromEventList+0x70>)
 8002bcc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002bce:	680a      	ldr	r2, [r1, #0]
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	40ab      	lsls	r3, r5
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <xTaskRemoveFromEventList+0x74>)
 8002bda:	2014      	movs	r0, #20
 8002bdc:	4631      	mov	r1, r6
 8002bde:	fb00 3005 	mla	r0, r0, r5, r3
 8002be2:	e001      	b.n	8002be8 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002be4:	480a      	ldr	r0, [pc, #40]	; (8002c10 <xTaskRemoveFromEventList+0x78>)
 8002be6:	4629      	mov	r1, r5
 8002be8:	f7fe fed4 	bl	8001994 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <xTaskRemoveFromEventList+0x7c>)
 8002bee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002bf6:	bf83      	ittte	hi
 8002bf8:	4b07      	ldrhi	r3, [pc, #28]	; (8002c18 <xTaskRemoveFromEventList+0x80>)
 8002bfa:	2001      	movhi	r0, #1
 8002bfc:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8002bfe:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
 8002c02:	bf00      	nop
 8002c04:	200027c8 	.word	0x200027c8
 8002c08:	200028e0 	.word	0x200028e0
 8002c0c:	200027e4 	.word	0x200027e4
 8002c10:	20002898 	.word	0x20002898
 8002c14:	20002888 	.word	0x20002888
 8002c18:	200028e4 	.word	0x200028e4

08002c1c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002c1c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002c1e:	b908      	cbnz	r0, 8002c24 <vTaskSetTimeOutState+0x8>
 8002c20:	f7ff fcb2 	bl	8002588 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <vTaskSetTimeOutState+0x18>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002c2a:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <vTaskSetTimeOutState+0x1c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6043      	str	r3, [r0, #4]
 8002c30:	bd08      	pop	{r3, pc}
 8002c32:	bf00      	nop
 8002c34:	200027bc 	.word	0x200027bc
 8002c38:	20002890 	.word	0x20002890

08002c3c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002c40:	4604      	mov	r4, r0
 8002c42:	b940      	cbnz	r0, 8002c56 <xTaskCheckForTimeOut+0x1a>
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	e7fe      	b.n	8002c54 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8002c56:	b941      	cbnz	r1, 8002c6a <xTaskCheckForTimeOut+0x2e>
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	e7fe      	b.n	8002c68 <xTaskCheckForTimeOut+0x2c>

	taskENTER_CRITICAL();
 8002c6a:	f7fe ff23 	bl	8001ab4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <xTaskCheckForTimeOut+0x6c>)
 8002c70:	6819      	ldr	r1, [r3, #0]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002c72:	682b      	ldr	r3, [r5, #0]
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	d010      	beq.n	8002c9a <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c78:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <xTaskCheckForTimeOut+0x70>)
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	4290      	cmp	r0, r2
 8002c80:	6862      	ldr	r2, [r4, #4]
 8002c82:	d001      	beq.n	8002c88 <xTaskCheckForTimeOut+0x4c>
 8002c84:	4291      	cmp	r1, r2
 8002c86:	d20a      	bcs.n	8002c9e <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c88:	1a88      	subs	r0, r1, r2
 8002c8a:	4283      	cmp	r3, r0
 8002c8c:	d907      	bls.n	8002c9e <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002c8e:	1a52      	subs	r2, r2, r1
 8002c90:	4413      	add	r3, r2
 8002c92:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002c94:	4620      	mov	r0, r4
 8002c96:	f7ff ffc1 	bl	8002c1c <vTaskSetTimeOutState>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002c9a:	2400      	movs	r4, #0
 8002c9c:	e000      	b.n	8002ca0 <xTaskCheckForTimeOut+0x64>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002c9e:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002ca0:	f7fe ff2a 	bl	8001af8 <vPortExitCritical>

	return xReturn;
}
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
 8002ca8:	20002890 	.word	0x20002890
 8002cac:	200027bc 	.word	0x200027bc

08002cb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8002cb0:	4b01      	ldr	r3, [pc, #4]	; (8002cb8 <vTaskMissedYield+0x8>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	4770      	bx	lr
 8002cb8:	200028e4 	.word	0x200028e4

08002cbc <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <xTaskGetSchedulerState+0x18>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	b133      	cbz	r3, 8002cd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <xTaskGetSchedulerState+0x1c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002cc8:	bf0c      	ite	eq
 8002cca:	2002      	moveq	r0, #2
 8002ccc:	2000      	movne	r0, #0
 8002cce:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002cd0:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8002cd2:	4770      	bx	lr
 8002cd4:	200027c4 	.word	0x200027c4
 8002cd8:	200027c8 	.word	0x200027c8

08002cdc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d038      	beq.n	8002d58 <vTaskPriorityInherit+0x7c>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002ce6:	4d1d      	ldr	r5, [pc, #116]	; (8002d5c <vTaskPriorityInherit+0x80>)
 8002ce8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002cea:	682a      	ldr	r2, [r5, #0]
 8002cec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d232      	bcs.n	8002d58 <vTaskPriorityInherit+0x7c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002cf2:	6982      	ldr	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002cf4:	4e1a      	ldr	r6, [pc, #104]	; (8002d60 <vTaskPriorityInherit+0x84>)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002cf6:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cf8:	bfa1      	itttt	ge
 8002cfa:	682a      	ldrge	r2, [r5, #0]
 8002cfc:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8002cfe:	f1c2 0207 	rsbge	r2, r2, #7
 8002d02:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002d04:	2714      	movs	r7, #20
 8002d06:	6942      	ldr	r2, [r0, #20]
 8002d08:	fb07 6303 	mla	r3, r7, r3, r6
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d120      	bne.n	8002d52 <vTaskPriorityInherit+0x76>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d10:	f100 0804 	add.w	r8, r0, #4
 8002d14:	4640      	mov	r0, r8
 8002d16:	f7fe fe61 	bl	80019dc <uxListRemove>
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <vTaskPriorityInherit+0x88>)
 8002d1c:	b948      	cbnz	r0, 8002d32 <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d1e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002d20:	4347      	muls	r7, r0
 8002d22:	59f2      	ldr	r2, [r6, r7]
 8002d24:	b92a      	cbnz	r2, 8002d32 <vTaskPriorityInherit+0x56>
 8002d26:	6819      	ldr	r1, [r3, #0]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4082      	lsls	r2, r0
 8002d2c:	ea21 0202 	bic.w	r2, r1, r2
 8002d30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d32:	682a      	ldr	r2, [r5, #0]
 8002d34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d36:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002d38:	2001      	movs	r0, #1
 8002d3a:	681c      	ldr	r4, [r3, #0]
 8002d3c:	4090      	lsls	r0, r2
 8002d3e:	4320      	orrs	r0, r4
 8002d40:	6018      	str	r0, [r3, #0]
 8002d42:	2014      	movs	r0, #20
 8002d44:	4641      	mov	r1, r8
 8002d46:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8002d4e:	f7fe be21 	b.w	8001994 <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d52:	682b      	ldr	r3, [r5, #0]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d5c:	20002888 	.word	0x20002888
 8002d60:	200027e4 	.word	0x200027e4
 8002d64:	200028e0 	.word	0x200028e0

08002d68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	b908      	cbnz	r0, 8002d72 <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8002d6e:	2000      	movs	r0, #0
 8002d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <xTaskPriorityDisinherit+0x94>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4298      	cmp	r0, r3
 8002d78:	d008      	beq.n	8002d8c <xTaskPriorityDisinherit+0x24>
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	e7fe      	b.n	8002d8a <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 8002d8c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002d8e:	b943      	cbnz	r3, 8002da2 <xTaskPriorityDisinherit+0x3a>
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	e7fe      	b.n	8002da0 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002da2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002da4:	6c42      	ldr	r2, [r0, #68]	; 0x44
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002da6:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002da8:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002daa:	6483      	str	r3, [r0, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002dac:	d0df      	beq.n	8002d6e <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1dd      	bne.n	8002d6e <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002db2:	1d05      	adds	r5, r0, #4
 8002db4:	4628      	mov	r0, r5
 8002db6:	f7fe fe11 	bl	80019dc <uxListRemove>
 8002dba:	4e11      	ldr	r6, [pc, #68]	; (8002e00 <xTaskPriorityDisinherit+0x98>)
 8002dbc:	4a11      	ldr	r2, [pc, #68]	; (8002e04 <xTaskPriorityDisinherit+0x9c>)
 8002dbe:	b950      	cbnz	r0, 8002dd6 <xTaskPriorityDisinherit+0x6e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002dc0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002dc2:	2114      	movs	r1, #20
 8002dc4:	4379      	muls	r1, r7
 8002dc6:	5873      	ldr	r3, [r6, r1]
 8002dc8:	b92b      	cbnz	r3, 8002dd6 <xTaskPriorityDisinherit+0x6e>
 8002dca:	6810      	ldr	r0, [r2, #0]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	40bb      	lsls	r3, r7
 8002dd0:	ea20 0303 	bic.w	r3, r0, r3
 8002dd4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002dd6:	6c63      	ldr	r3, [r4, #68]	; 0x44

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8002dd8:	6810      	ldr	r0, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002dda:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ddc:	f1c3 0107 	rsb	r1, r3, #7
 8002de0:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002de2:	2401      	movs	r4, #1
 8002de4:	fa04 f103 	lsl.w	r1, r4, r3
 8002de8:	4308      	orrs	r0, r1
 8002dea:	6010      	str	r0, [r2, #0]
 8002dec:	2014      	movs	r0, #20
 8002dee:	fb00 6003 	mla	r0, r0, r3, r6
 8002df2:	4629      	mov	r1, r5
 8002df4:	f7fe fdce 	bl	8001994 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002df8:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8002dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dfc:	20002888 	.word	0x20002888
 8002e00:	200027e4 	.word	0x200027e4
 8002e04:	200028e0 	.word	0x200028e0

08002e08 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <pvTaskIncrementMutexHeldCount+0x14>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	b11a      	cbz	r2, 8002e16 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002e0e:	6819      	ldr	r1, [r3, #0]
 8002e10:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002e12:	3201      	adds	r2, #1
 8002e14:	648a      	str	r2, [r1, #72]	; 0x48
		}

		return pxCurrentTCB;
 8002e16:	6818      	ldr	r0, [r3, #0]
	}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20002888 	.word	0x20002888

08002e20 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002e22:	4c0f      	ldr	r4, [pc, #60]	; (8002e60 <prvCheckForValidListAndQueue+0x40>)
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002e24:	f7fe fe46 	bl	8001ab4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002e28:	6825      	ldr	r5, [r4, #0]
 8002e2a:	b9ad      	cbnz	r5, 8002e58 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002e2c:	4f0d      	ldr	r7, [pc, #52]	; (8002e64 <prvCheckForValidListAndQueue+0x44>)
			vListInitialise( &xActiveTimerList2 );
 8002e2e:	4e0e      	ldr	r6, [pc, #56]	; (8002e68 <prvCheckForValidListAndQueue+0x48>)
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002e30:	4638      	mov	r0, r7
 8002e32:	f7fe fda1 	bl	8001978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002e36:	4630      	mov	r0, r6
 8002e38:	f7fe fd9e 	bl	8001978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <prvCheckForValidListAndQueue+0x4c>)
 8002e3e:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <prvCheckForValidListAndQueue+0x50>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e42:	462a      	mov	r2, r5
 8002e44:	210c      	movs	r1, #12
 8002e46:	200a      	movs	r0, #10
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
 8002e48:	601e      	str	r6, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e4a:	f7ff f91b 	bl	8002084 <xQueueGenericCreate>
 8002e4e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002e50:	b110      	cbz	r0, 8002e58 <prvCheckForValidListAndQueue+0x38>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e52:	4908      	ldr	r1, [pc, #32]	; (8002e74 <prvCheckForValidListAndQueue+0x54>)
 8002e54:	f7ff fb06 	bl	8002464 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002e58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e5c:	f7fe be4c 	b.w	8001af8 <vPortExitCritical>
 8002e60:	20002918 	.word	0x20002918
 8002e64:	200028ec 	.word	0x200028ec
 8002e68:	20002900 	.word	0x20002900
 8002e6c:	200028e8 	.word	0x200028e8
 8002e70:	2000291c 	.word	0x2000291c
 8002e74:	08004ae1 	.word	0x08004ae1

08002e78 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002e78:	4291      	cmp	r1, r2
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002e7a:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002e7c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e7e:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002e80:	d806      	bhi.n	8002e90 <prvInsertTimerInActiveList+0x18>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e82:	1ad2      	subs	r2, r2, r3
 8002e84:	6983      	ldr	r3, [r0, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d20d      	bcs.n	8002ea6 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002e8a:	1d01      	adds	r1, r0, #4
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <prvInsertTimerInActiveList+0x34>)
 8002e8e:	e005      	b.n	8002e9c <prvInsertTimerInActiveList+0x24>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d201      	bcs.n	8002e98 <prvInsertTimerInActiveList+0x20>
 8002e94:	4299      	cmp	r1, r3
 8002e96:	d206      	bcs.n	8002ea6 <prvInsertTimerInActiveList+0x2e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <prvInsertTimerInActiveList+0x38>)
 8002e9a:	1d01      	adds	r1, r0, #4
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	f7fe fd85 	bl	80019ac <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002ea6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8002ea8:	bd08      	pop	{r3, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000291c 	.word	0x2000291c
 8002eb0:	200028e8 	.word	0x200028e8

08002eb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002eb4:	b507      	push	{r0, r1, r2, lr}

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002eb6:	f7ff ffb3 	bl	8002e20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <xTimerCreateTimerTask+0x3c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	b15b      	cbz	r3, 8002ed8 <xTimerCreateTimerTask+0x24>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <xTimerCreateTimerTask+0x40>)
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ecc:	2300      	movs	r3, #0
 8002ece:	490a      	ldr	r1, [pc, #40]	; (8002ef8 <xTimerCreateTimerTask+0x44>)
 8002ed0:	480a      	ldr	r0, [pc, #40]	; (8002efc <xTimerCreateTimerTask+0x48>)
 8002ed2:	f7ff fb63 	bl	800259c <xTaskCreate>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002ed6:	b940      	cbnz	r0, 8002eea <xTimerCreateTimerTask+0x36>
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	e7fe      	b.n	8002ee8 <xTimerCreateTimerTask+0x34>
	return xReturn;
}
 8002eea:	b003      	add	sp, #12
 8002eec:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ef0:	20002918 	.word	0x20002918
 8002ef4:	20002920 	.word	0x20002920
 8002ef8:	08004ae6 	.word	0x08004ae6
 8002efc:	08003025 	.word	0x08003025

08002f00 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f04:	4680      	mov	r8, r0
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002f06:	2028      	movs	r0, #40	; 0x28
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f08:	460d      	mov	r5, r1
 8002f0a:	4617      	mov	r7, r2
 8002f0c:	461e      	mov	r6, r3
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002f0e:	f7fe ff2b 	bl	8001d68 <pvPortMalloc>

		if( pxNewTimer != NULL )
 8002f12:	4604      	mov	r4, r0
 8002f14:	b1a8      	cbz	r0, 8002f42 <xTimerCreate+0x42>
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002f16:	b945      	cbnz	r5, 8002f2a <xTimerCreate+0x2a>
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	e7fe      	b.n	8002f28 <xTimerCreate+0x28>

	if( pxNewTimer != NULL )
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8002f2a:	f7ff ff79 	bl	8002e20 <prvCheckForValidListAndQueue>
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
		pxNewTimer->uxAutoReload = uxAutoReload;
		pxNewTimer->pvTimerID = pvTimerID;
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002f2e:	9b06      	ldr	r3, [sp, #24]
		created/initialised. */
		prvCheckForValidListAndQueue();

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8002f30:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002f34:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002f36:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8002f38:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002f3a:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002f3c:	1d20      	adds	r0, r4, #4
 8002f3e:	f7fe fd26 	bl	800198e <vListInitialiseItem>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
	}
 8002f42:	4620      	mov	r0, r4
 8002f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002f48:	b530      	push	{r4, r5, lr}
 8002f4a:	4615      	mov	r5, r2
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	461a      	mov	r2, r3
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002f50:	4603      	mov	r3, r0
 8002f52:	b940      	cbnz	r0, 8002f66 <xTimerGenericCommand+0x1e>
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	e7fe      	b.n	8002f64 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002f66:	4c0d      	ldr	r4, [pc, #52]	; (8002f9c <xTimerGenericCommand+0x54>)
 8002f68:	6820      	ldr	r0, [r4, #0]
 8002f6a:	b1a8      	cbz	r0, 8002f98 <xTimerGenericCommand+0x50>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002f6c:	2905      	cmp	r1, #5
	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002f6e:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002f70:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002f72:	9303      	str	r3, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002f74:	dc0c      	bgt.n	8002f90 <xTimerGenericCommand+0x48>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002f76:	f7ff fea1 	bl	8002cbc <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002f7a:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002f7c:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002f7e:	bf08      	it	eq
 8002f80:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002f82:	6820      	ldr	r0, [r4, #0]
 8002f84:	bf18      	it	ne
 8002f86:	461a      	movne	r2, r3
 8002f88:	a901      	add	r1, sp, #4
 8002f8a:	f7ff f89d 	bl	80020c8 <xQueueGenericSend>
 8002f8e:	e003      	b.n	8002f98 <xTimerGenericCommand+0x50>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002f90:	2300      	movs	r3, #0
 8002f92:	a901      	add	r1, sp, #4
 8002f94:	f7ff f94a 	bl	800222c <xQueueGenericSendFromISR>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002f98:	b005      	add	sp, #20
 8002f9a:	bd30      	pop	{r4, r5, pc}
 8002f9c:	20002918 	.word	0x20002918

08002fa0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002fa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002fa4:	4e1d      	ldr	r6, [pc, #116]	; (800301c <prvSwitchTimerLists+0x7c>)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002fa6:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002faa:	4637      	mov	r7, r6
 8002fac:	6833      	ldr	r3, [r6, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	b35a      	cbz	r2, 800300a <prvSwitchTimerLists+0x6a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fb2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fb4:	68dc      	ldr	r4, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fb6:	681d      	ldr	r5, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002fb8:	f104 0904 	add.w	r9, r4, #4
 8002fbc:	4648      	mov	r0, r9
 8002fbe:	f7fe fd0d 	bl	80019dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002fc8:	69e3      	ldr	r3, [r4, #28]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d1ee      	bne.n	8002fac <prvSwitchTimerLists+0xc>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002fce:	69a3      	ldr	r3, [r4, #24]
 8002fd0:	442b      	add	r3, r5
			if( xReloadTime > xNextExpireTime )
 8002fd2:	429d      	cmp	r5, r3
 8002fd4:	d206      	bcs.n	8002fe4 <prvSwitchTimerLists+0x44>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002fd6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002fd8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002fda:	4649      	mov	r1, r9
 8002fdc:	6838      	ldr	r0, [r7, #0]
 8002fde:	f7fe fce5 	bl	80019ac <vListInsert>
 8002fe2:	e7e3      	b.n	8002fac <prvSwitchTimerLists+0xc>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8cd 8000 	str.w	r8, [sp]
 8002fea:	462a      	mov	r2, r5
 8002fec:	4619      	mov	r1, r3
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff ffaa 	bl	8002f48 <xTimerGenericCommand>
				configASSERT( xResult );
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d1d9      	bne.n	8002fac <prvSwitchTimerLists+0xc>
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	e7fe      	b.n	8003008 <prvSwitchTimerLists+0x68>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800300a:	4a05      	ldr	r2, [pc, #20]	; (8003020 <prvSwitchTimerLists+0x80>)
 800300c:	4903      	ldr	r1, [pc, #12]	; (800301c <prvSwitchTimerLists+0x7c>)
 800300e:	6810      	ldr	r0, [r2, #0]
 8003010:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8003012:	6013      	str	r3, [r2, #0]
}
 8003014:	b003      	add	sp, #12
 8003016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800301a:	bf00      	nop
 800301c:	200028e8 	.word	0x200028e8
 8003020:	2000291c 	.word	0x2000291c

08003024 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003028:	4d6d      	ldr	r5, [pc, #436]	; (80031e0 <prvTimerTask+0x1bc>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800302a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80031f0 <prvTimerTask+0x1cc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	462f      	mov	r7, r5
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003032:	682b      	ldr	r3, [r5, #0]
 8003034:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8003038:	f1bb 0f00 	cmp.w	fp, #0
 800303c:	d003      	beq.n	8003046 <prvTimerTask+0x22>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f8d3 9000 	ldr.w	r9, [r3]
 8003044:	e000      	b.n	8003048 <prvTimerTask+0x24>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003046:	46d9      	mov	r9, fp
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003048:	f7ff fbb6 	bl	80027b8 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800304c:	f7ff fbbc 	bl	80027c8 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8003050:	4b64      	ldr	r3, [pc, #400]	; (80031e4 <prvTimerTask+0x1c0>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4290      	cmp	r0, r2
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003056:	4682      	mov	sl, r0
 8003058:	461e      	mov	r6, r3

	if( xTimeNow < xLastTime )
 800305a:	d205      	bcs.n	8003068 <prvTimerTask+0x44>
 800305c:	9303      	str	r3, [sp, #12]
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
 800305e:	2401      	movs	r4, #1

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
 8003060:	f7ff ff9e 	bl	8002fa0 <prvSwitchTimerLists>
 8003064:	9b03      	ldr	r3, [sp, #12]
 8003066:	e000      	b.n	800306a <prvTimerTask+0x46>
		*pxTimerListsWereSwitched = pdTRUE;
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003068:	2400      	movs	r4, #0
	}

	xLastTime = xTimeNow;
 800306a:	f8c3 a000 	str.w	sl, [r3]
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
 800306e:	2c00      	cmp	r4, #0
 8003070:	d14c      	bne.n	800310c <prvTimerTask+0xe8>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003072:	f1bb 0f00 	cmp.w	fp, #0
 8003076:	d02e      	beq.n	80030d6 <prvTimerTask+0xb2>
 8003078:	45ca      	cmp	sl, r9
 800307a:	d333      	bcc.n	80030e4 <prvTimerTask+0xc0>
			{
				( void ) xTaskResumeAll();
 800307c:	f7ff fc42 	bl	8002904 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f8d3 b00c 	ldr.w	fp, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003088:	f10b 0004 	add.w	r0, fp, #4
 800308c:	f7fe fca6 	bl	80019dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003090:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d119      	bne.n	80030cc <prvTimerTask+0xa8>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003098:	f8db 1018 	ldr.w	r1, [fp, #24]
 800309c:	464b      	mov	r3, r9
 800309e:	4652      	mov	r2, sl
 80030a0:	4449      	add	r1, r9
 80030a2:	4658      	mov	r0, fp
 80030a4:	f7ff fee8 	bl	8002e78 <prvInsertTimerInActiveList>
 80030a8:	b180      	cbz	r0, 80030cc <prvTimerTask+0xa8>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80030aa:	9400      	str	r4, [sp, #0]
 80030ac:	4623      	mov	r3, r4
 80030ae:	464a      	mov	r2, r9
 80030b0:	4621      	mov	r1, r4
 80030b2:	4658      	mov	r0, fp
 80030b4:	f7ff ff48 	bl	8002f48 <xTimerGenericCommand>
			configASSERT( xResult );
 80030b8:	b940      	cbnz	r0, 80030cc <prvTimerTask+0xa8>
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	e7fe      	b.n	80030ca <prvTimerTask+0xa6>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030cc:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 80030d0:	4658      	mov	r0, fp
 80030d2:	4798      	blx	r3
 80030d4:	e04c      	b.n	8003170 <prvTimerTask+0x14c>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80030d6:	4b44      	ldr	r3, [pc, #272]	; (80031e8 <prvTimerTask+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	fab2 f282 	clz	r2, r2
 80030e0:	0952      	lsrs	r2, r2, #5
 80030e2:	e000      	b.n	80030e6 <prvTimerTask+0xc2>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80030e4:	4622      	mov	r2, r4
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <prvTimerTask+0x1c8>)
 80030e8:	ebca 0109 	rsb	r1, sl, r9
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	f7ff f9cd 	bl	800248c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80030f2:	f7ff fc07 	bl	8002904 <xTaskResumeAll>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d13a      	bne.n	8003170 <prvTimerTask+0x14c>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80030fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80030fe:	f8c8 3000 	str.w	r3, [r8]
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	e031      	b.n	8003170 <prvTimerTask+0x14c>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800310c:	f7ff fbfa 	bl	8002904 <xTaskResumeAll>
 8003110:	e02e      	b.n	8003170 <prvTimerTask+0x14c>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003112:	2300      	movs	r3, #0
 8003114:	461a      	mov	r2, r3
 8003116:	a905      	add	r1, sp, #20
 8003118:	f8d9 0000 	ldr.w	r0, [r9]
 800311c:	f7ff f8e6 	bl	80022ec <xQueueGenericReceive>
 8003120:	2800      	cmp	r0, #0
 8003122:	d086      	beq.n	8003032 <prvTimerTask+0xe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003124:	9b05      	ldr	r3, [sp, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	dbf3      	blt.n	8003112 <prvTimerTask+0xee>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800312a:	9c07      	ldr	r4, [sp, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800312c:	6963      	ldr	r3, [r4, #20]
 800312e:	b113      	cbz	r3, 8003136 <prvTimerTask+0x112>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003130:	1d20      	adds	r0, r4, #4
 8003132:	f7fe fc53 	bl	80019dc <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003136:	f7ff fb47 	bl	80027c8 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 800313a:	6833      	ldr	r3, [r6, #0]
 800313c:	4298      	cmp	r0, r3
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800313e:	4683      	mov	fp, r0

	if( xTimeNow < xLastTime )
 8003140:	d201      	bcs.n	8003146 <prvTimerTask+0x122>
	{
		prvSwitchTimerLists();
 8003142:	f7ff ff2d 	bl	8002fa0 <prvSwitchTimerLists>
 8003146:	9a05      	ldr	r2, [sp, #20]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8003148:	f8c6 b000 	str.w	fp, [r6]
 800314c:	2a09      	cmp	r2, #9
 800314e:	d8e0      	bhi.n	8003112 <prvTimerTask+0xee>
 8003150:	2301      	movs	r3, #1
 8003152:	4093      	lsls	r3, r2
 8003154:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8003158:	d12e      	bne.n	80031b8 <prvTimerTask+0x194>
 800315a:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800315e:	d00a      	beq.n	8003176 <prvTimerTask+0x152>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003160:	69a1      	ldr	r1, [r4, #24]
 8003162:	9b06      	ldr	r3, [sp, #24]
 8003164:	465a      	mov	r2, fp
 8003166:	4419      	add	r1, r3
 8003168:	4620      	mov	r0, r4
 800316a:	f7ff fe85 	bl	8002e78 <prvInsertTimerInActiveList>
 800316e:	b940      	cbnz	r0, 8003182 <prvTimerTask+0x15e>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003170:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80031ec <prvTimerTask+0x1c8>
 8003174:	e7cd      	b.n	8003112 <prvTimerTask+0xee>
 8003176:	069b      	lsls	r3, r3, #26
 8003178:	d5cb      	bpl.n	8003112 <prvTimerTask+0xee>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800317a:	4620      	mov	r0, r4
 800317c:	f7fe fe86 	bl	8001e8c <vPortFree>
 8003180:	e7f6      	b.n	8003170 <prvTimerTask+0x14c>
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003184:	4620      	mov	r0, r4
 8003186:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003188:	69e3      	ldr	r3, [r4, #28]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d1f0      	bne.n	8003170 <prvTimerTask+0x14c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800318e:	69a2      	ldr	r2, [r4, #24]
 8003190:	9906      	ldr	r1, [sp, #24]
 8003192:	f8cd a000 	str.w	sl, [sp]
 8003196:	440a      	add	r2, r1
 8003198:	4653      	mov	r3, sl
 800319a:	4651      	mov	r1, sl
 800319c:	4620      	mov	r0, r4
 800319e:	f7ff fed3 	bl	8002f48 <xTimerGenericCommand>
							configASSERT( xResult );
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d1e4      	bne.n	8003170 <prvTimerTask+0x14c>
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	e7fe      	b.n	80031b6 <prvTimerTask+0x192>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80031b8:	9906      	ldr	r1, [sp, #24]
 80031ba:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80031bc:	b941      	cbnz	r1, 80031d0 <prvTimerTask+0x1ac>
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	e7fe      	b.n	80031ce <prvTimerTask+0x1aa>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80031d0:	465b      	mov	r3, fp
 80031d2:	465a      	mov	r2, fp
 80031d4:	4459      	add	r1, fp
 80031d6:	4620      	mov	r0, r4
 80031d8:	f7ff fe4e 	bl	8002e78 <prvInsertTimerInActiveList>
 80031dc:	e7c8      	b.n	8003170 <prvTimerTask+0x14c>
 80031de:	bf00      	nop
 80031e0:	200028e8 	.word	0x200028e8
 80031e4:	20002914 	.word	0x20002914
 80031e8:	2000291c 	.word	0x2000291c
 80031ec:	20002918 	.word	0x20002918
 80031f0:	e000ed04 	.word	0xe000ed04

080031f4 <debugPrintMessage>:
		free(a);
		
		return done;
}

int debugPrintMessage(char* s, ...) {
 80031f4:	b40f      	push	{r0, r1, r2, r3}
 80031f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031f8:	ab06      	add	r3, sp, #24
 80031fa:	f853 5b04 	ldr.w	r5, [r3], #4
		va_list arg;
		int done;
		
		va_start (arg, s);
 80031fe:	9301      	str	r3, [sp, #4]
		
		char *a=(char*)malloc(sizeof(char)*(strlen(s) + strlen("Message: ") + 1));
 8003200:	4628      	mov	r0, r5
 8003202:	f7fc ffed 	bl	80001e0 <strlen>
 8003206:	300a      	adds	r0, #10
 8003208:	f000 fb50 	bl	80038ac <malloc>
 800320c:	4604      	mov	r4, r0
		snprintf(a, strlen(s) + strlen("Message: ") + 1, "Message: %s", s);
 800320e:	4628      	mov	r0, r5
 8003210:	f7fc ffe6 	bl	80001e0 <strlen>
 8003214:	462b      	mov	r3, r5
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <debugPrintMessage+0x4c>)
 8003218:	f100 010a 	add.w	r1, r0, #10
 800321c:	4620      	mov	r0, r4
 800321e:	f000 fc3d 	bl	8003a9c <sniprintf>
		
		done = printf (a, arg);
 8003222:	9901      	ldr	r1, [sp, #4]
 8003224:	4620      	mov	r0, r4
 8003226:	f000 fc11 	bl	8003a4c <iprintf>
 800322a:	4605      	mov	r5, r0
		
		va_end (arg);
		free(a);
 800322c:	4620      	mov	r0, r4
 800322e:	f000 fb45 	bl	80038bc <free>
		
		return done;
}
 8003232:	4628      	mov	r0, r5
 8003234:	b003      	add	sp, #12
 8003236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800323a:	b004      	add	sp, #16
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	08004afa 	.word	0x08004afa

08003244 <TestEnvCallback>:

/* TestEnvCallback function */
void TestEnvCallback(void const * argument)
{
  /* USER CODE BEGIN TestEnvCallback */
  if(virtual_testenv_timer_variable >= 75)
 8003244:	4a03      	ldr	r2, [pc, #12]	; (8003254 <TestEnvCallback+0x10>)
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	2b4a      	cmp	r3, #74	; 0x4a
  {
	  virtual_testenv_timer_variable = 0;
 800324a:	bfcc      	ite	gt
 800324c:	2300      	movgt	r3, #0
  } else {
	  virtual_testenv_timer_variable++;
 800324e:	3301      	addle	r3, #1
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4770      	bx	lr
 8003254:	20002928 	.word	0x20002928

08003258 <mainCycleStart>:

/* USER CODE END 4 */

/* mainCycleStart function */
void mainCycleStart(void const * argument)
{
 8003258:	b510      	push	{r4, lr}
  BSP_LED_On(LED2);
 800325a:	2000      	movs	r0, #0
 800325c:	f7fd f818 	bl	8000290 <BSP_LED_On>
  osDelay(500);
 8003260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003264:	f7fe fb65 	bl	8001932 <osDelay>
  BSP_LED_Off(LED2);
 8003268:	2000      	movs	r0, #0
 800326a:	f7fd f81b 	bl	80002a4 <BSP_LED_Off>
  osDelay(500);
 800326e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003272:	f7fe fb5e 	bl	8001932 <osDelay>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  BSP_LED_On(LED2);
 8003276:	2000      	movs	r0, #0
 8003278:	f7fd f80a 	bl	8000290 <BSP_LED_On>
	  osDelay(500);
 800327c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003280:	f7fe fb57 	bl	8001932 <osDelay>
	  BSP_LED_Off(LED2);
 8003284:	2000      	movs	r0, #0
 8003286:	f7fd f80d 	bl	80002a4 <BSP_LED_Off>
	  osDelay(500);
 800328a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800328e:	f7fe fb50 	bl	8001932 <osDelay>

	  DPRINT_MESSAGE("Main Cycle Start\r\n");
 8003292:	4807      	ldr	r0, [pc, #28]	; (80032b0 <mainCycleStart+0x58>)
 8003294:	f7ff ffae 	bl	80031f4 <debugPrintMessage>
	  TickType_t startTicks = xTaskGetTickCount();
 8003298:	f7ff fa96 	bl	80027c8 <xTaskGetTickCount>
 800329c:	4604      	mov	r4, r0
	  //vEvaluate(Input_Storage, &System_State, &Output_Storage);

	  //Set output
	  //vWriteActuatorValues(Output_Storage);

	  TickType_t endTicks = xTaskGetTickCount();
 800329e:	f7ff fa93 	bl	80027c8 <xTaskGetTickCount>
	  int time_diff = (int)endTicks-(int)startTicks;
	  printf("Main Cycle End: Needed %d Ticks\r\n", time_diff);
 80032a2:	1b01      	subs	r1, r0, r4
 80032a4:	4803      	ldr	r0, [pc, #12]	; (80032b4 <mainCycleStart+0x5c>)
 80032a6:	f000 fbd1 	bl	8003a4c <iprintf>

	  //vTaskDelayUntil(&startTicks,1000);
	  osDelay(1000);
 80032aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032ae:	e7e0      	b.n	8003272 <mainCycleStart+0x1a>
 80032b0:	08004b10 	.word	0x08004b10
 80032b4:	08004b23 	.word	0x08004b23

080032b8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80032b8:	b530      	push	{r4, r5, lr}
 80032ba:	b0a7      	sub	sp, #156	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032bc:	2301      	movs	r3, #1
 80032be:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80032c0:	2310      	movs	r3, #16
 80032c2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80032ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032ce:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80032d0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032d2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80032d4:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032d6:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032d8:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80032da:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032dc:	f7fd fce0 	bl	8000ca0 <HAL_RCC_OscConfig>
 80032e0:	b100      	cbz	r0, 80032e4 <SystemClock_Config+0x2c>
 80032e2:	e7fe      	b.n	80032e2 <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032e4:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032e6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ec:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032ee:	4621      	mov	r1, r4
 80032f0:	a801      	add	r0, sp, #4
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032f2:	9501      	str	r5, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032f6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032f8:	f7fd ff88 	bl	800120c <HAL_RCC_ClockConfig>
 80032fc:	b100      	cbz	r0, 8003300 <SystemClock_Config+0x48>
 80032fe:	e7fe      	b.n	80032fe <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
 8003300:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003304:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800330a:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800330c:	a810      	add	r0, sp, #64	; 0x40
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800330e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003312:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003314:	f7fe f874 	bl	8001400 <HAL_RCCEx_PeriphCLKConfig>
 8003318:	4604      	mov	r4, r0
 800331a:	b100      	cbz	r0, 800331e <SystemClock_Config+0x66>
 800331c:	e7fe      	b.n	800331c <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800331e:	f7fe f833 	bl	8001388 <HAL_RCC_GetHCLKFreq>
 8003322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003326:	fbb0 f0f3 	udiv	r0, r0, r3
 800332a:	f7fd fbbd 	bl	8000aa8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800332e:	2004      	movs	r0, #4
 8003330:	f7fd fbd0 	bl	8000ad4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003334:	4622      	mov	r2, r4
 8003336:	4629      	mov	r1, r5
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f7fd fb74 	bl	8000a28 <HAL_NVIC_SetPriority>
}
 8003340:	b027      	add	sp, #156	; 0x9c
 8003342:	bd30      	pop	{r4, r5, pc}

08003344 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8003344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003348:	b08f      	sub	sp, #60	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800334a:	f7fc ffb5 	bl	80002b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800334e:	f7ff ffb3 	bl	80032b8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003352:	4b7a      	ldr	r3, [pc, #488]	; (800353c <main+0x1f8>)
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800335a:	615a      	str	r2, [r3, #20]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003362:	9201      	str	r2, [sp, #4]
 8003364:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800336c:	615a      	str	r2, [r3, #20]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003374:	9202      	str	r2, [sp, #8]
 8003376:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800337e:	615a      	str	r2, [r3, #20]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003386:	9203      	str	r2, [sp, #12]
 8003388:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003390:	615a      	str	r2, [r3, #20]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003398:	2200      	movs	r2, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800339a:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800339c:	2120      	movs	r1, #32
 800339e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a2:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80033a4:	f7fd fc76 	bl	8000c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2400      	movs	r4, #0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033ae:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033b0:	a908      	add	r1, sp, #32
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <main+0x1fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033b4:	4863      	ldr	r0, [pc, #396]	; (8003544 <main+0x200>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033b6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033b8:	2503      	movs	r5, #3
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033bc:	f7fd fb96 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c0:	a908      	add	r1, sp, #32
 80033c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033c6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033c8:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033cc:	f7fd fb8e 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033d0:	230c      	movs	r3, #12
 80033d2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d4:	a908      	add	r1, sp, #32
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033d6:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033e0:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ea:	f7fd fb7f 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80033ee:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f0:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80033f2:	eb0d 0103 	add.w	r1, sp, r3
 80033f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80033fa:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fc:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003402:	f7fd fb73 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8003406:	f242 0303 	movw	r3, #8195	; 0x2003
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340a:	a908      	add	r1, sp, #32
 800340c:	484e      	ldr	r0, [pc, #312]	; (8003548 <main+0x204>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 800340e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003410:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	940a      	str	r4, [sp, #40]	; 0x28
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 8003414:	4d4d      	ldr	r5, [pc, #308]	; (800354c <main+0x208>)

  /*Configure GPIO pins : PB0 PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003416:	f7fd fb69 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800341a:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003422:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003424:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003426:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342a:	f7fd fb5f 	bl	8000aec <HAL_GPIO_Init>
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 800342e:	4b48      	ldr	r3, [pc, #288]	; (8003550 <main+0x20c>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003430:	60ac      	str	r4, [r5, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003432:	f04f 0904 	mov.w	r9, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003436:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003438:	e885 0018 	stmia.w	r5, {r3, r4}
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800343c:	612c      	str	r4, [r5, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800343e:	61ec      	str	r4, [r5, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003440:	626c      	str	r4, [r5, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003442:	632c      	str	r4, [r5, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003444:	62ee      	str	r6, [r5, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003446:	60ec      	str	r4, [r5, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003448:	622e      	str	r6, [r5, #32]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800344a:	636c      	str	r4, [r5, #52]	; 0x34
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800344c:	f8c5 9014 	str.w	r9, [r5, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003450:	61ac      	str	r4, [r5, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003452:	63ac      	str	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003454:	f7fc ff88 	bl	8000368 <HAL_ADC_Init>
 8003458:	b100      	cbz	r0, 800345c <main+0x118>
 800345a:	e7fe      	b.n	800345a <main+0x116>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the ADC multi-mode 
    */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800345c:	af0e      	add	r7, sp, #56	; 0x38
 800345e:	f847 0d24 	str.w	r0, [r7, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003462:	4628      	mov	r0, r5
 8003464:	4639      	mov	r1, r7
 8003466:	f7fd fa43 	bl	80008f0 <HAL_ADCEx_MultiModeConfigChannel>
 800346a:	b100      	cbz	r0, 800346e <main+0x12a>
 800346c:	e7fe      	b.n	800346c <main+0x128>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800346e:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003470:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003472:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.Offset = 0;
 8003474:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003476:	a908      	add	r1, sp, #32
 8003478:	4628      	mov	r0, r5
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 800347a:	9608      	str	r6, [sp, #32]
  sConfig.Rank = 1;
 800347c:	9609      	str	r6, [sp, #36]	; 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800347e:	f7fd f8a9 	bl	80005d4 <HAL_ADC_ConfigChannel>
 8003482:	b100      	cbz	r0, 8003486 <main+0x142>
 8003484:	e7fe      	b.n	8003484 <main+0x140>
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8003486:	4c33      	ldr	r4, [pc, #204]	; (8003554 <main+0x210>)
 8003488:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800348c:	6060      	str	r0, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800348e:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003490:	61e0      	str	r0, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003492:	6260      	str	r0, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003494:	6320      	str	r0, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003496:	60e0      	str	r0, [r4, #12]
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003498:	6360      	str	r0, [r4, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800349a:	61a0      	str	r0, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800349c:	63a0      	str	r0, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800349e:	4620      	mov	r0, r4
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80034a0:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80034a2:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034a4:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 80034a6:	f8c4 8020 	str.w	r8, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034aa:	f8c4 9014 	str.w	r9, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034ae:	f7fc ff5b 	bl	8000368 <HAL_ADC_Init>
 80034b2:	b100      	cbz	r0, 80034b6 <main+0x172>
 80034b4:	e7fe      	b.n	80034b4 <main+0x170>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the ADC multi-mode 
    */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034b6:	9005      	str	r0, [sp, #20]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034b8:	4639      	mov	r1, r7
 80034ba:	4620      	mov	r0, r4
 80034bc:	f7fd fa18 	bl	80008f0 <HAL_ADCEx_MultiModeConfigChannel>
 80034c0:	b100      	cbz	r0, 80034c4 <main+0x180>
 80034c2:	e7fe      	b.n	80034c2 <main+0x17e>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034c4:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80034c6:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034c8:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.Offset = 0;
 80034ca:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034cc:	a908      	add	r1, sp, #32
 80034ce:	4620      	mov	r0, r4
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 80034d0:	9608      	str	r6, [sp, #32]
  sConfig.Rank = 1;
 80034d2:	9609      	str	r6, [sp, #36]	; 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034d4:	f7fd f87e 	bl	80005d4 <HAL_ADC_ConfigChannel>
 80034d8:	b100      	cbz	r0, 80034dc <main+0x198>
 80034da:	e7fe      	b.n	80034da <main+0x196>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 80034dc:	2306      	movs	r3, #6
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034de:	a908      	add	r1, sp, #32
 80034e0:	4620      	mov	r0, r4
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = 2;
 80034e2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 80034e6:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034e8:	f7fd f874 	bl	80005d4 <HAL_ADC_ConfigChannel>
 80034ec:	4680      	mov	r8, r0
 80034ee:	b100      	cbz	r0, 80034f2 <main+0x1ae>
 80034f0:	e7fe      	b.n	80034f0 <main+0x1ac>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer_TestEnv */
  osTimerDef(Timer_TestEnv, TestEnvCallback);
 80034f2:	4b19      	ldr	r3, [pc, #100]	; (8003558 <main+0x214>)
 80034f4:	9305      	str	r3, [sp, #20]
  Timer_TestEnvHandle = osTimerCreate(osTimer(Timer_TestEnv), osTimerPeriodic, NULL);
 80034f6:	4602      	mov	r2, r0
 80034f8:	4631      	mov	r1, r6
 80034fa:	4638      	mov	r0, r7
 80034fc:	f7fe fa22 	bl	8001944 <osTimerCreate>
#endif
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of mainCycle */
  osThreadDef(mainCycle, mainCycleStart, osPriorityAboveNormal, 0, 128);
 8003500:	4d16      	ldr	r5, [pc, #88]	; (800355c <main+0x218>)
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer_TestEnv */
  osTimerDef(Timer_TestEnv, TestEnvCallback);
  Timer_TestEnvHandle = osTimerCreate(osTimer(Timer_TestEnv), osTimerPeriodic, NULL);
 8003502:	4b17      	ldr	r3, [pc, #92]	; (8003560 <main+0x21c>)
 8003504:	6018      	str	r0, [r3, #0]
#endif
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of mainCycle */
  osThreadDef(mainCycle, mainCycleStart, osPriorityAboveNormal, 0, 128);
 8003506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003508:	ac08      	add	r4, sp, #32
 800350a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	6023      	str	r3, [r4, #0]
  mainCycleHandle = osThreadCreate(osThread(mainCycle), NULL);
 8003510:	4641      	mov	r1, r8
 8003512:	a808      	add	r0, sp, #32
 8003514:	f7fe f9f5 	bl	8001902 <osThreadCreate>
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <main+0x220>)
 800351a:	6018      	str	r0, [r3, #0]
  if (mainCycleHandle == NULL)
 800351c:	b908      	cbnz	r0, 8003522 <main+0x1de>
  {
	  DPRINT_MESSAGE("Main Task is Null");
 800351e:	4812      	ldr	r0, [pc, #72]	; (8003568 <main+0x224>)
 8003520:	e000      	b.n	8003524 <main+0x1e0>
  }
  else
  {
	  DPRINT_MESSAGE("Main Task is not Null");
 8003522:	4812      	ldr	r0, [pc, #72]	; (800356c <main+0x228>)
 8003524:	f7ff fe66 	bl	80031f4 <debugPrintMessage>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  DPRINT_MESSAGE("Here2\r\n");
 8003528:	4811      	ldr	r0, [pc, #68]	; (8003570 <main+0x22c>)
 800352a:	f7ff fe63 	bl	80031f4 <debugPrintMessage>
  osKernelStart();
 800352e:	f7fe f9e3 	bl	80018f8 <osKernelStart>
  
  DPRINT_MESSAGE("Here3\r\n");
 8003532:	4810      	ldr	r0, [pc, #64]	; (8003574 <main+0x230>)
 8003534:	f7ff fe5e 	bl	80031f4 <debugPrintMessage>
 8003538:	e7fe      	b.n	8003538 <main+0x1f4>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	10210000 	.word	0x10210000
 8003544:	48000800 	.word	0x48000800
 8003548:	48000400 	.word	0x48000400
 800354c:	20002a84 	.word	0x20002a84
 8003550:	50000400 	.word	0x50000400
 8003554:	20002a30 	.word	0x20002a30
 8003558:	08003245 	.word	0x08003245
 800355c:	08004aa8 	.word	0x08004aa8
 8003560:	20002ad8 	.word	0x20002ad8
 8003564:	20002afc 	.word	0x20002afc
 8003568:	08004b45 	.word	0x08004b45
 800356c:	08004b57 	.word	0x08004b57
 8003570:	08004b6d 	.word	0x08004b6d
 8003574:	08004b75 	.word	0x08004b75

08003578 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003578:	6802      	ldr	r2, [r0, #0]
 800357a:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800357c:	429a      	cmp	r2, r3
 800357e:	d101      	bne.n	8003584 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003580:	f7fc beac 	b.w	80002dc <HAL_IncTick>
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40012c00 	.word	0x40012c00

0800358c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358c:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_MspInit+0x78>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800358e:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	619a      	str	r2, [r3, #24]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035a0:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035a4:	f7fd fa2e 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	4611      	mov	r1, r2
 80035ac:	f06f 000b 	mvn.w	r0, #11
 80035b0:	f7fd fa3a 	bl	8000a28 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80035b4:	2200      	movs	r2, #0
 80035b6:	4611      	mov	r1, r2
 80035b8:	f06f 000a 	mvn.w	r0, #10
 80035bc:	f7fd fa34 	bl	8000a28 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80035c0:	2200      	movs	r2, #0
 80035c2:	4611      	mov	r1, r2
 80035c4:	f06f 0009 	mvn.w	r0, #9
 80035c8:	f7fd fa2e 	bl	8000a28 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80035cc:	2200      	movs	r2, #0
 80035ce:	4611      	mov	r1, r2
 80035d0:	f06f 0004 	mvn.w	r0, #4
 80035d4:	f7fd fa28 	bl	8000a28 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80035d8:	2200      	movs	r2, #0
 80035da:	4611      	mov	r1, r2
 80035dc:	f06f 0003 	mvn.w	r0, #3
 80035e0:	f7fd fa22 	bl	8000a28 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035e4:	2200      	movs	r2, #0
 80035e6:	210f      	movs	r1, #15
 80035e8:	f06f 0001 	mvn.w	r0, #1
 80035ec:	f7fd fa1c 	bl	8000a28 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80035f0:	2200      	movs	r2, #0
 80035f2:	210f      	movs	r1, #15
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	f7fd fa16 	bl	8000a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035fc:	b003      	add	sp, #12
 80035fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000

08003608 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003608:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800360a:	6803      	ldr	r3, [r0, #0]
 800360c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003610:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003612:	d11d      	bne.n	8003650 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003614:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003618:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PC0     ------> ADC1_IN6
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800361c:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800361e:	695a      	ldr	r2, [r3, #20]
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003620:	4818      	ldr	r0, [pc, #96]	; (8003684 <HAL_ADC_MspInit+0x7c>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003622:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003626:	615a      	str	r2, [r3, #20]
 8003628:	695b      	ldr	r3, [r3, #20]
    PC0     ------> ADC1_IN6
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800362a:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	9b01      	ldr	r3, [sp, #4]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2500      	movs	r5, #0
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003636:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003638:	a903      	add	r1, sp, #12
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800363a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800363e:	f7fd fa55 	bl	8000aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003642:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003644:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003648:	a903      	add	r1, sp, #12
 800364a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800364e:	e015      	b.n	800367c <HAL_ADC_MspInit+0x74>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8003650:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <HAL_ADC_MspInit+0x80>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d114      	bne.n	8003680 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_ADC_MspInit+0x84>)
    PB13     ------> ADC3_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003658:	480d      	ldr	r0, [pc, #52]	; (8003690 <HAL_ADC_MspInit+0x88>)
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003660:	615a      	str	r2, [r3, #20]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003668:	9302      	str	r3, [sp, #8]
 800366a:	9b02      	ldr	r3, [sp, #8]
    /**ADC3 GPIO Configuration    
    PB0     ------> ADC3_IN12
    PB1     ------> ADC3_IN1
    PB13     ------> ADC3_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 800366c:	f242 0303 	movw	r3, #8195	; 0x2003
 8003670:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003672:	2303      	movs	r3, #3
 8003674:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367a:	a903      	add	r1, sp, #12
 800367c:	f7fd fa36 	bl	8000aec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003680:	b009      	add	sp, #36	; 0x24
 8003682:	bd30      	pop	{r4, r5, pc}
 8003684:	48000800 	.word	0x48000800
 8003688:	50000400 	.word	0x50000400
 800368c:	40021000 	.word	0x40021000
 8003690:	48000400 	.word	0x48000400

08003694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003694:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8003696:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003698:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800369a:	2200      	movs	r2, #0
 800369c:	2019      	movs	r0, #25
 800369e:	f7fd f9c3 	bl	8000a28 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80036a2:	2019      	movs	r0, #25
 80036a4:	f7fd f9f4 	bl	8000a90 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80036aa:	4c15      	ldr	r4, [pc, #84]	; (8003700 <HAL_InitTick+0x6c>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b2:	619a      	str	r2, [r3, #24]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ba:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036bc:	a901      	add	r1, sp, #4
 80036be:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80036c0:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036c2:	f7fd fe7f 	bl	80013c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80036c6:	f7fd fe65 	bl	8001394 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80036ca:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <HAL_InitTick+0x70>)
 80036cc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80036ce:	f240 33e7 	movw	r3, #999	; 0x3e7
 80036d2:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <HAL_InitTick+0x74>)
 80036d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80036da:	3801      	subs	r0, #1
  htim1.Init.ClockDivision = 0;
 80036dc:	2300      	movs	r3, #0
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
 80036de:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80036e0:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80036e2:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80036e6:	f7fe f8eb 	bl	80018c0 <HAL_TIM_Base_Init>
 80036ea:	b918      	cbnz	r0, 80036f4 <HAL_InitTick+0x60>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7fd ffcc 	bl	800168a <HAL_TIM_Base_Start_IT>
 80036f2:	e000      	b.n	80036f6 <HAL_InitTick+0x62>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80036f4:	2001      	movs	r0, #1
}
 80036f6:	b008      	add	sp, #32
 80036f8:	bd10      	pop	{r4, pc}
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	20002b00 	.word	0x20002b00
 8003704:	40012c00 	.word	0x40012c00
 8003708:	000f4240 	.word	0x000f4240

0800370c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800370c:	f7fe b92a 	b.w	8001964 <osSystickHandler>

08003710 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003710:	4801      	ldr	r0, [pc, #4]	; (8003718 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8003712:	f7fd bfc9 	b.w	80016a8 <HAL_TIM_IRQHandler>
 8003716:	bf00      	nop
 8003718:	20002b00 	.word	0x20002b00

0800371c <_write>:
	errno = EINVAL;
	return -1;
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800371c:	b510      	push	{r4, lr}
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800371e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003722:	440a      	add	r2, r1
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003724:	4618      	mov	r0, r3

	while(len--)
 8003726:	4291      	cmp	r1, r2
 8003728:	d011      	beq.n	800374e <_write+0x32>
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800372a:	f8d3 4e80 	ldr.w	r4, [r3, #3712]	; 0xe80
 800372e:	07e4      	lsls	r4, r4, #31
	{
		ITM_SendChar(*(ptr++));
 8003730:	f101 0101 	add.w	r1, r1, #1
 8003734:	d5f7      	bpl.n	8003726 <_write+0xa>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003736:	f8d3 4e00 	ldr.w	r4, [r3, #3584]	; 0xe00
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800373a:	07e4      	lsls	r4, r4, #31
 800373c:	d5f3      	bpl.n	8003726 <_write+0xa>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800373e:	681c      	ldr	r4, [r3, #0]
 8003740:	b90c      	cbnz	r4, 8003746 <_write+0x2a>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003742:	bf00      	nop
 8003744:	e7fb      	b.n	800373e <_write+0x22>
 8003746:	f811 4c01 	ldrb.w	r4, [r1, #-1]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800374a:	7004      	strb	r4, [r0, #0]
 800374c:	e7eb      	b.n	8003726 <_write+0xa>
	}

	/* Implement your write code here, this is used by puts and printf for example */
	return len;
}
 800374e:	f04f 30ff 	mov.w	r0, #4294967295
 8003752:	bd10      	pop	{r4, pc}

08003754 <_sbrk>:
{
	extern uint8_t end asm("end");
	static uint8_t *heap_end;
	uint8_t *prev_heap_end;

	if (heap_end == 0)
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <_sbrk+0x28>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	b90a      	cbnz	r2, 800375e <_sbrk+0xa>
		heap_end = &end;
 800375a:	4a09      	ldr	r2, [pc, #36]	; (8003780 <_sbrk+0x2c>)
 800375c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800375e:	681b      	ldr	r3, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003760:	466a      	mov	r2, sp
 8003762:	4418      	add	r0, r3
 8003764:	4290      	cmp	r0, r2
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003766:	bf89      	itett	hi
 8003768:	4b06      	ldrhi	r3, [pc, #24]	; (8003784 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 800376a:	4a04      	ldrls	r2, [pc, #16]	; (800377c <_sbrk+0x28>)
	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800376c:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800376e:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
 8003772:	bf96      	itet	ls
 8003774:	6010      	strls	r0, [r2, #0]
	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003776:	601a      	strhi	r2, [r3, #0]
		return (caddr_t) -1;
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
 8003778:	4618      	movls	r0, r3
}
 800377a:	4770      	bx	lr
 800377c:	20002924 	.word	0x20002924
 8003780:	20002b44 	.word	0x20002b44
 8003784:	20002b40 	.word	0x20002b40

08003788 <_close>:

int _close(int32_t file)
{
	return -1;
}
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	4770      	bx	lr

0800378e <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800378e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003792:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003794:	2000      	movs	r0, #0
 8003796:	4770      	bx	lr

08003798 <_isatty>:

int _isatty(int32_t file)
{
	return 1;
}
 8003798:	2001      	movs	r0, #1
 800379a:	4770      	bx	lr

0800379c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	return 0;
}
 800379c:	2000      	movs	r0, #0
 800379e:	4770      	bx	lr

080037a0 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
	return 0;
}
 80037a0:	2000      	movs	r0, #0
 80037a2:	4770      	bx	lr

080037a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037a4:	4915      	ldr	r1, [pc, #84]	; (80037fc <SystemInit+0x58>)
 80037a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80037aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <SystemInit+0x5c>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80037bc:	6858      	ldr	r0, [r3, #4]
 80037be:	4a11      	ldr	r2, [pc, #68]	; (8003804 <SystemInit+0x60>)
 80037c0:	4002      	ands	r2, r0
 80037c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80037ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037ce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80037de:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	f022 020f 	bic.w	r2, r2, #15
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80037e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037ea:	4a07      	ldr	r2, [pc, #28]	; (8003808 <SystemInit+0x64>)
 80037ec:	4002      	ands	r2, r0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80037f0:	2200      	movs	r2, #0
 80037f2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037f8:	608b      	str	r3, [r1, #8]
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00
 8003800:	40021000 	.word	0x40021000
 8003804:	f87fc00c 	.word	0xf87fc00c
 8003808:	ff00fccc 	.word	0xff00fccc

0800380c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800380c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003844 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003810:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003812:	e003      	b.n	800381c <LoopCopyDataInit>

08003814 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003816:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003818:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800381a:	3104      	adds	r1, #4

0800381c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800381c:	480b      	ldr	r0, [pc, #44]	; (800384c <LoopForever+0xa>)
	ldr	r3, =_edata
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003820:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003822:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003824:	d3f6      	bcc.n	8003814 <CopyDataInit>
	ldr	r2, =_sbss
 8003826:	4a0b      	ldr	r2, [pc, #44]	; (8003854 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003828:	e002      	b.n	8003830 <LoopFillZerobss>

0800382a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800382a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800382c:	f842 3b04 	str.w	r3, [r2], #4

08003830 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <LoopForever+0x16>)
	cmp	r2, r3
 8003832:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003834:	d3f9      	bcc.n	800382a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003836:	f7ff ffb5 	bl	80037a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800383a:	f000 f811 	bl	8003860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800383e:	f7ff fd81 	bl	8003344 <main>

08003842 <LoopForever>:

LoopForever:
    b LoopForever
 8003842:	e7fe      	b.n	8003842 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003844:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8003848:	08004c44 	.word	0x08004c44
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 800384c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003850:	20000070 	.word	0x20000070
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8003854:	20000070 	.word	0x20000070
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8003858:	20002b44 	.word	0x20002b44

0800385c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800385c:	e7fe      	b.n	800385c <ADC1_2_IRQHandler>
	...

08003860 <__libc_init_array>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <__libc_init_array+0x3c>)
 8003864:	4c0e      	ldr	r4, [pc, #56]	; (80038a0 <__libc_init_array+0x40>)
 8003866:	1ae4      	subs	r4, r4, r3
 8003868:	10a4      	asrs	r4, r4, #2
 800386a:	2500      	movs	r5, #0
 800386c:	461e      	mov	r6, r3
 800386e:	42a5      	cmp	r5, r4
 8003870:	d004      	beq.n	800387c <__libc_init_array+0x1c>
 8003872:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003876:	4798      	blx	r3
 8003878:	3501      	adds	r5, #1
 800387a:	e7f8      	b.n	800386e <__libc_init_array+0xe>
 800387c:	f001 f908 	bl	8004a90 <_init>
 8003880:	4c08      	ldr	r4, [pc, #32]	; (80038a4 <__libc_init_array+0x44>)
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <__libc_init_array+0x48>)
 8003884:	1ae4      	subs	r4, r4, r3
 8003886:	10a4      	asrs	r4, r4, #2
 8003888:	2500      	movs	r5, #0
 800388a:	461e      	mov	r6, r3
 800388c:	42a5      	cmp	r5, r4
 800388e:	d004      	beq.n	800389a <__libc_init_array+0x3a>
 8003890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003894:	4798      	blx	r3
 8003896:	3501      	adds	r5, #1
 8003898:	e7f8      	b.n	800388c <__libc_init_array+0x2c>
 800389a:	bd70      	pop	{r4, r5, r6, pc}
 800389c:	08004c3c 	.word	0x08004c3c
 80038a0:	08004c3c 	.word	0x08004c3c
 80038a4:	08004c40 	.word	0x08004c40
 80038a8:	08004c3c 	.word	0x08004c3c

080038ac <malloc>:
 80038ac:	4b02      	ldr	r3, [pc, #8]	; (80038b8 <malloc+0xc>)
 80038ae:	4601      	mov	r1, r0
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	f000 b86d 	b.w	8003990 <_malloc_r>
 80038b6:	bf00      	nop
 80038b8:	2000006c 	.word	0x2000006c

080038bc <free>:
 80038bc:	4b02      	ldr	r3, [pc, #8]	; (80038c8 <free+0xc>)
 80038be:	4601      	mov	r1, r0
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	f000 b817 	b.w	80038f4 <_free_r>
 80038c6:	bf00      	nop
 80038c8:	2000006c 	.word	0x2000006c

080038cc <memcpy>:
 80038cc:	b510      	push	{r4, lr}
 80038ce:	1e43      	subs	r3, r0, #1
 80038d0:	440a      	add	r2, r1
 80038d2:	4291      	cmp	r1, r2
 80038d4:	d004      	beq.n	80038e0 <memcpy+0x14>
 80038d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038de:	e7f8      	b.n	80038d2 <memcpy+0x6>
 80038e0:	bd10      	pop	{r4, pc}

080038e2 <memset>:
 80038e2:	4402      	add	r2, r0
 80038e4:	4603      	mov	r3, r0
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d002      	beq.n	80038f0 <memset+0xe>
 80038ea:	f803 1b01 	strb.w	r1, [r3], #1
 80038ee:	e7fa      	b.n	80038e6 <memset+0x4>
 80038f0:	4770      	bx	lr
	...

080038f4 <_free_r>:
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	4605      	mov	r5, r0
 80038f8:	2900      	cmp	r1, #0
 80038fa:	d046      	beq.n	800398a <_free_r+0x96>
 80038fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003900:	1f0c      	subs	r4, r1, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bfb8      	it	lt
 8003906:	18e4      	addlt	r4, r4, r3
 8003908:	f000 f9c4 	bl	8003c94 <__malloc_lock>
 800390c:	4a1f      	ldr	r2, [pc, #124]	; (800398c <_free_r+0x98>)
 800390e:	6813      	ldr	r3, [r2, #0]
 8003910:	4611      	mov	r1, r2
 8003912:	b913      	cbnz	r3, 800391a <_free_r+0x26>
 8003914:	6063      	str	r3, [r4, #4]
 8003916:	6014      	str	r4, [r2, #0]
 8003918:	e032      	b.n	8003980 <_free_r+0x8c>
 800391a:	42a3      	cmp	r3, r4
 800391c:	d90e      	bls.n	800393c <_free_r+0x48>
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	18a0      	adds	r0, r4, r2
 8003922:	4283      	cmp	r3, r0
 8003924:	bf04      	itt	eq
 8003926:	6818      	ldreq	r0, [r3, #0]
 8003928:	685b      	ldreq	r3, [r3, #4]
 800392a:	6063      	str	r3, [r4, #4]
 800392c:	bf04      	itt	eq
 800392e:	1812      	addeq	r2, r2, r0
 8003930:	6022      	streq	r2, [r4, #0]
 8003932:	600c      	str	r4, [r1, #0]
 8003934:	e024      	b.n	8003980 <_free_r+0x8c>
 8003936:	42a2      	cmp	r2, r4
 8003938:	d803      	bhi.n	8003942 <_free_r+0x4e>
 800393a:	4613      	mov	r3, r2
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	2a00      	cmp	r2, #0
 8003940:	d1f9      	bne.n	8003936 <_free_r+0x42>
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	1819      	adds	r1, r3, r0
 8003946:	42a1      	cmp	r1, r4
 8003948:	d10b      	bne.n	8003962 <_free_r+0x6e>
 800394a:	6821      	ldr	r1, [r4, #0]
 800394c:	4401      	add	r1, r0
 800394e:	1858      	adds	r0, r3, r1
 8003950:	4282      	cmp	r2, r0
 8003952:	6019      	str	r1, [r3, #0]
 8003954:	d114      	bne.n	8003980 <_free_r+0x8c>
 8003956:	6810      	ldr	r0, [r2, #0]
 8003958:	6852      	ldr	r2, [r2, #4]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	4401      	add	r1, r0
 800395e:	6019      	str	r1, [r3, #0]
 8003960:	e00e      	b.n	8003980 <_free_r+0x8c>
 8003962:	d902      	bls.n	800396a <_free_r+0x76>
 8003964:	230c      	movs	r3, #12
 8003966:	602b      	str	r3, [r5, #0]
 8003968:	e00a      	b.n	8003980 <_free_r+0x8c>
 800396a:	6821      	ldr	r1, [r4, #0]
 800396c:	1860      	adds	r0, r4, r1
 800396e:	4282      	cmp	r2, r0
 8003970:	bf04      	itt	eq
 8003972:	6810      	ldreq	r0, [r2, #0]
 8003974:	6852      	ldreq	r2, [r2, #4]
 8003976:	6062      	str	r2, [r4, #4]
 8003978:	bf04      	itt	eq
 800397a:	1809      	addeq	r1, r1, r0
 800397c:	6021      	streq	r1, [r4, #0]
 800397e:	605c      	str	r4, [r3, #4]
 8003980:	4628      	mov	r0, r5
 8003982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003986:	f000 b986 	b.w	8003c96 <__malloc_unlock>
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	20002930 	.word	0x20002930

08003990 <_malloc_r>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	1ccd      	adds	r5, r1, #3
 8003994:	f025 0503 	bic.w	r5, r5, #3
 8003998:	3508      	adds	r5, #8
 800399a:	2d0c      	cmp	r5, #12
 800399c:	bf38      	it	cc
 800399e:	250c      	movcc	r5, #12
 80039a0:	2d00      	cmp	r5, #0
 80039a2:	4606      	mov	r6, r0
 80039a4:	db01      	blt.n	80039aa <_malloc_r+0x1a>
 80039a6:	42a9      	cmp	r1, r5
 80039a8:	d902      	bls.n	80039b0 <_malloc_r+0x20>
 80039aa:	230c      	movs	r3, #12
 80039ac:	6033      	str	r3, [r6, #0]
 80039ae:	e046      	b.n	8003a3e <_malloc_r+0xae>
 80039b0:	f000 f970 	bl	8003c94 <__malloc_lock>
 80039b4:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <_malloc_r+0xb4>)
 80039b6:	681c      	ldr	r4, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	4621      	mov	r1, r4
 80039bc:	b1a1      	cbz	r1, 80039e8 <_malloc_r+0x58>
 80039be:	680b      	ldr	r3, [r1, #0]
 80039c0:	1b5b      	subs	r3, r3, r5
 80039c2:	d40e      	bmi.n	80039e2 <_malloc_r+0x52>
 80039c4:	2b0b      	cmp	r3, #11
 80039c6:	d903      	bls.n	80039d0 <_malloc_r+0x40>
 80039c8:	600b      	str	r3, [r1, #0]
 80039ca:	18cc      	adds	r4, r1, r3
 80039cc:	50cd      	str	r5, [r1, r3]
 80039ce:	e01e      	b.n	8003a0e <_malloc_r+0x7e>
 80039d0:	428c      	cmp	r4, r1
 80039d2:	bf0d      	iteet	eq
 80039d4:	6863      	ldreq	r3, [r4, #4]
 80039d6:	684b      	ldrne	r3, [r1, #4]
 80039d8:	6063      	strne	r3, [r4, #4]
 80039da:	6013      	streq	r3, [r2, #0]
 80039dc:	bf18      	it	ne
 80039de:	460c      	movne	r4, r1
 80039e0:	e015      	b.n	8003a0e <_malloc_r+0x7e>
 80039e2:	460c      	mov	r4, r1
 80039e4:	6849      	ldr	r1, [r1, #4]
 80039e6:	e7e9      	b.n	80039bc <_malloc_r+0x2c>
 80039e8:	4c17      	ldr	r4, [pc, #92]	; (8003a48 <_malloc_r+0xb8>)
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	b91b      	cbnz	r3, 80039f6 <_malloc_r+0x66>
 80039ee:	4630      	mov	r0, r6
 80039f0:	f000 f844 	bl	8003a7c <_sbrk_r>
 80039f4:	6020      	str	r0, [r4, #0]
 80039f6:	4629      	mov	r1, r5
 80039f8:	4630      	mov	r0, r6
 80039fa:	f000 f83f 	bl	8003a7c <_sbrk_r>
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	d018      	beq.n	8003a34 <_malloc_r+0xa4>
 8003a02:	1cc4      	adds	r4, r0, #3
 8003a04:	f024 0403 	bic.w	r4, r4, #3
 8003a08:	42a0      	cmp	r0, r4
 8003a0a:	d10d      	bne.n	8003a28 <_malloc_r+0x98>
 8003a0c:	6025      	str	r5, [r4, #0]
 8003a0e:	4630      	mov	r0, r6
 8003a10:	f000 f941 	bl	8003c96 <__malloc_unlock>
 8003a14:	f104 000b 	add.w	r0, r4, #11
 8003a18:	1d23      	adds	r3, r4, #4
 8003a1a:	f020 0007 	bic.w	r0, r0, #7
 8003a1e:	1ac3      	subs	r3, r0, r3
 8003a20:	d00e      	beq.n	8003a40 <_malloc_r+0xb0>
 8003a22:	425a      	negs	r2, r3
 8003a24:	50e2      	str	r2, [r4, r3]
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
 8003a28:	1a21      	subs	r1, r4, r0
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	f000 f826 	bl	8003a7c <_sbrk_r>
 8003a30:	3001      	adds	r0, #1
 8003a32:	d1eb      	bne.n	8003a0c <_malloc_r+0x7c>
 8003a34:	230c      	movs	r3, #12
 8003a36:	6033      	str	r3, [r6, #0]
 8003a38:	4630      	mov	r0, r6
 8003a3a:	f000 f92c 	bl	8003c96 <__malloc_unlock>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
 8003a42:	bf00      	nop
 8003a44:	20002930 	.word	0x20002930
 8003a48:	2000292c 	.word	0x2000292c

08003a4c <iprintf>:
 8003a4c:	b40f      	push	{r0, r1, r2, r3}
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <iprintf+0x2c>)
 8003a50:	b513      	push	{r0, r1, r4, lr}
 8003a52:	681c      	ldr	r4, [r3, #0]
 8003a54:	b124      	cbz	r4, 8003a60 <iprintf+0x14>
 8003a56:	69a3      	ldr	r3, [r4, #24]
 8003a58:	b913      	cbnz	r3, 8003a60 <iprintf+0x14>
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 f890 	bl	8003b80 <__sinit>
 8003a60:	ab05      	add	r3, sp, #20
 8003a62:	9a04      	ldr	r2, [sp, #16]
 8003a64:	68a1      	ldr	r1, [r4, #8]
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f000 fa8d 	bl	8003f88 <_vfiprintf_r>
 8003a6e:	b002      	add	sp, #8
 8003a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a74:	b004      	add	sp, #16
 8003a76:	4770      	bx	lr
 8003a78:	2000006c 	.word	0x2000006c

08003a7c <_sbrk_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4c06      	ldr	r4, [pc, #24]	; (8003a98 <_sbrk_r+0x1c>)
 8003a80:	2300      	movs	r3, #0
 8003a82:	4605      	mov	r5, r0
 8003a84:	4608      	mov	r0, r1
 8003a86:	6023      	str	r3, [r4, #0]
 8003a88:	f7ff fe64 	bl	8003754 <_sbrk>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d102      	bne.n	8003a96 <_sbrk_r+0x1a>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	b103      	cbz	r3, 8003a96 <_sbrk_r+0x1a>
 8003a94:	602b      	str	r3, [r5, #0]
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
 8003a98:	20002b40 	.word	0x20002b40

08003a9c <sniprintf>:
 8003a9c:	b40c      	push	{r2, r3}
 8003a9e:	b530      	push	{r4, r5, lr}
 8003aa0:	4b16      	ldr	r3, [pc, #88]	; (8003afc <sniprintf+0x60>)
 8003aa2:	1e0c      	subs	r4, r1, #0
 8003aa4:	b09d      	sub	sp, #116	; 0x74
 8003aa6:	681d      	ldr	r5, [r3, #0]
 8003aa8:	da04      	bge.n	8003ab4 <sniprintf+0x18>
 8003aaa:	238b      	movs	r3, #139	; 0x8b
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab2:	e01e      	b.n	8003af2 <sniprintf+0x56>
 8003ab4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003ab8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003abc:	bf14      	ite	ne
 8003abe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ac2:	4623      	moveq	r3, r4
 8003ac4:	9304      	str	r3, [sp, #16]
 8003ac6:	9307      	str	r3, [sp, #28]
 8003ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003acc:	9002      	str	r0, [sp, #8]
 8003ace:	9006      	str	r0, [sp, #24]
 8003ad0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ad4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ad6:	ab21      	add	r3, sp, #132	; 0x84
 8003ad8:	a902      	add	r1, sp, #8
 8003ada:	4628      	mov	r0, r5
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	f000 f935 	bl	8003d4c <_svfiprintf_r>
 8003ae2:	1c43      	adds	r3, r0, #1
 8003ae4:	bfbc      	itt	lt
 8003ae6:	238b      	movlt	r3, #139	; 0x8b
 8003ae8:	602b      	strlt	r3, [r5, #0]
 8003aea:	b114      	cbz	r4, 8003af2 <sniprintf+0x56>
 8003aec:	9b02      	ldr	r3, [sp, #8]
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	b01d      	add	sp, #116	; 0x74
 8003af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003af8:	b002      	add	sp, #8
 8003afa:	4770      	bx	lr
 8003afc:	2000006c 	.word	0x2000006c

08003b00 <_cleanup_r>:
 8003b00:	4901      	ldr	r1, [pc, #4]	; (8003b08 <_cleanup_r+0x8>)
 8003b02:	f000 b8a9 	b.w	8003c58 <_fwalk_reent>
 8003b06:	bf00      	nop
 8003b08:	08004859 	.word	0x08004859

08003b0c <std.isra.0>:
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	b510      	push	{r4, lr}
 8003b10:	4604      	mov	r4, r0
 8003b12:	6003      	str	r3, [r0, #0]
 8003b14:	6043      	str	r3, [r0, #4]
 8003b16:	6083      	str	r3, [r0, #8]
 8003b18:	8181      	strh	r1, [r0, #12]
 8003b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8003b1c:	81c2      	strh	r2, [r0, #14]
 8003b1e:	6103      	str	r3, [r0, #16]
 8003b20:	6143      	str	r3, [r0, #20]
 8003b22:	6183      	str	r3, [r0, #24]
 8003b24:	4619      	mov	r1, r3
 8003b26:	2208      	movs	r2, #8
 8003b28:	305c      	adds	r0, #92	; 0x5c
 8003b2a:	f7ff feda 	bl	80038e2 <memset>
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <std.isra.0+0x38>)
 8003b30:	6263      	str	r3, [r4, #36]	; 0x24
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <std.isra.0+0x3c>)
 8003b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <std.isra.0+0x40>)
 8003b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <std.isra.0+0x44>)
 8003b3c:	6224      	str	r4, [r4, #32]
 8003b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b40:	bd10      	pop	{r4, pc}
 8003b42:	bf00      	nop
 8003b44:	080044f9 	.word	0x080044f9
 8003b48:	0800451b 	.word	0x0800451b
 8003b4c:	08004553 	.word	0x08004553
 8003b50:	08004577 	.word	0x08004577

08003b54 <__sfmoreglue>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	2368      	movs	r3, #104	; 0x68
 8003b58:	1e4d      	subs	r5, r1, #1
 8003b5a:	435d      	muls	r5, r3
 8003b5c:	460e      	mov	r6, r1
 8003b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b62:	f7ff ff15 	bl	8003990 <_malloc_r>
 8003b66:	4604      	mov	r4, r0
 8003b68:	b140      	cbz	r0, 8003b7c <__sfmoreglue+0x28>
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	e880 0042 	stmia.w	r0, {r1, r6}
 8003b70:	300c      	adds	r0, #12
 8003b72:	60a0      	str	r0, [r4, #8]
 8003b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b78:	f7ff feb3 	bl	80038e2 <memset>
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}

08003b80 <__sinit>:
 8003b80:	6983      	ldr	r3, [r0, #24]
 8003b82:	b510      	push	{r4, lr}
 8003b84:	4604      	mov	r4, r0
 8003b86:	bb33      	cbnz	r3, 8003bd6 <__sinit+0x56>
 8003b88:	6483      	str	r3, [r0, #72]	; 0x48
 8003b8a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003b8c:	6503      	str	r3, [r0, #80]	; 0x50
 8003b8e:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <__sinit+0x58>)
 8003b90:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <__sinit+0x5c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6282      	str	r2, [r0, #40]	; 0x28
 8003b96:	4298      	cmp	r0, r3
 8003b98:	bf04      	itt	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	6183      	streq	r3, [r0, #24]
 8003b9e:	f000 f81f 	bl	8003be0 <__sfp>
 8003ba2:	6060      	str	r0, [r4, #4]
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 f81b 	bl	8003be0 <__sfp>
 8003baa:	60a0      	str	r0, [r4, #8]
 8003bac:	4620      	mov	r0, r4
 8003bae:	f000 f817 	bl	8003be0 <__sfp>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60e0      	str	r0, [r4, #12]
 8003bb6:	2104      	movs	r1, #4
 8003bb8:	6860      	ldr	r0, [r4, #4]
 8003bba:	f7ff ffa7 	bl	8003b0c <std.isra.0>
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2109      	movs	r1, #9
 8003bc2:	68a0      	ldr	r0, [r4, #8]
 8003bc4:	f7ff ffa2 	bl	8003b0c <std.isra.0>
 8003bc8:	2202      	movs	r2, #2
 8003bca:	2112      	movs	r1, #18
 8003bcc:	68e0      	ldr	r0, [r4, #12]
 8003bce:	f7ff ff9d 	bl	8003b0c <std.isra.0>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61a3      	str	r3, [r4, #24]
 8003bd6:	bd10      	pop	{r4, pc}
 8003bd8:	08004c04 	.word	0x08004c04
 8003bdc:	08003b01 	.word	0x08003b01

08003be0 <__sfp>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <__sfp+0x74>)
 8003be4:	681e      	ldr	r6, [r3, #0]
 8003be6:	69b3      	ldr	r3, [r6, #24]
 8003be8:	4607      	mov	r7, r0
 8003bea:	b913      	cbnz	r3, 8003bf2 <__sfp+0x12>
 8003bec:	4630      	mov	r0, r6
 8003bee:	f7ff ffc7 	bl	8003b80 <__sinit>
 8003bf2:	3648      	adds	r6, #72	; 0x48
 8003bf4:	68b4      	ldr	r4, [r6, #8]
 8003bf6:	6873      	ldr	r3, [r6, #4]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	d404      	bmi.n	8003c06 <__sfp+0x26>
 8003bfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c00:	b17d      	cbz	r5, 8003c22 <__sfp+0x42>
 8003c02:	3468      	adds	r4, #104	; 0x68
 8003c04:	e7f8      	b.n	8003bf8 <__sfp+0x18>
 8003c06:	6833      	ldr	r3, [r6, #0]
 8003c08:	b10b      	cbz	r3, 8003c0e <__sfp+0x2e>
 8003c0a:	6836      	ldr	r6, [r6, #0]
 8003c0c:	e7f2      	b.n	8003bf4 <__sfp+0x14>
 8003c0e:	2104      	movs	r1, #4
 8003c10:	4638      	mov	r0, r7
 8003c12:	f7ff ff9f 	bl	8003b54 <__sfmoreglue>
 8003c16:	6030      	str	r0, [r6, #0]
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d1f6      	bne.n	8003c0a <__sfp+0x2a>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c26:	81e3      	strh	r3, [r4, #14]
 8003c28:	2301      	movs	r3, #1
 8003c2a:	81a3      	strh	r3, [r4, #12]
 8003c2c:	6665      	str	r5, [r4, #100]	; 0x64
 8003c2e:	6025      	str	r5, [r4, #0]
 8003c30:	60a5      	str	r5, [r4, #8]
 8003c32:	6065      	str	r5, [r4, #4]
 8003c34:	6125      	str	r5, [r4, #16]
 8003c36:	6165      	str	r5, [r4, #20]
 8003c38:	61a5      	str	r5, [r4, #24]
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c42:	f7ff fe4e 	bl	80038e2 <memset>
 8003c46:	6365      	str	r5, [r4, #52]	; 0x34
 8003c48:	63a5      	str	r5, [r4, #56]	; 0x38
 8003c4a:	64a5      	str	r5, [r4, #72]	; 0x48
 8003c4c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003c4e:	4620      	mov	r0, r4
 8003c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c52:	bf00      	nop
 8003c54:	08004c04 	.word	0x08004c04

08003c58 <_fwalk_reent>:
 8003c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c5c:	4680      	mov	r8, r0
 8003c5e:	4689      	mov	r9, r1
 8003c60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c64:	2600      	movs	r6, #0
 8003c66:	b194      	cbz	r4, 8003c8e <_fwalk_reent+0x36>
 8003c68:	68a5      	ldr	r5, [r4, #8]
 8003c6a:	6867      	ldr	r7, [r4, #4]
 8003c6c:	3f01      	subs	r7, #1
 8003c6e:	d40c      	bmi.n	8003c8a <_fwalk_reent+0x32>
 8003c70:	89ab      	ldrh	r3, [r5, #12]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d907      	bls.n	8003c86 <_fwalk_reent+0x2e>
 8003c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	d003      	beq.n	8003c86 <_fwalk_reent+0x2e>
 8003c7e:	4629      	mov	r1, r5
 8003c80:	4640      	mov	r0, r8
 8003c82:	47c8      	blx	r9
 8003c84:	4306      	orrs	r6, r0
 8003c86:	3568      	adds	r5, #104	; 0x68
 8003c88:	e7f0      	b.n	8003c6c <_fwalk_reent+0x14>
 8003c8a:	6824      	ldr	r4, [r4, #0]
 8003c8c:	e7eb      	b.n	8003c66 <_fwalk_reent+0xe>
 8003c8e:	4630      	mov	r0, r6
 8003c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003c94 <__malloc_lock>:
 8003c94:	4770      	bx	lr

08003c96 <__malloc_unlock>:
 8003c96:	4770      	bx	lr

08003c98 <__ssputs_r>:
 8003c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9c:	688e      	ldr	r6, [r1, #8]
 8003c9e:	429e      	cmp	r6, r3
 8003ca0:	4682      	mov	sl, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	4691      	mov	r9, r2
 8003ca6:	4698      	mov	r8, r3
 8003ca8:	d83e      	bhi.n	8003d28 <__ssputs_r+0x90>
 8003caa:	898a      	ldrh	r2, [r1, #12]
 8003cac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cb0:	d03a      	beq.n	8003d28 <__ssputs_r+0x90>
 8003cb2:	6825      	ldr	r5, [r4, #0]
 8003cb4:	6909      	ldr	r1, [r1, #16]
 8003cb6:	1a6f      	subs	r7, r5, r1
 8003cb8:	6965      	ldr	r5, [r4, #20]
 8003cba:	2302      	movs	r3, #2
 8003cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cc4:	1c7b      	adds	r3, r7, #1
 8003cc6:	4443      	add	r3, r8
 8003cc8:	429d      	cmp	r5, r3
 8003cca:	bf38      	it	cc
 8003ccc:	461d      	movcc	r5, r3
 8003cce:	0553      	lsls	r3, r2, #21
 8003cd0:	d50f      	bpl.n	8003cf2 <__ssputs_r+0x5a>
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	f7ff fe5c 	bl	8003990 <_malloc_r>
 8003cd8:	4606      	mov	r6, r0
 8003cda:	b198      	cbz	r0, 8003d04 <__ssputs_r+0x6c>
 8003cdc:	463a      	mov	r2, r7
 8003cde:	6921      	ldr	r1, [r4, #16]
 8003ce0:	f7ff fdf4 	bl	80038cc <memcpy>
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cee:	81a3      	strh	r3, [r4, #12]
 8003cf0:	e013      	b.n	8003d1a <__ssputs_r+0x82>
 8003cf2:	462a      	mov	r2, r5
 8003cf4:	f000 fe67 	bl	80049c6 <_realloc_r>
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	b970      	cbnz	r0, 8003d1a <__ssputs_r+0x82>
 8003cfc:	6921      	ldr	r1, [r4, #16]
 8003cfe:	4650      	mov	r0, sl
 8003d00:	f7ff fdf8 	bl	80038f4 <_free_r>
 8003d04:	230c      	movs	r3, #12
 8003d06:	f8ca 3000 	str.w	r3, [sl]
 8003d0a:	89a3      	ldrh	r3, [r4, #12]
 8003d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d10:	81a3      	strh	r3, [r4, #12]
 8003d12:	f04f 30ff 	mov.w	r0, #4294967295
 8003d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d1a:	6126      	str	r6, [r4, #16]
 8003d1c:	6165      	str	r5, [r4, #20]
 8003d1e:	443e      	add	r6, r7
 8003d20:	1bed      	subs	r5, r5, r7
 8003d22:	6026      	str	r6, [r4, #0]
 8003d24:	60a5      	str	r5, [r4, #8]
 8003d26:	4646      	mov	r6, r8
 8003d28:	4546      	cmp	r6, r8
 8003d2a:	bf28      	it	cs
 8003d2c:	4646      	movcs	r6, r8
 8003d2e:	4632      	mov	r2, r6
 8003d30:	4649      	mov	r1, r9
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	f000 fe2c 	bl	8004990 <memmove>
 8003d38:	68a3      	ldr	r3, [r4, #8]
 8003d3a:	1b9b      	subs	r3, r3, r6
 8003d3c:	60a3      	str	r3, [r4, #8]
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	441e      	add	r6, r3
 8003d42:	6026      	str	r6, [r4, #0]
 8003d44:	2000      	movs	r0, #0
 8003d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08003d4c <_svfiprintf_r>:
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	b09d      	sub	sp, #116	; 0x74
 8003d52:	4680      	mov	r8, r0
 8003d54:	9303      	str	r3, [sp, #12]
 8003d56:	898b      	ldrh	r3, [r1, #12]
 8003d58:	061c      	lsls	r4, r3, #24
 8003d5a:	460d      	mov	r5, r1
 8003d5c:	4616      	mov	r6, r2
 8003d5e:	d50d      	bpl.n	8003d7c <_svfiprintf_r+0x30>
 8003d60:	690b      	ldr	r3, [r1, #16]
 8003d62:	b95b      	cbnz	r3, 8003d7c <_svfiprintf_r+0x30>
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	f7ff fe13 	bl	8003990 <_malloc_r>
 8003d6a:	6028      	str	r0, [r5, #0]
 8003d6c:	6128      	str	r0, [r5, #16]
 8003d6e:	b918      	cbnz	r0, 8003d78 <_svfiprintf_r+0x2c>
 8003d70:	230c      	movs	r3, #12
 8003d72:	f8c8 3000 	str.w	r3, [r8]
 8003d76:	e0cd      	b.n	8003f14 <_svfiprintf_r+0x1c8>
 8003d78:	2340      	movs	r3, #64	; 0x40
 8003d7a:	616b      	str	r3, [r5, #20]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d80:	2320      	movs	r3, #32
 8003d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d86:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8003f24 <_svfiprintf_r+0x1d8>
 8003d8a:	2330      	movs	r3, #48	; 0x30
 8003d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d90:	4637      	mov	r7, r6
 8003d92:	463c      	mov	r4, r7
 8003d94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003d98:	b91b      	cbnz	r3, 8003da2 <_svfiprintf_r+0x56>
 8003d9a:	ebb7 0906 	subs.w	r9, r7, r6
 8003d9e:	d010      	beq.n	8003dc2 <_svfiprintf_r+0x76>
 8003da0:	e003      	b.n	8003daa <_svfiprintf_r+0x5e>
 8003da2:	2b25      	cmp	r3, #37	; 0x25
 8003da4:	d0f9      	beq.n	8003d9a <_svfiprintf_r+0x4e>
 8003da6:	4627      	mov	r7, r4
 8003da8:	e7f3      	b.n	8003d92 <_svfiprintf_r+0x46>
 8003daa:	464b      	mov	r3, r9
 8003dac:	4632      	mov	r2, r6
 8003dae:	4629      	mov	r1, r5
 8003db0:	4640      	mov	r0, r8
 8003db2:	f7ff ff71 	bl	8003c98 <__ssputs_r>
 8003db6:	3001      	adds	r0, #1
 8003db8:	f000 80a7 	beq.w	8003f0a <_svfiprintf_r+0x1be>
 8003dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dbe:	444b      	add	r3, r9
 8003dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc2:	783b      	ldrb	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a0 	beq.w	8003f0a <_svfiprintf_r+0x1be>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	9304      	str	r3, [sp, #16]
 8003dd2:	9307      	str	r3, [sp, #28]
 8003dd4:	9205      	str	r2, [sp, #20]
 8003dd6:	9306      	str	r3, [sp, #24]
 8003dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8003dde:	2601      	movs	r6, #1
 8003de0:	2205      	movs	r2, #5
 8003de2:	7821      	ldrb	r1, [r4, #0]
 8003de4:	484e      	ldr	r0, [pc, #312]	; (8003f20 <_svfiprintf_r+0x1d4>)
 8003de6:	f7fc fa03 	bl	80001f0 <memchr>
 8003dea:	1c67      	adds	r7, r4, #1
 8003dec:	9b04      	ldr	r3, [sp, #16]
 8003dee:	b138      	cbz	r0, 8003e00 <_svfiprintf_r+0xb4>
 8003df0:	4a4b      	ldr	r2, [pc, #300]	; (8003f20 <_svfiprintf_r+0x1d4>)
 8003df2:	1a80      	subs	r0, r0, r2
 8003df4:	fa06 f000 	lsl.w	r0, r6, r0
 8003df8:	4318      	orrs	r0, r3
 8003dfa:	9004      	str	r0, [sp, #16]
 8003dfc:	463c      	mov	r4, r7
 8003dfe:	e7ef      	b.n	8003de0 <_svfiprintf_r+0x94>
 8003e00:	06d9      	lsls	r1, r3, #27
 8003e02:	bf44      	itt	mi
 8003e04:	2220      	movmi	r2, #32
 8003e06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e0a:	071a      	lsls	r2, r3, #28
 8003e0c:	bf44      	itt	mi
 8003e0e:	222b      	movmi	r2, #43	; 0x2b
 8003e10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e14:	7822      	ldrb	r2, [r4, #0]
 8003e16:	2a2a      	cmp	r2, #42	; 0x2a
 8003e18:	d003      	beq.n	8003e22 <_svfiprintf_r+0xd6>
 8003e1a:	9a07      	ldr	r2, [sp, #28]
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	200a      	movs	r0, #10
 8003e20:	e00b      	b.n	8003e3a <_svfiprintf_r+0xee>
 8003e22:	9a03      	ldr	r2, [sp, #12]
 8003e24:	1d11      	adds	r1, r2, #4
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	9103      	str	r1, [sp, #12]
 8003e2a:	2a00      	cmp	r2, #0
 8003e2c:	da10      	bge.n	8003e50 <_svfiprintf_r+0x104>
 8003e2e:	4252      	negs	r2, r2
 8003e30:	f043 0002 	orr.w	r0, r3, #2
 8003e34:	9207      	str	r2, [sp, #28]
 8003e36:	9004      	str	r0, [sp, #16]
 8003e38:	e00b      	b.n	8003e52 <_svfiprintf_r+0x106>
 8003e3a:	4627      	mov	r7, r4
 8003e3c:	3401      	adds	r4, #1
 8003e3e:	783b      	ldrb	r3, [r7, #0]
 8003e40:	3b30      	subs	r3, #48	; 0x30
 8003e42:	2b09      	cmp	r3, #9
 8003e44:	d803      	bhi.n	8003e4e <_svfiprintf_r+0x102>
 8003e46:	fb00 3202 	mla	r2, r0, r2, r3
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	e7f5      	b.n	8003e3a <_svfiprintf_r+0xee>
 8003e4e:	b101      	cbz	r1, 8003e52 <_svfiprintf_r+0x106>
 8003e50:	9207      	str	r2, [sp, #28]
 8003e52:	783b      	ldrb	r3, [r7, #0]
 8003e54:	2b2e      	cmp	r3, #46	; 0x2e
 8003e56:	d11e      	bne.n	8003e96 <_svfiprintf_r+0x14a>
 8003e58:	787b      	ldrb	r3, [r7, #1]
 8003e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e5c:	d10a      	bne.n	8003e74 <_svfiprintf_r+0x128>
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	1d1a      	adds	r2, r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	9203      	str	r2, [sp, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfb8      	it	lt
 8003e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e6e:	3702      	adds	r7, #2
 8003e70:	9305      	str	r3, [sp, #20]
 8003e72:	e010      	b.n	8003e96 <_svfiprintf_r+0x14a>
 8003e74:	2300      	movs	r3, #0
 8003e76:	9305      	str	r3, [sp, #20]
 8003e78:	1c78      	adds	r0, r7, #1
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	240a      	movs	r4, #10
 8003e7e:	4607      	mov	r7, r0
 8003e80:	3001      	adds	r0, #1
 8003e82:	783a      	ldrb	r2, [r7, #0]
 8003e84:	3a30      	subs	r2, #48	; 0x30
 8003e86:	2a09      	cmp	r2, #9
 8003e88:	d803      	bhi.n	8003e92 <_svfiprintf_r+0x146>
 8003e8a:	fb04 2101 	mla	r1, r4, r1, r2
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e7f5      	b.n	8003e7e <_svfiprintf_r+0x132>
 8003e92:	b103      	cbz	r3, 8003e96 <_svfiprintf_r+0x14a>
 8003e94:	9105      	str	r1, [sp, #20]
 8003e96:	2203      	movs	r2, #3
 8003e98:	7839      	ldrb	r1, [r7, #0]
 8003e9a:	4822      	ldr	r0, [pc, #136]	; (8003f24 <_svfiprintf_r+0x1d8>)
 8003e9c:	f7fc f9a8 	bl	80001f0 <memchr>
 8003ea0:	b140      	cbz	r0, 8003eb4 <_svfiprintf_r+0x168>
 8003ea2:	2340      	movs	r3, #64	; 0x40
 8003ea4:	ebcb 0000 	rsb	r0, fp, r0
 8003ea8:	fa03 f000 	lsl.w	r0, r3, r0
 8003eac:	9b04      	ldr	r3, [sp, #16]
 8003eae:	4318      	orrs	r0, r3
 8003eb0:	9004      	str	r0, [sp, #16]
 8003eb2:	3701      	adds	r7, #1
 8003eb4:	7839      	ldrb	r1, [r7, #0]
 8003eb6:	481c      	ldr	r0, [pc, #112]	; (8003f28 <_svfiprintf_r+0x1dc>)
 8003eb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ebc:	2206      	movs	r2, #6
 8003ebe:	1c7e      	adds	r6, r7, #1
 8003ec0:	f7fc f996 	bl	80001f0 <memchr>
 8003ec4:	b188      	cbz	r0, 8003eea <_svfiprintf_r+0x19e>
 8003ec6:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <_svfiprintf_r+0x1e0>)
 8003ec8:	b933      	cbnz	r3, 8003ed8 <_svfiprintf_r+0x18c>
 8003eca:	9b03      	ldr	r3, [sp, #12]
 8003ecc:	3307      	adds	r3, #7
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	9303      	str	r3, [sp, #12]
 8003ed6:	e014      	b.n	8003f02 <_svfiprintf_r+0x1b6>
 8003ed8:	ab03      	add	r3, sp, #12
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	462a      	mov	r2, r5
 8003ede:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <_svfiprintf_r+0x1e4>)
 8003ee0:	a904      	add	r1, sp, #16
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	f3af 8000 	nop.w
 8003ee8:	e007      	b.n	8003efa <_svfiprintf_r+0x1ae>
 8003eea:	ab03      	add	r3, sp, #12
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	462a      	mov	r2, r5
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <_svfiprintf_r+0x1e4>)
 8003ef2:	a904      	add	r1, sp, #16
 8003ef4:	4640      	mov	r0, r8
 8003ef6:	f000 f9d9 	bl	80042ac <_printf_i>
 8003efa:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003efe:	4682      	mov	sl, r0
 8003f00:	d003      	beq.n	8003f0a <_svfiprintf_r+0x1be>
 8003f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f04:	4453      	add	r3, sl
 8003f06:	9309      	str	r3, [sp, #36]	; 0x24
 8003f08:	e742      	b.n	8003d90 <_svfiprintf_r+0x44>
 8003f0a:	89ab      	ldrh	r3, [r5, #12]
 8003f0c:	065b      	lsls	r3, r3, #25
 8003f0e:	d401      	bmi.n	8003f14 <_svfiprintf_r+0x1c8>
 8003f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f12:	e001      	b.n	8003f18 <_svfiprintf_r+0x1cc>
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	b01d      	add	sp, #116	; 0x74
 8003f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	08004c08 	.word	0x08004c08
 8003f24:	08004c0e 	.word	0x08004c0e
 8003f28:	08004c12 	.word	0x08004c12
 8003f2c:	00000000 	.word	0x00000000
 8003f30:	08003c99 	.word	0x08003c99

08003f34 <__sfputc_r>:
 8003f34:	6893      	ldr	r3, [r2, #8]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	b410      	push	{r4}
 8003f3c:	6093      	str	r3, [r2, #8]
 8003f3e:	da09      	bge.n	8003f54 <__sfputc_r+0x20>
 8003f40:	6994      	ldr	r4, [r2, #24]
 8003f42:	42a3      	cmp	r3, r4
 8003f44:	db02      	blt.n	8003f4c <__sfputc_r+0x18>
 8003f46:	b2cb      	uxtb	r3, r1
 8003f48:	2b0a      	cmp	r3, #10
 8003f4a:	d103      	bne.n	8003f54 <__sfputc_r+0x20>
 8003f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f50:	f000 bb16 	b.w	8004580 <__swbuf_r>
 8003f54:	6813      	ldr	r3, [r2, #0]
 8003f56:	1c58      	adds	r0, r3, #1
 8003f58:	6010      	str	r0, [r2, #0]
 8003f5a:	7019      	strb	r1, [r3, #0]
 8003f5c:	b2c8      	uxtb	r0, r1
 8003f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <__sfputs_r>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	4606      	mov	r6, r0
 8003f68:	460f      	mov	r7, r1
 8003f6a:	4614      	mov	r4, r2
 8003f6c:	18d5      	adds	r5, r2, r3
 8003f6e:	42ac      	cmp	r4, r5
 8003f70:	d008      	beq.n	8003f84 <__sfputs_r+0x20>
 8003f72:	463a      	mov	r2, r7
 8003f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f7ff ffdb 	bl	8003f34 <__sfputc_r>
 8003f7e:	1c43      	adds	r3, r0, #1
 8003f80:	d1f5      	bne.n	8003f6e <__sfputs_r+0xa>
 8003f82:	e000      	b.n	8003f86 <__sfputs_r+0x22>
 8003f84:	2000      	movs	r0, #0
 8003f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f88 <_vfiprintf_r>:
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	b09d      	sub	sp, #116	; 0x74
 8003f8e:	460c      	mov	r4, r1
 8003f90:	4617      	mov	r7, r2
 8003f92:	9303      	str	r3, [sp, #12]
 8003f94:	4606      	mov	r6, r0
 8003f96:	b118      	cbz	r0, 8003fa0 <_vfiprintf_r+0x18>
 8003f98:	6983      	ldr	r3, [r0, #24]
 8003f9a:	b90b      	cbnz	r3, 8003fa0 <_vfiprintf_r+0x18>
 8003f9c:	f7ff fdf0 	bl	8003b80 <__sinit>
 8003fa0:	4b7f      	ldr	r3, [pc, #508]	; (80041a0 <_vfiprintf_r+0x218>)
 8003fa2:	429c      	cmp	r4, r3
 8003fa4:	d101      	bne.n	8003faa <_vfiprintf_r+0x22>
 8003fa6:	6874      	ldr	r4, [r6, #4]
 8003fa8:	e008      	b.n	8003fbc <_vfiprintf_r+0x34>
 8003faa:	4b7e      	ldr	r3, [pc, #504]	; (80041a4 <_vfiprintf_r+0x21c>)
 8003fac:	429c      	cmp	r4, r3
 8003fae:	d101      	bne.n	8003fb4 <_vfiprintf_r+0x2c>
 8003fb0:	68b4      	ldr	r4, [r6, #8]
 8003fb2:	e003      	b.n	8003fbc <_vfiprintf_r+0x34>
 8003fb4:	4b7c      	ldr	r3, [pc, #496]	; (80041a8 <_vfiprintf_r+0x220>)
 8003fb6:	429c      	cmp	r4, r3
 8003fb8:	bf08      	it	eq
 8003fba:	68f4      	ldreq	r4, [r6, #12]
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	0718      	lsls	r0, r3, #28
 8003fc0:	d50c      	bpl.n	8003fdc <_vfiprintf_r+0x54>
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	b153      	cbz	r3, 8003fdc <_vfiprintf_r+0x54>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fca:	2320      	movs	r3, #32
 8003fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fd0:	2330      	movs	r3, #48	; 0x30
 8003fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fd6:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 80041ac <_vfiprintf_r+0x224>
 8003fda:	e044      	b.n	8004066 <_vfiprintf_r+0xde>
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f000 fb34 	bl	800464c <__swsetup_r>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d0ee      	beq.n	8003fc6 <_vfiprintf_r+0x3e>
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	e0d5      	b.n	800419a <_vfiprintf_r+0x212>
 8003fee:	9a03      	ldr	r2, [sp, #12]
 8003ff0:	1d11      	adds	r1, r2, #4
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	9103      	str	r1, [sp, #12]
 8003ff6:	2a00      	cmp	r2, #0
 8003ff8:	f280 808c 	bge.w	8004114 <_vfiprintf_r+0x18c>
 8003ffc:	4252      	negs	r2, r2
 8003ffe:	f043 0002 	orr.w	r0, r3, #2
 8004002:	9207      	str	r2, [sp, #28]
 8004004:	9004      	str	r0, [sp, #16]
 8004006:	f898 3000 	ldrb.w	r3, [r8]
 800400a:	2b2e      	cmp	r3, #46	; 0x2e
 800400c:	f000 8084 	beq.w	8004118 <_vfiprintf_r+0x190>
 8004010:	2203      	movs	r2, #3
 8004012:	f898 1000 	ldrb.w	r1, [r8]
 8004016:	4865      	ldr	r0, [pc, #404]	; (80041ac <_vfiprintf_r+0x224>)
 8004018:	f7fc f8ea 	bl	80001f0 <memchr>
 800401c:	b148      	cbz	r0, 8004032 <_vfiprintf_r+0xaa>
 800401e:	2340      	movs	r3, #64	; 0x40
 8004020:	ebcb 0000 	rsb	r0, fp, r0
 8004024:	fa03 f000 	lsl.w	r0, r3, r0
 8004028:	9b04      	ldr	r3, [sp, #16]
 800402a:	4318      	orrs	r0, r3
 800402c:	9004      	str	r0, [sp, #16]
 800402e:	f108 0801 	add.w	r8, r8, #1
 8004032:	f898 1000 	ldrb.w	r1, [r8]
 8004036:	485e      	ldr	r0, [pc, #376]	; (80041b0 <_vfiprintf_r+0x228>)
 8004038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800403c:	2206      	movs	r2, #6
 800403e:	f108 0701 	add.w	r7, r8, #1
 8004042:	f7fc f8d5 	bl	80001f0 <memchr>
 8004046:	2800      	cmp	r0, #0
 8004048:	f000 8095 	beq.w	8004176 <_vfiprintf_r+0x1ee>
 800404c:	4b59      	ldr	r3, [pc, #356]	; (80041b4 <_vfiprintf_r+0x22c>)
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 8088 	bne.w	8004164 <_vfiprintf_r+0x1dc>
 8004054:	9b03      	ldr	r3, [sp, #12]
 8004056:	3307      	adds	r3, #7
 8004058:	f023 0307 	bic.w	r3, r3, #7
 800405c:	3308      	adds	r3, #8
 800405e:	9303      	str	r3, [sp, #12]
 8004060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004062:	4453      	add	r3, sl
 8004064:	9309      	str	r3, [sp, #36]	; 0x24
 8004066:	46b8      	mov	r8, r7
 8004068:	4645      	mov	r5, r8
 800406a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800406e:	b91b      	cbnz	r3, 8004078 <_vfiprintf_r+0xf0>
 8004070:	ebb8 0907 	subs.w	r9, r8, r7
 8004074:	d00f      	beq.n	8004096 <_vfiprintf_r+0x10e>
 8004076:	e003      	b.n	8004080 <_vfiprintf_r+0xf8>
 8004078:	2b25      	cmp	r3, #37	; 0x25
 800407a:	d0f9      	beq.n	8004070 <_vfiprintf_r+0xe8>
 800407c:	46a8      	mov	r8, r5
 800407e:	e7f3      	b.n	8004068 <_vfiprintf_r+0xe0>
 8004080:	464b      	mov	r3, r9
 8004082:	463a      	mov	r2, r7
 8004084:	4621      	mov	r1, r4
 8004086:	4630      	mov	r0, r6
 8004088:	f7ff ff6c 	bl	8003f64 <__sfputs_r>
 800408c:	3001      	adds	r0, #1
 800408e:	d07f      	beq.n	8004190 <_vfiprintf_r+0x208>
 8004090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004092:	444b      	add	r3, r9
 8004094:	9309      	str	r3, [sp, #36]	; 0x24
 8004096:	f898 3000 	ldrb.w	r3, [r8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d078      	beq.n	8004190 <_vfiprintf_r+0x208>
 800409e:	2300      	movs	r3, #0
 80040a0:	f04f 32ff 	mov.w	r2, #4294967295
 80040a4:	9304      	str	r3, [sp, #16]
 80040a6:	9307      	str	r3, [sp, #28]
 80040a8:	9205      	str	r2, [sp, #20]
 80040aa:	9306      	str	r3, [sp, #24]
 80040ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040b0:	931a      	str	r3, [sp, #104]	; 0x68
 80040b2:	2701      	movs	r7, #1
 80040b4:	2205      	movs	r2, #5
 80040b6:	7829      	ldrb	r1, [r5, #0]
 80040b8:	483f      	ldr	r0, [pc, #252]	; (80041b8 <_vfiprintf_r+0x230>)
 80040ba:	f7fc f899 	bl	80001f0 <memchr>
 80040be:	f105 0801 	add.w	r8, r5, #1
 80040c2:	9b04      	ldr	r3, [sp, #16]
 80040c4:	b138      	cbz	r0, 80040d6 <_vfiprintf_r+0x14e>
 80040c6:	4a3c      	ldr	r2, [pc, #240]	; (80041b8 <_vfiprintf_r+0x230>)
 80040c8:	1a80      	subs	r0, r0, r2
 80040ca:	fa07 f000 	lsl.w	r0, r7, r0
 80040ce:	4318      	orrs	r0, r3
 80040d0:	9004      	str	r0, [sp, #16]
 80040d2:	4645      	mov	r5, r8
 80040d4:	e7ee      	b.n	80040b4 <_vfiprintf_r+0x12c>
 80040d6:	06d9      	lsls	r1, r3, #27
 80040d8:	bf44      	itt	mi
 80040da:	2220      	movmi	r2, #32
 80040dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040e0:	071a      	lsls	r2, r3, #28
 80040e2:	bf44      	itt	mi
 80040e4:	222b      	movmi	r2, #43	; 0x2b
 80040e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040ea:	782a      	ldrb	r2, [r5, #0]
 80040ec:	2a2a      	cmp	r2, #42	; 0x2a
 80040ee:	f43f af7e 	beq.w	8003fee <_vfiprintf_r+0x66>
 80040f2:	9a07      	ldr	r2, [sp, #28]
 80040f4:	2100      	movs	r1, #0
 80040f6:	200a      	movs	r0, #10
 80040f8:	46a8      	mov	r8, r5
 80040fa:	3501      	adds	r5, #1
 80040fc:	f898 3000 	ldrb.w	r3, [r8]
 8004100:	3b30      	subs	r3, #48	; 0x30
 8004102:	2b09      	cmp	r3, #9
 8004104:	d803      	bhi.n	800410e <_vfiprintf_r+0x186>
 8004106:	fb00 3202 	mla	r2, r0, r2, r3
 800410a:	2101      	movs	r1, #1
 800410c:	e7f4      	b.n	80040f8 <_vfiprintf_r+0x170>
 800410e:	2900      	cmp	r1, #0
 8004110:	f43f af79 	beq.w	8004006 <_vfiprintf_r+0x7e>
 8004114:	9207      	str	r2, [sp, #28]
 8004116:	e776      	b.n	8004006 <_vfiprintf_r+0x7e>
 8004118:	f898 3001 	ldrb.w	r3, [r8, #1]
 800411c:	2b2a      	cmp	r3, #42	; 0x2a
 800411e:	d10b      	bne.n	8004138 <_vfiprintf_r+0x1b0>
 8004120:	9b03      	ldr	r3, [sp, #12]
 8004122:	1d1a      	adds	r2, r3, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	9203      	str	r2, [sp, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	bfb8      	it	lt
 800412c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004130:	f108 0802 	add.w	r8, r8, #2
 8004134:	9305      	str	r3, [sp, #20]
 8004136:	e76b      	b.n	8004010 <_vfiprintf_r+0x88>
 8004138:	2300      	movs	r3, #0
 800413a:	9305      	str	r3, [sp, #20]
 800413c:	f108 0001 	add.w	r0, r8, #1
 8004140:	4619      	mov	r1, r3
 8004142:	250a      	movs	r5, #10
 8004144:	4680      	mov	r8, r0
 8004146:	3001      	adds	r0, #1
 8004148:	f898 2000 	ldrb.w	r2, [r8]
 800414c:	3a30      	subs	r2, #48	; 0x30
 800414e:	2a09      	cmp	r2, #9
 8004150:	d803      	bhi.n	800415a <_vfiprintf_r+0x1d2>
 8004152:	fb05 2101 	mla	r1, r5, r1, r2
 8004156:	2301      	movs	r3, #1
 8004158:	e7f4      	b.n	8004144 <_vfiprintf_r+0x1bc>
 800415a:	2b00      	cmp	r3, #0
 800415c:	f43f af58 	beq.w	8004010 <_vfiprintf_r+0x88>
 8004160:	9105      	str	r1, [sp, #20]
 8004162:	e755      	b.n	8004010 <_vfiprintf_r+0x88>
 8004164:	ab03      	add	r3, sp, #12
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	4622      	mov	r2, r4
 800416a:	4b14      	ldr	r3, [pc, #80]	; (80041bc <_vfiprintf_r+0x234>)
 800416c:	a904      	add	r1, sp, #16
 800416e:	4630      	mov	r0, r6
 8004170:	f3af 8000 	nop.w
 8004174:	e007      	b.n	8004186 <_vfiprintf_r+0x1fe>
 8004176:	ab03      	add	r3, sp, #12
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	4622      	mov	r2, r4
 800417c:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <_vfiprintf_r+0x234>)
 800417e:	a904      	add	r1, sp, #16
 8004180:	4630      	mov	r0, r6
 8004182:	f000 f893 	bl	80042ac <_printf_i>
 8004186:	f1b0 3fff 	cmp.w	r0, #4294967295
 800418a:	4682      	mov	sl, r0
 800418c:	f47f af68 	bne.w	8004060 <_vfiprintf_r+0xd8>
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	065b      	lsls	r3, r3, #25
 8004194:	f53f af28 	bmi.w	8003fe8 <_vfiprintf_r+0x60>
 8004198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800419a:	b01d      	add	sp, #116	; 0x74
 800419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a0:	08004ba0 	.word	0x08004ba0
 80041a4:	08004bc0 	.word	0x08004bc0
 80041a8:	08004be0 	.word	0x08004be0
 80041ac:	08004c0e 	.word	0x08004c0e
 80041b0:	08004c12 	.word	0x08004c12
 80041b4:	00000000 	.word	0x00000000
 80041b8:	08004c08 	.word	0x08004c08
 80041bc:	08003f65 	.word	0x08003f65

080041c0 <_printf_common>:
 80041c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	4691      	mov	r9, r2
 80041c6:	461f      	mov	r7, r3
 80041c8:	690a      	ldr	r2, [r1, #16]
 80041ca:	688b      	ldr	r3, [r1, #8]
 80041cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	bfb8      	it	lt
 80041d4:	4613      	movlt	r3, r2
 80041d6:	f8c9 3000 	str.w	r3, [r9]
 80041da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041de:	4606      	mov	r6, r0
 80041e0:	460c      	mov	r4, r1
 80041e2:	b112      	cbz	r2, 80041ea <_printf_common+0x2a>
 80041e4:	3301      	adds	r3, #1
 80041e6:	f8c9 3000 	str.w	r3, [r9]
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	0699      	lsls	r1, r3, #26
 80041ee:	bf42      	ittt	mi
 80041f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80041f4:	3302      	addmi	r3, #2
 80041f6:	f8c9 3000 	strmi.w	r3, [r9]
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	f015 0506 	ands.w	r5, r5, #6
 8004200:	d110      	bne.n	8004224 <_printf_common+0x64>
 8004202:	f104 0a19 	add.w	sl, r4, #25
 8004206:	e007      	b.n	8004218 <_printf_common+0x58>
 8004208:	2301      	movs	r3, #1
 800420a:	4652      	mov	r2, sl
 800420c:	4639      	mov	r1, r7
 800420e:	4630      	mov	r0, r6
 8004210:	47c0      	blx	r8
 8004212:	3001      	adds	r0, #1
 8004214:	d01a      	beq.n	800424c <_printf_common+0x8c>
 8004216:	3501      	adds	r5, #1
 8004218:	68e3      	ldr	r3, [r4, #12]
 800421a:	f8d9 2000 	ldr.w	r2, [r9]
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	429d      	cmp	r5, r3
 8004222:	dbf1      	blt.n	8004208 <_printf_common+0x48>
 8004224:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004228:	6822      	ldr	r2, [r4, #0]
 800422a:	3300      	adds	r3, #0
 800422c:	bf18      	it	ne
 800422e:	2301      	movne	r3, #1
 8004230:	0692      	lsls	r2, r2, #26
 8004232:	d50f      	bpl.n	8004254 <_printf_common+0x94>
 8004234:	18e1      	adds	r1, r4, r3
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	2030      	movs	r0, #48	; 0x30
 800423a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800423e:	4422      	add	r2, r4
 8004240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004248:	3302      	adds	r3, #2
 800424a:	e003      	b.n	8004254 <_printf_common+0x94>
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004258:	4639      	mov	r1, r7
 800425a:	4630      	mov	r0, r6
 800425c:	47c0      	blx	r8
 800425e:	3001      	adds	r0, #1
 8004260:	d0f4      	beq.n	800424c <_printf_common+0x8c>
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	f8d9 5000 	ldr.w	r5, [r9]
 8004268:	68e3      	ldr	r3, [r4, #12]
 800426a:	f002 0206 	and.w	r2, r2, #6
 800426e:	2a04      	cmp	r2, #4
 8004270:	bf08      	it	eq
 8004272:	1b5d      	subeq	r5, r3, r5
 8004274:	6922      	ldr	r2, [r4, #16]
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	bf0c      	ite	eq
 800427a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800427e:	2500      	movne	r5, #0
 8004280:	4293      	cmp	r3, r2
 8004282:	bfc4      	itt	gt
 8004284:	1a9b      	subgt	r3, r3, r2
 8004286:	18ed      	addgt	r5, r5, r3
 8004288:	f04f 0900 	mov.w	r9, #0
 800428c:	341a      	adds	r4, #26
 800428e:	454d      	cmp	r5, r9
 8004290:	d009      	beq.n	80042a6 <_printf_common+0xe6>
 8004292:	2301      	movs	r3, #1
 8004294:	4622      	mov	r2, r4
 8004296:	4639      	mov	r1, r7
 8004298:	4630      	mov	r0, r6
 800429a:	47c0      	blx	r8
 800429c:	3001      	adds	r0, #1
 800429e:	d0d5      	beq.n	800424c <_printf_common+0x8c>
 80042a0:	f109 0901 	add.w	r9, r9, #1
 80042a4:	e7f3      	b.n	800428e <_printf_common+0xce>
 80042a6:	2000      	movs	r0, #0
 80042a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080042ac <_printf_i>:
 80042ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042b0:	4617      	mov	r7, r2
 80042b2:	7e0a      	ldrb	r2, [r1, #24]
 80042b4:	b085      	sub	sp, #20
 80042b6:	2a6e      	cmp	r2, #110	; 0x6e
 80042b8:	4698      	mov	r8, r3
 80042ba:	4606      	mov	r6, r0
 80042bc:	460c      	mov	r4, r1
 80042be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042c0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80042c4:	f000 80ae 	beq.w	8004424 <_printf_i+0x178>
 80042c8:	d811      	bhi.n	80042ee <_printf_i+0x42>
 80042ca:	2a63      	cmp	r2, #99	; 0x63
 80042cc:	d022      	beq.n	8004314 <_printf_i+0x68>
 80042ce:	d809      	bhi.n	80042e4 <_printf_i+0x38>
 80042d0:	2a00      	cmp	r2, #0
 80042d2:	f000 80bb 	beq.w	800444c <_printf_i+0x1a0>
 80042d6:	2a58      	cmp	r2, #88	; 0x58
 80042d8:	f040 80ca 	bne.w	8004470 <_printf_i+0x1c4>
 80042dc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80042e0:	4983      	ldr	r1, [pc, #524]	; (80044f0 <_printf_i+0x244>)
 80042e2:	e055      	b.n	8004390 <_printf_i+0xe4>
 80042e4:	2a64      	cmp	r2, #100	; 0x64
 80042e6:	d01e      	beq.n	8004326 <_printf_i+0x7a>
 80042e8:	2a69      	cmp	r2, #105	; 0x69
 80042ea:	d01c      	beq.n	8004326 <_printf_i+0x7a>
 80042ec:	e0c0      	b.n	8004470 <_printf_i+0x1c4>
 80042ee:	2a73      	cmp	r2, #115	; 0x73
 80042f0:	f000 80b0 	beq.w	8004454 <_printf_i+0x1a8>
 80042f4:	d809      	bhi.n	800430a <_printf_i+0x5e>
 80042f6:	2a6f      	cmp	r2, #111	; 0x6f
 80042f8:	d02e      	beq.n	8004358 <_printf_i+0xac>
 80042fa:	2a70      	cmp	r2, #112	; 0x70
 80042fc:	f040 80b8 	bne.w	8004470 <_printf_i+0x1c4>
 8004300:	680a      	ldr	r2, [r1, #0]
 8004302:	f042 0220 	orr.w	r2, r2, #32
 8004306:	600a      	str	r2, [r1, #0]
 8004308:	e03e      	b.n	8004388 <_printf_i+0xdc>
 800430a:	2a75      	cmp	r2, #117	; 0x75
 800430c:	d024      	beq.n	8004358 <_printf_i+0xac>
 800430e:	2a78      	cmp	r2, #120	; 0x78
 8004310:	d03a      	beq.n	8004388 <_printf_i+0xdc>
 8004312:	e0ad      	b.n	8004470 <_printf_i+0x1c4>
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800431a:	1d11      	adds	r1, r2, #4
 800431c:	6019      	str	r1, [r3, #0]
 800431e:	6813      	ldr	r3, [r2, #0]
 8004320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004324:	e0a8      	b.n	8004478 <_printf_i+0x1cc>
 8004326:	6821      	ldr	r1, [r4, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800432e:	d002      	beq.n	8004336 <_printf_i+0x8a>
 8004330:	1d11      	adds	r1, r2, #4
 8004332:	6019      	str	r1, [r3, #0]
 8004334:	e008      	b.n	8004348 <_printf_i+0x9c>
 8004336:	f011 0f40 	tst.w	r1, #64	; 0x40
 800433a:	f102 0104 	add.w	r1, r2, #4
 800433e:	6019      	str	r1, [r3, #0]
 8004340:	d002      	beq.n	8004348 <_printf_i+0x9c>
 8004342:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004346:	e000      	b.n	800434a <_printf_i+0x9e>
 8004348:	6813      	ldr	r3, [r2, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	da3c      	bge.n	80043c8 <_printf_i+0x11c>
 800434e:	222d      	movs	r2, #45	; 0x2d
 8004350:	425b      	negs	r3, r3
 8004352:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004356:	e037      	b.n	80043c8 <_printf_i+0x11c>
 8004358:	6821      	ldr	r1, [r4, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004360:	d002      	beq.n	8004368 <_printf_i+0xbc>
 8004362:	1d11      	adds	r1, r2, #4
 8004364:	6019      	str	r1, [r3, #0]
 8004366:	e007      	b.n	8004378 <_printf_i+0xcc>
 8004368:	f011 0f40 	tst.w	r1, #64	; 0x40
 800436c:	f102 0104 	add.w	r1, r2, #4
 8004370:	6019      	str	r1, [r3, #0]
 8004372:	d001      	beq.n	8004378 <_printf_i+0xcc>
 8004374:	8813      	ldrh	r3, [r2, #0]
 8004376:	e000      	b.n	800437a <_printf_i+0xce>
 8004378:	6813      	ldr	r3, [r2, #0]
 800437a:	7e22      	ldrb	r2, [r4, #24]
 800437c:	495c      	ldr	r1, [pc, #368]	; (80044f0 <_printf_i+0x244>)
 800437e:	2a6f      	cmp	r2, #111	; 0x6f
 8004380:	bf14      	ite	ne
 8004382:	220a      	movne	r2, #10
 8004384:	2208      	moveq	r2, #8
 8004386:	e01b      	b.n	80043c0 <_printf_i+0x114>
 8004388:	2278      	movs	r2, #120	; 0x78
 800438a:	495a      	ldr	r1, [pc, #360]	; (80044f4 <_printf_i+0x248>)
 800438c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004398:	f100 0504 	add.w	r5, r0, #4
 800439c:	601d      	str	r5, [r3, #0]
 800439e:	d103      	bne.n	80043a8 <_printf_i+0xfc>
 80043a0:	0655      	lsls	r5, r2, #25
 80043a2:	d501      	bpl.n	80043a8 <_printf_i+0xfc>
 80043a4:	8803      	ldrh	r3, [r0, #0]
 80043a6:	e000      	b.n	80043aa <_printf_i+0xfe>
 80043a8:	6803      	ldr	r3, [r0, #0]
 80043aa:	07d0      	lsls	r0, r2, #31
 80043ac:	bf44      	itt	mi
 80043ae:	f042 0220 	orrmi.w	r2, r2, #32
 80043b2:	6022      	strmi	r2, [r4, #0]
 80043b4:	b91b      	cbnz	r3, 80043be <_printf_i+0x112>
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	f022 0220 	bic.w	r2, r2, #32
 80043bc:	6022      	str	r2, [r4, #0]
 80043be:	2210      	movs	r2, #16
 80043c0:	2000      	movs	r0, #0
 80043c2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80043c6:	e001      	b.n	80043cc <_printf_i+0x120>
 80043c8:	4949      	ldr	r1, [pc, #292]	; (80044f0 <_printf_i+0x244>)
 80043ca:	220a      	movs	r2, #10
 80043cc:	6865      	ldr	r5, [r4, #4]
 80043ce:	60a5      	str	r5, [r4, #8]
 80043d0:	2d00      	cmp	r5, #0
 80043d2:	db08      	blt.n	80043e6 <_printf_i+0x13a>
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	f020 0004 	bic.w	r0, r0, #4
 80043da:	6020      	str	r0, [r4, #0]
 80043dc:	b92b      	cbnz	r3, 80043ea <_printf_i+0x13e>
 80043de:	2d00      	cmp	r5, #0
 80043e0:	d17d      	bne.n	80044de <_printf_i+0x232>
 80043e2:	4675      	mov	r5, lr
 80043e4:	e00c      	b.n	8004400 <_printf_i+0x154>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d079      	beq.n	80044de <_printf_i+0x232>
 80043ea:	4675      	mov	r5, lr
 80043ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80043f0:	fb02 3310 	mls	r3, r2, r0, r3
 80043f4:	5ccb      	ldrb	r3, [r1, r3]
 80043f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043fa:	4603      	mov	r3, r0
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d1f5      	bne.n	80043ec <_printf_i+0x140>
 8004400:	2a08      	cmp	r2, #8
 8004402:	d10b      	bne.n	800441c <_printf_i+0x170>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	07da      	lsls	r2, r3, #31
 8004408:	d508      	bpl.n	800441c <_printf_i+0x170>
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	6862      	ldr	r2, [r4, #4]
 800440e:	429a      	cmp	r2, r3
 8004410:	bfde      	ittt	le
 8004412:	2330      	movle	r3, #48	; 0x30
 8004414:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004418:	f105 35ff 	addle.w	r5, r5, #4294967295
 800441c:	ebc5 030e 	rsb	r3, r5, lr
 8004420:	6123      	str	r3, [r4, #16]
 8004422:	e02e      	b.n	8004482 <_printf_i+0x1d6>
 8004424:	6808      	ldr	r0, [r1, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	6949      	ldr	r1, [r1, #20]
 800442a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800442e:	d003      	beq.n	8004438 <_printf_i+0x18c>
 8004430:	1d10      	adds	r0, r2, #4
 8004432:	6018      	str	r0, [r3, #0]
 8004434:	6813      	ldr	r3, [r2, #0]
 8004436:	e008      	b.n	800444a <_printf_i+0x19e>
 8004438:	f010 0f40 	tst.w	r0, #64	; 0x40
 800443c:	f102 0004 	add.w	r0, r2, #4
 8004440:	6018      	str	r0, [r3, #0]
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	d001      	beq.n	800444a <_printf_i+0x19e>
 8004446:	8019      	strh	r1, [r3, #0]
 8004448:	e000      	b.n	800444c <_printf_i+0x1a0>
 800444a:	6019      	str	r1, [r3, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	6123      	str	r3, [r4, #16]
 8004450:	4675      	mov	r5, lr
 8004452:	e016      	b.n	8004482 <_printf_i+0x1d6>
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	1d11      	adds	r1, r2, #4
 8004458:	6019      	str	r1, [r3, #0]
 800445a:	6815      	ldr	r5, [r2, #0]
 800445c:	6862      	ldr	r2, [r4, #4]
 800445e:	2100      	movs	r1, #0
 8004460:	4628      	mov	r0, r5
 8004462:	f7fb fec5 	bl	80001f0 <memchr>
 8004466:	b108      	cbz	r0, 800446c <_printf_i+0x1c0>
 8004468:	1b40      	subs	r0, r0, r5
 800446a:	6060      	str	r0, [r4, #4]
 800446c:	6863      	ldr	r3, [r4, #4]
 800446e:	e004      	b.n	800447a <_printf_i+0x1ce>
 8004470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004474:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004478:	2301      	movs	r3, #1
 800447a:	6123      	str	r3, [r4, #16]
 800447c:	2300      	movs	r3, #0
 800447e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004482:	f8cd 8000 	str.w	r8, [sp]
 8004486:	463b      	mov	r3, r7
 8004488:	aa03      	add	r2, sp, #12
 800448a:	4621      	mov	r1, r4
 800448c:	4630      	mov	r0, r6
 800448e:	f7ff fe97 	bl	80041c0 <_printf_common>
 8004492:	3001      	adds	r0, #1
 8004494:	d102      	bne.n	800449c <_printf_i+0x1f0>
 8004496:	f04f 30ff 	mov.w	r0, #4294967295
 800449a:	e026      	b.n	80044ea <_printf_i+0x23e>
 800449c:	6923      	ldr	r3, [r4, #16]
 800449e:	462a      	mov	r2, r5
 80044a0:	4639      	mov	r1, r7
 80044a2:	4630      	mov	r0, r6
 80044a4:	47c0      	blx	r8
 80044a6:	3001      	adds	r0, #1
 80044a8:	d0f5      	beq.n	8004496 <_printf_i+0x1ea>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	079b      	lsls	r3, r3, #30
 80044ae:	d510      	bpl.n	80044d2 <_printf_i+0x226>
 80044b0:	2500      	movs	r5, #0
 80044b2:	f104 0919 	add.w	r9, r4, #25
 80044b6:	e007      	b.n	80044c8 <_printf_i+0x21c>
 80044b8:	2301      	movs	r3, #1
 80044ba:	464a      	mov	r2, r9
 80044bc:	4639      	mov	r1, r7
 80044be:	4630      	mov	r0, r6
 80044c0:	47c0      	blx	r8
 80044c2:	3001      	adds	r0, #1
 80044c4:	d0e7      	beq.n	8004496 <_printf_i+0x1ea>
 80044c6:	3501      	adds	r5, #1
 80044c8:	68e3      	ldr	r3, [r4, #12]
 80044ca:	9a03      	ldr	r2, [sp, #12]
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	429d      	cmp	r5, r3
 80044d0:	dbf2      	blt.n	80044b8 <_printf_i+0x20c>
 80044d2:	68e0      	ldr	r0, [r4, #12]
 80044d4:	9b03      	ldr	r3, [sp, #12]
 80044d6:	4298      	cmp	r0, r3
 80044d8:	bfb8      	it	lt
 80044da:	4618      	movlt	r0, r3
 80044dc:	e005      	b.n	80044ea <_printf_i+0x23e>
 80044de:	780b      	ldrb	r3, [r1, #0]
 80044e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e8:	e78a      	b.n	8004400 <_printf_i+0x154>
 80044ea:	b005      	add	sp, #20
 80044ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044f0:	08004c19 	.word	0x08004c19
 80044f4:	08004c2a 	.word	0x08004c2a

080044f8 <__sread>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	460c      	mov	r4, r1
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	f000 fa88 	bl	8004a14 <_read_r>
 8004504:	2800      	cmp	r0, #0
 8004506:	bfab      	itete	ge
 8004508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800450a:	89a3      	ldrhlt	r3, [r4, #12]
 800450c:	181b      	addge	r3, r3, r0
 800450e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004512:	bfac      	ite	ge
 8004514:	6563      	strge	r3, [r4, #84]	; 0x54
 8004516:	81a3      	strhlt	r3, [r4, #12]
 8004518:	bd10      	pop	{r4, pc}

0800451a <__swrite>:
 800451a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451e:	461f      	mov	r7, r3
 8004520:	898b      	ldrh	r3, [r1, #12]
 8004522:	05db      	lsls	r3, r3, #23
 8004524:	4605      	mov	r5, r0
 8004526:	460c      	mov	r4, r1
 8004528:	4616      	mov	r6, r2
 800452a:	d505      	bpl.n	8004538 <__swrite+0x1e>
 800452c:	2302      	movs	r3, #2
 800452e:	2200      	movs	r2, #0
 8004530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004534:	f000 f9ba 	bl	80048ac <_lseek_r>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800453e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004542:	81a3      	strh	r3, [r4, #12]
 8004544:	4632      	mov	r2, r6
 8004546:	463b      	mov	r3, r7
 8004548:	4628      	mov	r0, r5
 800454a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800454e:	f000 b86b 	b.w	8004628 <_write_r>

08004552 <__sseek>:
 8004552:	b510      	push	{r4, lr}
 8004554:	460c      	mov	r4, r1
 8004556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800455a:	f000 f9a7 	bl	80048ac <_lseek_r>
 800455e:	1c43      	adds	r3, r0, #1
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	bf15      	itete	ne
 8004564:	6560      	strne	r0, [r4, #84]	; 0x54
 8004566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800456a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800456e:	81a3      	strheq	r3, [r4, #12]
 8004570:	bf18      	it	ne
 8004572:	81a3      	strhne	r3, [r4, #12]
 8004574:	bd10      	pop	{r4, pc}

08004576 <__sclose>:
 8004576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457a:	f000 b8d5 	b.w	8004728 <_close_r>
	...

08004580 <__swbuf_r>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	460f      	mov	r7, r1
 8004584:	4614      	mov	r4, r2
 8004586:	4606      	mov	r6, r0
 8004588:	b118      	cbz	r0, 8004592 <__swbuf_r+0x12>
 800458a:	6983      	ldr	r3, [r0, #24]
 800458c:	b90b      	cbnz	r3, 8004592 <__swbuf_r+0x12>
 800458e:	f7ff faf7 	bl	8003b80 <__sinit>
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <__swbuf_r+0x9c>)
 8004594:	429c      	cmp	r4, r3
 8004596:	d101      	bne.n	800459c <__swbuf_r+0x1c>
 8004598:	6874      	ldr	r4, [r6, #4]
 800459a:	e008      	b.n	80045ae <__swbuf_r+0x2e>
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <__swbuf_r+0xa0>)
 800459e:	429c      	cmp	r4, r3
 80045a0:	d101      	bne.n	80045a6 <__swbuf_r+0x26>
 80045a2:	68b4      	ldr	r4, [r6, #8]
 80045a4:	e003      	b.n	80045ae <__swbuf_r+0x2e>
 80045a6:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <__swbuf_r+0xa4>)
 80045a8:	429c      	cmp	r4, r3
 80045aa:	bf08      	it	eq
 80045ac:	68f4      	ldreq	r4, [r6, #12]
 80045ae:	69a3      	ldr	r3, [r4, #24]
 80045b0:	60a3      	str	r3, [r4, #8]
 80045b2:	89a3      	ldrh	r3, [r4, #12]
 80045b4:	071a      	lsls	r2, r3, #28
 80045b6:	d509      	bpl.n	80045cc <__swbuf_r+0x4c>
 80045b8:	6923      	ldr	r3, [r4, #16]
 80045ba:	b13b      	cbz	r3, 80045cc <__swbuf_r+0x4c>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	6920      	ldr	r0, [r4, #16]
 80045c0:	1a18      	subs	r0, r3, r0
 80045c2:	6963      	ldr	r3, [r4, #20]
 80045c4:	4298      	cmp	r0, r3
 80045c6:	b2fd      	uxtb	r5, r7
 80045c8:	db0f      	blt.n	80045ea <__swbuf_r+0x6a>
 80045ca:	e008      	b.n	80045de <__swbuf_r+0x5e>
 80045cc:	4621      	mov	r1, r4
 80045ce:	4630      	mov	r0, r6
 80045d0:	f000 f83c 	bl	800464c <__swsetup_r>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d0f1      	beq.n	80045bc <__swbuf_r+0x3c>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045de:	4621      	mov	r1, r4
 80045e0:	4630      	mov	r0, r6
 80045e2:	f000 f939 	bl	8004858 <_fflush_r>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d1f6      	bne.n	80045d8 <__swbuf_r+0x58>
 80045ea:	68a3      	ldr	r3, [r4, #8]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	60a3      	str	r3, [r4, #8]
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	6022      	str	r2, [r4, #0]
 80045f6:	701f      	strb	r7, [r3, #0]
 80045f8:	6962      	ldr	r2, [r4, #20]
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <__swbuf_r+0x8a>
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	07db      	lsls	r3, r3, #31
 8004604:	d507      	bpl.n	8004616 <__swbuf_r+0x96>
 8004606:	2d0a      	cmp	r5, #10
 8004608:	d105      	bne.n	8004616 <__swbuf_r+0x96>
 800460a:	4621      	mov	r1, r4
 800460c:	4630      	mov	r0, r6
 800460e:	f000 f923 	bl	8004858 <_fflush_r>
 8004612:	2800      	cmp	r0, #0
 8004614:	d1e0      	bne.n	80045d8 <__swbuf_r+0x58>
 8004616:	4628      	mov	r0, r5
 8004618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800461a:	bf00      	nop
 800461c:	08004ba0 	.word	0x08004ba0
 8004620:	08004bc0 	.word	0x08004bc0
 8004624:	08004be0 	.word	0x08004be0

08004628 <_write_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4c07      	ldr	r4, [pc, #28]	; (8004648 <_write_r+0x20>)
 800462c:	4605      	mov	r5, r0
 800462e:	4608      	mov	r0, r1
 8004630:	4611      	mov	r1, r2
 8004632:	2200      	movs	r2, #0
 8004634:	6022      	str	r2, [r4, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	f7ff f870 	bl	800371c <_write>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_write_r+0x1e>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	b103      	cbz	r3, 8004646 <_write_r+0x1e>
 8004644:	602b      	str	r3, [r5, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20002b40 	.word	0x20002b40

0800464c <__swsetup_r>:
 800464c:	4b32      	ldr	r3, [pc, #200]	; (8004718 <__swsetup_r+0xcc>)
 800464e:	b570      	push	{r4, r5, r6, lr}
 8004650:	681d      	ldr	r5, [r3, #0]
 8004652:	4606      	mov	r6, r0
 8004654:	460c      	mov	r4, r1
 8004656:	b125      	cbz	r5, 8004662 <__swsetup_r+0x16>
 8004658:	69ab      	ldr	r3, [r5, #24]
 800465a:	b913      	cbnz	r3, 8004662 <__swsetup_r+0x16>
 800465c:	4628      	mov	r0, r5
 800465e:	f7ff fa8f 	bl	8003b80 <__sinit>
 8004662:	4b2e      	ldr	r3, [pc, #184]	; (800471c <__swsetup_r+0xd0>)
 8004664:	429c      	cmp	r4, r3
 8004666:	d101      	bne.n	800466c <__swsetup_r+0x20>
 8004668:	686c      	ldr	r4, [r5, #4]
 800466a:	e008      	b.n	800467e <__swsetup_r+0x32>
 800466c:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <__swsetup_r+0xd4>)
 800466e:	429c      	cmp	r4, r3
 8004670:	d101      	bne.n	8004676 <__swsetup_r+0x2a>
 8004672:	68ac      	ldr	r4, [r5, #8]
 8004674:	e003      	b.n	800467e <__swsetup_r+0x32>
 8004676:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <__swsetup_r+0xd8>)
 8004678:	429c      	cmp	r4, r3
 800467a:	bf08      	it	eq
 800467c:	68ec      	ldreq	r4, [r5, #12]
 800467e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004682:	b29a      	uxth	r2, r3
 8004684:	0715      	lsls	r5, r2, #28
 8004686:	d41d      	bmi.n	80046c4 <__swsetup_r+0x78>
 8004688:	06d0      	lsls	r0, r2, #27
 800468a:	d402      	bmi.n	8004692 <__swsetup_r+0x46>
 800468c:	2209      	movs	r2, #9
 800468e:	6032      	str	r2, [r6, #0]
 8004690:	e03a      	b.n	8004708 <__swsetup_r+0xbc>
 8004692:	0751      	lsls	r1, r2, #29
 8004694:	d512      	bpl.n	80046bc <__swsetup_r+0x70>
 8004696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004698:	b141      	cbz	r1, 80046ac <__swsetup_r+0x60>
 800469a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800469e:	4299      	cmp	r1, r3
 80046a0:	d002      	beq.n	80046a8 <__swsetup_r+0x5c>
 80046a2:	4630      	mov	r0, r6
 80046a4:	f7ff f926 	bl	80038f4 <_free_r>
 80046a8:	2300      	movs	r3, #0
 80046aa:	6363      	str	r3, [r4, #52]	; 0x34
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	2300      	movs	r3, #0
 80046b6:	6063      	str	r3, [r4, #4]
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	f043 0308 	orr.w	r3, r3, #8
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	b94b      	cbnz	r3, 80046dc <__swsetup_r+0x90>
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d2:	d003      	beq.n	80046dc <__swsetup_r+0x90>
 80046d4:	4621      	mov	r1, r4
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 f91e 	bl	8004918 <__smakebuf_r>
 80046dc:	89a2      	ldrh	r2, [r4, #12]
 80046de:	f012 0301 	ands.w	r3, r2, #1
 80046e2:	d005      	beq.n	80046f0 <__swsetup_r+0xa4>
 80046e4:	2300      	movs	r3, #0
 80046e6:	60a3      	str	r3, [r4, #8]
 80046e8:	6963      	ldr	r3, [r4, #20]
 80046ea:	425b      	negs	r3, r3
 80046ec:	61a3      	str	r3, [r4, #24]
 80046ee:	e003      	b.n	80046f8 <__swsetup_r+0xac>
 80046f0:	0792      	lsls	r2, r2, #30
 80046f2:	bf58      	it	pl
 80046f4:	6963      	ldrpl	r3, [r4, #20]
 80046f6:	60a3      	str	r3, [r4, #8]
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	b95b      	cbnz	r3, 8004714 <__swsetup_r+0xc8>
 80046fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004700:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8004704:	b280      	uxth	r0, r0
 8004706:	b130      	cbz	r0, 8004716 <__swsetup_r+0xca>
 8004708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800470c:	81a3      	strh	r3, [r4, #12]
 800470e:	f04f 30ff 	mov.w	r0, #4294967295
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	2000      	movs	r0, #0
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	2000006c 	.word	0x2000006c
 800471c:	08004ba0 	.word	0x08004ba0
 8004720:	08004bc0 	.word	0x08004bc0
 8004724:	08004be0 	.word	0x08004be0

08004728 <_close_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4c06      	ldr	r4, [pc, #24]	; (8004744 <_close_r+0x1c>)
 800472c:	2300      	movs	r3, #0
 800472e:	4605      	mov	r5, r0
 8004730:	4608      	mov	r0, r1
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	f7ff f828 	bl	8003788 <_close>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_close_r+0x1a>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	b103      	cbz	r3, 8004742 <_close_r+0x1a>
 8004740:	602b      	str	r3, [r5, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	20002b40 	.word	0x20002b40

08004748 <__sflush_r>:
 8004748:	898a      	ldrh	r2, [r1, #12]
 800474a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800474e:	4605      	mov	r5, r0
 8004750:	0710      	lsls	r0, r2, #28
 8004752:	460c      	mov	r4, r1
 8004754:	d459      	bmi.n	800480a <__sflush_r+0xc2>
 8004756:	684b      	ldr	r3, [r1, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	dc02      	bgt.n	8004762 <__sflush_r+0x1a>
 800475c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	dd17      	ble.n	8004792 <__sflush_r+0x4a>
 8004762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004764:	b1ae      	cbz	r6, 8004792 <__sflush_r+0x4a>
 8004766:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800476a:	2300      	movs	r3, #0
 800476c:	b292      	uxth	r2, r2
 800476e:	682f      	ldr	r7, [r5, #0]
 8004770:	602b      	str	r3, [r5, #0]
 8004772:	b10a      	cbz	r2, 8004778 <__sflush_r+0x30>
 8004774:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004776:	e015      	b.n	80047a4 <__sflush_r+0x5c>
 8004778:	6a21      	ldr	r1, [r4, #32]
 800477a:	2301      	movs	r3, #1
 800477c:	4628      	mov	r0, r5
 800477e:	47b0      	blx	r6
 8004780:	1c41      	adds	r1, r0, #1
 8004782:	d10f      	bne.n	80047a4 <__sflush_r+0x5c>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	b16b      	cbz	r3, 80047a4 <__sflush_r+0x5c>
 8004788:	2b1d      	cmp	r3, #29
 800478a:	d001      	beq.n	8004790 <__sflush_r+0x48>
 800478c:	2b16      	cmp	r3, #22
 800478e:	d103      	bne.n	8004798 <__sflush_r+0x50>
 8004790:	602f      	str	r7, [r5, #0]
 8004792:	2000      	movs	r0, #0
 8004794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479e:	81a3      	strh	r3, [r4, #12]
 80047a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	075a      	lsls	r2, r3, #29
 80047a8:	d505      	bpl.n	80047b6 <__sflush_r+0x6e>
 80047aa:	6863      	ldr	r3, [r4, #4]
 80047ac:	1ac0      	subs	r0, r0, r3
 80047ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047b0:	b10b      	cbz	r3, 80047b6 <__sflush_r+0x6e>
 80047b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047b4:	1ac0      	subs	r0, r0, r3
 80047b6:	2300      	movs	r3, #0
 80047b8:	4602      	mov	r2, r0
 80047ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047bc:	6a21      	ldr	r1, [r4, #32]
 80047be:	4628      	mov	r0, r5
 80047c0:	47b0      	blx	r6
 80047c2:	1c43      	adds	r3, r0, #1
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	d106      	bne.n	80047d6 <__sflush_r+0x8e>
 80047c8:	6829      	ldr	r1, [r5, #0]
 80047ca:	291d      	cmp	r1, #29
 80047cc:	d83a      	bhi.n	8004844 <__sflush_r+0xfc>
 80047ce:	4a21      	ldr	r2, [pc, #132]	; (8004854 <__sflush_r+0x10c>)
 80047d0:	40ca      	lsrs	r2, r1
 80047d2:	07d6      	lsls	r6, r2, #31
 80047d4:	d536      	bpl.n	8004844 <__sflush_r+0xfc>
 80047d6:	2200      	movs	r2, #0
 80047d8:	6062      	str	r2, [r4, #4]
 80047da:	04d9      	lsls	r1, r3, #19
 80047dc:	6922      	ldr	r2, [r4, #16]
 80047de:	6022      	str	r2, [r4, #0]
 80047e0:	d504      	bpl.n	80047ec <__sflush_r+0xa4>
 80047e2:	1c42      	adds	r2, r0, #1
 80047e4:	d101      	bne.n	80047ea <__sflush_r+0xa2>
 80047e6:	682b      	ldr	r3, [r5, #0]
 80047e8:	b903      	cbnz	r3, 80047ec <__sflush_r+0xa4>
 80047ea:	6560      	str	r0, [r4, #84]	; 0x54
 80047ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ee:	602f      	str	r7, [r5, #0]
 80047f0:	2900      	cmp	r1, #0
 80047f2:	d0ce      	beq.n	8004792 <__sflush_r+0x4a>
 80047f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f8:	4299      	cmp	r1, r3
 80047fa:	d002      	beq.n	8004802 <__sflush_r+0xba>
 80047fc:	4628      	mov	r0, r5
 80047fe:	f7ff f879 	bl	80038f4 <_free_r>
 8004802:	2000      	movs	r0, #0
 8004804:	6360      	str	r0, [r4, #52]	; 0x34
 8004806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800480a:	690f      	ldr	r7, [r1, #16]
 800480c:	2f00      	cmp	r7, #0
 800480e:	d0c0      	beq.n	8004792 <__sflush_r+0x4a>
 8004810:	0793      	lsls	r3, r2, #30
 8004812:	680e      	ldr	r6, [r1, #0]
 8004814:	bf08      	it	eq
 8004816:	694b      	ldreq	r3, [r1, #20]
 8004818:	600f      	str	r7, [r1, #0]
 800481a:	bf18      	it	ne
 800481c:	2300      	movne	r3, #0
 800481e:	ebc7 0806 	rsb	r8, r7, r6
 8004822:	608b      	str	r3, [r1, #8]
 8004824:	e002      	b.n	800482c <__sflush_r+0xe4>
 8004826:	4407      	add	r7, r0
 8004828:	ebc0 0808 	rsb	r8, r0, r8
 800482c:	f1b8 0f00 	cmp.w	r8, #0
 8004830:	ddaf      	ble.n	8004792 <__sflush_r+0x4a>
 8004832:	4643      	mov	r3, r8
 8004834:	463a      	mov	r2, r7
 8004836:	6a21      	ldr	r1, [r4, #32]
 8004838:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800483a:	4628      	mov	r0, r5
 800483c:	47b0      	blx	r6
 800483e:	2800      	cmp	r0, #0
 8004840:	dcf1      	bgt.n	8004826 <__sflush_r+0xde>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	f04f 30ff 	mov.w	r0, #4294967295
 800484e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004852:	bf00      	nop
 8004854:	20400001 	.word	0x20400001

08004858 <_fflush_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	690b      	ldr	r3, [r1, #16]
 800485c:	4605      	mov	r5, r0
 800485e:	460c      	mov	r4, r1
 8004860:	b1db      	cbz	r3, 800489a <_fflush_r+0x42>
 8004862:	b118      	cbz	r0, 800486c <_fflush_r+0x14>
 8004864:	6983      	ldr	r3, [r0, #24]
 8004866:	b90b      	cbnz	r3, 800486c <_fflush_r+0x14>
 8004868:	f7ff f98a 	bl	8003b80 <__sinit>
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <_fflush_r+0x48>)
 800486e:	429c      	cmp	r4, r3
 8004870:	d101      	bne.n	8004876 <_fflush_r+0x1e>
 8004872:	686c      	ldr	r4, [r5, #4]
 8004874:	e008      	b.n	8004888 <_fflush_r+0x30>
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <_fflush_r+0x4c>)
 8004878:	429c      	cmp	r4, r3
 800487a:	d101      	bne.n	8004880 <_fflush_r+0x28>
 800487c:	68ac      	ldr	r4, [r5, #8]
 800487e:	e003      	b.n	8004888 <_fflush_r+0x30>
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <_fflush_r+0x50>)
 8004882:	429c      	cmp	r4, r3
 8004884:	bf08      	it	eq
 8004886:	68ec      	ldreq	r4, [r5, #12]
 8004888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800488c:	b12b      	cbz	r3, 800489a <_fflush_r+0x42>
 800488e:	4621      	mov	r1, r4
 8004890:	4628      	mov	r0, r5
 8004892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004896:	f7ff bf57 	b.w	8004748 <__sflush_r>
 800489a:	2000      	movs	r0, #0
 800489c:	bd38      	pop	{r3, r4, r5, pc}
 800489e:	bf00      	nop
 80048a0:	08004ba0 	.word	0x08004ba0
 80048a4:	08004bc0 	.word	0x08004bc0
 80048a8:	08004be0 	.word	0x08004be0

080048ac <_lseek_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4c07      	ldr	r4, [pc, #28]	; (80048cc <_lseek_r+0x20>)
 80048b0:	4605      	mov	r5, r0
 80048b2:	4608      	mov	r0, r1
 80048b4:	4611      	mov	r1, r2
 80048b6:	2200      	movs	r2, #0
 80048b8:	6022      	str	r2, [r4, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f7fe ff6e 	bl	800379c <_lseek>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_lseek_r+0x1e>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_lseek_r+0x1e>
 80048c8:	602b      	str	r3, [r5, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	20002b40 	.word	0x20002b40

080048d0 <__swhatbuf_r>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	460e      	mov	r6, r1
 80048d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d8:	2900      	cmp	r1, #0
 80048da:	b090      	sub	sp, #64	; 0x40
 80048dc:	4614      	mov	r4, r2
 80048de:	461d      	mov	r5, r3
 80048e0:	da06      	bge.n	80048f0 <__swhatbuf_r+0x20>
 80048e2:	2300      	movs	r3, #0
 80048e4:	602b      	str	r3, [r5, #0]
 80048e6:	89b3      	ldrh	r3, [r6, #12]
 80048e8:	061a      	lsls	r2, r3, #24
 80048ea:	d50e      	bpl.n	800490a <__swhatbuf_r+0x3a>
 80048ec:	2340      	movs	r3, #64	; 0x40
 80048ee:	e00e      	b.n	800490e <__swhatbuf_r+0x3e>
 80048f0:	aa01      	add	r2, sp, #4
 80048f2:	f000 f8a1 	bl	8004a38 <_fstat_r>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	dbf3      	blt.n	80048e2 <__swhatbuf_r+0x12>
 80048fa:	9a02      	ldr	r2, [sp, #8]
 80048fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004900:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004904:	425a      	negs	r2, r3
 8004906:	415a      	adcs	r2, r3
 8004908:	602a      	str	r2, [r5, #0]
 800490a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800490e:	2000      	movs	r0, #0
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	b010      	add	sp, #64	; 0x40
 8004914:	bd70      	pop	{r4, r5, r6, pc}
	...

08004918 <__smakebuf_r>:
 8004918:	898b      	ldrh	r3, [r1, #12]
 800491a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800491c:	079e      	lsls	r6, r3, #30
 800491e:	4605      	mov	r5, r0
 8004920:	460c      	mov	r4, r1
 8004922:	d410      	bmi.n	8004946 <__smakebuf_r+0x2e>
 8004924:	ab01      	add	r3, sp, #4
 8004926:	466a      	mov	r2, sp
 8004928:	f7ff ffd2 	bl	80048d0 <__swhatbuf_r>
 800492c:	9900      	ldr	r1, [sp, #0]
 800492e:	4606      	mov	r6, r0
 8004930:	4628      	mov	r0, r5
 8004932:	f7ff f82d 	bl	8003990 <_malloc_r>
 8004936:	b968      	cbnz	r0, 8004954 <__smakebuf_r+0x3c>
 8004938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800493c:	059a      	lsls	r2, r3, #22
 800493e:	d422      	bmi.n	8004986 <__smakebuf_r+0x6e>
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	81a3      	strh	r3, [r4, #12]
 8004946:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	6123      	str	r3, [r4, #16]
 800494e:	2301      	movs	r3, #1
 8004950:	6163      	str	r3, [r4, #20]
 8004952:	e018      	b.n	8004986 <__smakebuf_r+0x6e>
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <__smakebuf_r+0x74>)
 8004956:	62ab      	str	r3, [r5, #40]	; 0x28
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	6020      	str	r0, [r4, #0]
 800495c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004960:	81a3      	strh	r3, [r4, #12]
 8004962:	9b00      	ldr	r3, [sp, #0]
 8004964:	6163      	str	r3, [r4, #20]
 8004966:	9b01      	ldr	r3, [sp, #4]
 8004968:	6120      	str	r0, [r4, #16]
 800496a:	b14b      	cbz	r3, 8004980 <__smakebuf_r+0x68>
 800496c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004970:	4628      	mov	r0, r5
 8004972:	f000 f873 	bl	8004a5c <_isatty_r>
 8004976:	b118      	cbz	r0, 8004980 <__smakebuf_r+0x68>
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	81a3      	strh	r3, [r4, #12]
 8004980:	89a0      	ldrh	r0, [r4, #12]
 8004982:	4330      	orrs	r0, r6
 8004984:	81a0      	strh	r0, [r4, #12]
 8004986:	b002      	add	sp, #8
 8004988:	bd70      	pop	{r4, r5, r6, pc}
 800498a:	bf00      	nop
 800498c:	08003b01 	.word	0x08003b01

08004990 <memmove>:
 8004990:	4288      	cmp	r0, r1
 8004992:	b510      	push	{r4, lr}
 8004994:	eb01 0302 	add.w	r3, r1, r2
 8004998:	d801      	bhi.n	800499e <memmove+0xe>
 800499a:	1e42      	subs	r2, r0, #1
 800499c:	e00b      	b.n	80049b6 <memmove+0x26>
 800499e:	4298      	cmp	r0, r3
 80049a0:	d2fb      	bcs.n	800499a <memmove+0xa>
 80049a2:	1881      	adds	r1, r0, r2
 80049a4:	1ad2      	subs	r2, r2, r3
 80049a6:	42d3      	cmn	r3, r2
 80049a8:	d004      	beq.n	80049b4 <memmove+0x24>
 80049aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80049b2:	e7f8      	b.n	80049a6 <memmove+0x16>
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	4299      	cmp	r1, r3
 80049b8:	d004      	beq.n	80049c4 <memmove+0x34>
 80049ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80049c2:	e7f8      	b.n	80049b6 <memmove+0x26>
 80049c4:	bd10      	pop	{r4, pc}

080049c6 <_realloc_r>:
 80049c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c8:	4607      	mov	r7, r0
 80049ca:	4615      	mov	r5, r2
 80049cc:	460e      	mov	r6, r1
 80049ce:	b921      	cbnz	r1, 80049da <_realloc_r+0x14>
 80049d0:	4611      	mov	r1, r2
 80049d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049d6:	f7fe bfdb 	b.w	8003990 <_malloc_r>
 80049da:	b91a      	cbnz	r2, 80049e4 <_realloc_r+0x1e>
 80049dc:	f7fe ff8a 	bl	80038f4 <_free_r>
 80049e0:	4628      	mov	r0, r5
 80049e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e4:	f000 f84a 	bl	8004a7c <_malloc_usable_size_r>
 80049e8:	4285      	cmp	r5, r0
 80049ea:	d90e      	bls.n	8004a0a <_realloc_r+0x44>
 80049ec:	4629      	mov	r1, r5
 80049ee:	4638      	mov	r0, r7
 80049f0:	f7fe ffce 	bl	8003990 <_malloc_r>
 80049f4:	4604      	mov	r4, r0
 80049f6:	b150      	cbz	r0, 8004a0e <_realloc_r+0x48>
 80049f8:	4631      	mov	r1, r6
 80049fa:	462a      	mov	r2, r5
 80049fc:	f7fe ff66 	bl	80038cc <memcpy>
 8004a00:	4631      	mov	r1, r6
 8004a02:	4638      	mov	r0, r7
 8004a04:	f7fe ff76 	bl	80038f4 <_free_r>
 8004a08:	e001      	b.n	8004a0e <_realloc_r+0x48>
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a0e:	4620      	mov	r0, r4
 8004a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a14 <_read_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4c07      	ldr	r4, [pc, #28]	; (8004a34 <_read_r+0x20>)
 8004a18:	4605      	mov	r5, r0
 8004a1a:	4608      	mov	r0, r1
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	2200      	movs	r2, #0
 8004a20:	6022      	str	r2, [r4, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f7fe febc 	bl	80037a0 <_read>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_read_r+0x1e>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_read_r+0x1e>
 8004a30:	602b      	str	r3, [r5, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	20002b40 	.word	0x20002b40

08004a38 <_fstat_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4c07      	ldr	r4, [pc, #28]	; (8004a58 <_fstat_r+0x20>)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4605      	mov	r5, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	f7fe fea2 	bl	800378e <_fstat>
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	d102      	bne.n	8004a54 <_fstat_r+0x1c>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	b103      	cbz	r3, 8004a54 <_fstat_r+0x1c>
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
 8004a56:	bf00      	nop
 8004a58:	20002b40 	.word	0x20002b40

08004a5c <_isatty_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4c06      	ldr	r4, [pc, #24]	; (8004a78 <_isatty_r+0x1c>)
 8004a60:	2300      	movs	r3, #0
 8004a62:	4605      	mov	r5, r0
 8004a64:	4608      	mov	r0, r1
 8004a66:	6023      	str	r3, [r4, #0]
 8004a68:	f7fe fe96 	bl	8003798 <_isatty>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_isatty_r+0x1a>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_isatty_r+0x1a>
 8004a74:	602b      	str	r3, [r5, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	20002b40 	.word	0x20002b40

08004a7c <_malloc_usable_size_r>:
 8004a7c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004a80:	2800      	cmp	r0, #0
 8004a82:	bfbe      	ittt	lt
 8004a84:	1809      	addlt	r1, r1, r0
 8004a86:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8004a8a:	18c0      	addlt	r0, r0, r3
 8004a8c:	3804      	subs	r0, #4
 8004a8e:	4770      	bx	lr

08004a90 <_init>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr

08004a9c <_fini>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr
